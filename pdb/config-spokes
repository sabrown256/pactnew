#!/bin/csh -f
#
# CONFIG_SPOKES - see which C spokes we have
#
# Source Version: 3.0
# Software Release #: LLNL-CODE-422942
#
# include "cpyright.h"
#

set src = `dirname $0`
set dst = pdspoke.c

while ($#argv > 0)
   switch ($1)
      case -dst:
           shift
           set dst  = $1
           breaksw
      default:
           echo "Unexpected command line arg: $1"
	   exit(1)
           breaksw
   endsw
   shift
end

unalias ls

# find the available spokes
pushd $src/spokes >& /dev/null

set spokes = ""
foreach i (`ls -1r`)
    switch ($i)
       case CVS:
       case sql:
       case hdf5:
            breaksw
       default:
            set spokes = ( $spokes $i )
            breaksw
    endsw
end

popd >& /dev/null

rm -f $dst
touch $dst

cat >&! $dst << EOF
/*
 * PDSPOKE.C - automatically generated routine to register C coded spokes
 *
 * Source Version: 3.0
 * Software Release #: LLNL-CODE-422942
 *
 */

#include "cpyright.h"
 
#include "pdb_int.h"
 
extern SC_array
 *_PD_file_types;

/*--------------------------------------------------------------------------*/
/*--------------------------------------------------------------------------*/

/* _PD_REGISTER_SPOKES - return TRUE iff the named spoke is present */

int _PD_register_spokes(void)
   {int n;
    static int ns = 0;

EOF

foreach i ($spokes)
    echo "    extern int PD_register_${i}(void);" >>& $dst
end
echo "" >>& $dst

echo "    if (ns == 0)" >>& $dst
echo "       {G_register_pdb_types();" >>& $dst
echo "        ns += (PD_register_pdb() >= 0);" >>& $dst

foreach i ($spokes)
    echo "        ns += (PD_register_${i}() >= 0);" >>& $dst
end

echo "        };" >>& $dst

cat >>& $dst << EOF

    n = SC_array_get_n(_PD_file_types);

    return(n);}

/*--------------------------------------------------------------------------*/
/*--------------------------------------------------------------------------*/

EOF

exit($status)
