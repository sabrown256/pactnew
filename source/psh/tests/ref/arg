/*
 * SCARG.H - generated type handling routines - do not edit
 *
 */

#ifndef PCK_SCARG

#define PCK_SCARG

#include "cpyright.h"

#define REAL double
#define HUGE_REAL 1.0e100

#ifndef HAVE_FIXED_WIDTH_FLOAT
typedef float       float32_t;
typedef double      float64_t;
typedef long double float128_t;
#endif

/*--------------------------------------------------------------------------*/

/*                           DEFINED CONSTANTS                              */

/*--------------------------------------------------------------------------*/

#define N_PRIMITIVE_CHAR  2
#define N_PRIMITIVE_FIX   5
#define N_PRIMITIVE_FP    3
#define N_PRIMITIVE_CPX   3
#define N_PRIMITIVE_QUT   1

#define N_PRIMITIVES     16
#define N_TYPES          64

#define _SC_DEF_STATIC_TYPE_LIST_ {                                             \
   {    0,   -1, "unknown", "unknown", "unknown", "unknown", "unk", NULL, 0, TK_META, KIND_OTHER, NULL, NULL, NULL, NULL, NULL, "unknown", "SC_UNKNOWN_I", "SC_UNKNOWN_S", NULL, NULL, NULL }, 	\
   {    1,   -1, "bit", "bit", "bit", "bit", "bit", NULL, 0, TK_META, KIND_OTHER, NULL, NULL, NULL, NULL, NULL, "bit", "SC_BIT_I", "SC_BIT_S", NULL, NULL, NULL }, 	\
   {    2,   -1, "struct", "struct", "struct", "struct", "strct", NULL, 0, TK_META, KIND_OTHER, NULL, NULL, NULL, NULL, NULL, "struct", "SC_STRUCT_I", "SC_STRUCT_S", NULL, NULL, NULL }, 	\
   {    3,   -1, "void", "void", "void", "void", "any", NULL, 1, TK_META, KIND_OTHER, NULL, NULL, "NULL", "void", NULL, "void", "SC_VOID_I", "SC_VOID_S", NULL, NULL, NULL }, 	\
   {    4,    8, "void *", "void *", "void *", "void", "ptr", NULL, 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "C_PTR-A", NULL, "void", "SC_POINTER_I", "SC_POINTER_S", NULL, NULL, NULL }, 	\
   {    5, sizeof(bool), "bool", "bool", "bool", "bool", "bool", NULL, 1, TK_PRIMITIVE, KIND_BOOL, "BOOL_MIN", "BOOL_MAX", "FALSE", "logical", "int", "bool", "SC_BOOL_I", "SC_BOOL_S", NULL, NULL, NULL }, 	\
   {    6,    8, "bool *", "bool *", "bool *", "bool", "ptr", NULL, 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "logical-A", "int", "bool", "SC_BOOL_P_I", "SC_BOOL_P_S", NULL, NULL, NULL }, 	\
   {    7, sizeof(char), "char", "signed char", "unsigned char", "char", "chr", NULL, 1, TK_PRIMITIVE, KIND_CHAR, "SCHAR_MIN", "SCHAR_MAX", "'\0'", "character", "int", "char", "SC_CHAR_I", "SC_CHAR_S", NULL, NULL, NULL }, 	\
   {    8,    8, "char *", "char *", "char *", "char", "ptr", NULL, 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "character-A", "int", "char", "SC_STRING_I", "SC_STRING_S", NULL, NULL, NULL }, 	\
   {    9, sizeof(wchar_t), "wchar_t", "wchar_t", "wchar_t", "wchar_t", "wchr", NULL, 1, TK_PRIMITIVE, KIND_CHAR, "WCHAR_MIN", "WCHAR_MAX", "0", NULL, "int", "wchar_t", "SC_WCHAR_I", "SC_WCHAR_S", NULL, NULL, NULL }, 	\
   {   10,    8, "wchar_t *", "wchar_t *", "wchar_t *", "wchar_t", "ptr", NULL, 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "character-A", "int", "wchar_t", "SC_WCHAR_P_I", "SC_WCHAR_P_S", NULL, NULL, NULL }, 	\
   {   11, sizeof(int8_t), "int8_t", "int8_t", "u_int8_t", "int8_t", "int8", NULL, 1, TK_PRIMITIVE, KIND_INT, "INT8_MIN", "INT8_MAX", "0", "integer(1)", "int", "int8_t", "SC_INT8_I", "SC_INT8_S", NULL, NULL, NULL }, 	\
   {   12,    8, "int8_t *", "int8_t *", "int8_t *", "int8_t", "ptr", NULL, 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "integer(1)-A", "int", "int8_t", "SC_INT8_P_I", "SC_INT8_P_S", NULL, NULL, NULL }, 	\
   {   13, sizeof(short), "short", "signed short", "unsigned short", "short", "shrt", NULL, 1, TK_PRIMITIVE, KIND_INT, "SHRT_MIN", "SHRT_MAX", "0", "integer(2)", "int", "short", "SC_SHORT_I", "SC_SHORT_S", NULL, NULL, NULL }, 	\
   {   14,    8, "short *", "short *", "short *", "short", "ptr", NULL, 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "integer(2)-A", "int", "short", "SC_SHORT_P_I", "SC_SHORT_P_S", NULL, NULL, NULL }, 	\
   {   15, sizeof(int), "int", "signed int", "unsigned int", "int", "int", NULL, 1, TK_PRIMITIVE, KIND_INT, "INT_MIN", "INT_MAX", "0", "integer", NULL, "int", "SC_INT_I", "SC_INT_S", NULL, NULL, NULL }, 	\
   {   16,    8, "int *", "int *", "int *", "int", "ptr", NULL, 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "integer-A", NULL, "int", "SC_INT_P_I", "SC_INT_P_S", NULL, NULL, NULL }, 	\
   {   17, sizeof(long), "long", "signed long", "unsigned long", "long", "lng", NULL, 1, TK_PRIMITIVE, KIND_INT, "LONG_MIN", "LONG_MAX", "0L", "integer(8)", NULL, "long", "SC_LONG_I", "SC_LONG_S", NULL, NULL, NULL }, 	\
   {   18,    8, "long *", "long *", "long *", "long", "ptr", NULL, 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "integer(8)-A", NULL, "long", "SC_LONG_P_I", "SC_LONG_P_S", NULL, NULL, NULL }, 	\
   {   19, sizeof(long long), "long long", "signed long long", "unsigned long long", "long_long", "ll", NULL, 1, TK_PRIMITIVE, KIND_INT, "LLONG_MIN", "LLONG_MAX", "0LL", "integer(8)", NULL, "long long", "SC_LONG_LONG_I", "SC_LONG_LONG_S", NULL, NULL, NULL }, 	\
   {   20,    8, "long long *", "long long *", "long long *", "long_long", "ptr", NULL, 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "integer(8)-A", NULL, "long long", "SC_LONG_LONG_P_I", "SC_LONG_LONG_P_S", NULL, NULL, NULL }, 	\
   {   21, sizeof(float), "float", "float", "float", "float", "flt", NULL, 1, TK_PRIMITIVE, KIND_FLOAT, "-FLT_MAX", "FLT_MAX", "0.0", "real(4)", "double", "float", "SC_FLOAT_I", "SC_FLOAT_S", NULL, NULL, NULL }, 	\
   {   22,    8, "float *", "float *", "float *", "float", "ptr", NULL, 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "real(4)-A", "double", "float", "SC_FLOAT_P_I", "SC_FLOAT_P_S", NULL, NULL, NULL }, 	\
   {   23, sizeof(double), "double", "double", "double", "double", "dbl", NULL, 1, TK_PRIMITIVE, KIND_FLOAT, "-DBL_MAX", "DBL_MAX", "0.0", "real(8)", NULL, "double", "SC_DOUBLE_I", "SC_DOUBLE_S", NULL, NULL, NULL }, 	\
   {   24,    8, "double *", "double *", "double *", "double", "ptr", NULL, 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "real(8)-A", NULL, "double", "SC_DOUBLE_P_I", "SC_DOUBLE_P_S", NULL, NULL, NULL }, 	\
   {   25, sizeof(long double), "long double", "long double", "long double", "long_double", "ldbl", NULL, 1, TK_PRIMITIVE, KIND_FLOAT, "-LDBL_MAX", "LDBL_MAX", "0.0", "real(16)", NULL, "long double", "SC_LONG_DOUBLE_I", "SC_LONG_DOUBLE_S", NULL, NULL, NULL }, 	\
   {   26,    8, "long double *", "long double *", "long double *", "long_double", "ptr", NULL, 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "real(16)-A", NULL, "long double", "SC_LONG_DOUBLE_P_I", "SC_LONG_DOUBLE_P_S", NULL, NULL, NULL }, 	\
   {   27, sizeof(float _Complex), "float _Complex", "float _Complex", "float _Complex", "float_complex", "fcx", NULL, 1, TK_PRIMITIVE, KIND_COMPLEX, "-FLT_MAX", "FLT_MAX", "0.0", "complex(4)", NULL, "float", "SC_FLOAT_COMPLEX_I", "SC_FLOAT_COMPLEX_S", NULL, NULL, NULL }, 	\
   {   28,    8, "float _Complex *", "float _Complex *", "float _Complex *", "float_complex", "ptr", NULL, 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "complex(4)-A", NULL, "float", "SC_FLOAT_COMPLEX_P_I", "SC_FLOAT_COMPLEX_P_S", NULL, NULL, NULL }, 	\
   {   29, sizeof(double _Complex), "double _Complex", "double _Complex", "double _Complex", "double_complex", "dcx", NULL, 1, TK_PRIMITIVE, KIND_COMPLEX, "-DBL_MAX", "DBL_MAX", "0.0", "complex(8)", NULL, "double", "SC_DOUBLE_COMPLEX_I", "SC_DOUBLE_COMPLEX_S", NULL, NULL, NULL }, 	\
   {   30,    8, "double _Complex *", "double _Complex *", "double _Complex *", "double_complex", "ptr", NULL, 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "complex(8)-A", NULL, "double", "SC_DOUBLE_COMPLEX_P_I", "SC_DOUBLE_COMPLEX_P_S", NULL, NULL, NULL }, 	\
   {   31, sizeof(long double _Complex), "long double _Complex", "long double _Complex", "long double _Complex", "long_double_complex", "ldcx", NULL, 1, TK_PRIMITIVE, KIND_COMPLEX, "-LDBL_MAX", "LDBL_MAX", "0.0", "complex(16)", NULL, "long double", "SC_LONG_DOUBLE_COMPLEX_I", "SC_LONG_DOUBLE_COMPLEX_S", NULL, NULL, NULL }, 	\
   {   32,    8, "long double _Complex *", "long double _Complex *", "long double _Complex *", "long_double_complex", "ptr", NULL, 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "complex(16)-A", NULL, "long double", "SC_LONG_DOUBLE_COMPLEX_P_I", "SC_LONG_DOUBLE_COMPLEX_P_S", NULL, NULL, NULL }, 	\
   {   33, sizeof(quaternion), "quaternion", "quaternion", "quaternion", "quaternion", "qut", NULL, 1, TK_PRIMITIVE, KIND_QUATERNION, "-DBL_MAX", "DBL_MAX", "Q_ZERO", NULL, NULL, "double", "SC_QUATERNION_I", "SC_QUATERNION_S", NULL, NULL, NULL }, 	\
   {   34,    8, "quaternion *", "quaternion *", "quaternion *", "quaternion", "ptr", NULL, 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "character-A", NULL, "double", "SC_QUATERNION_P_I", "SC_QUATERNION_P_S", NULL, NULL, NULL }, 	\
   {   35, sizeof(FILE), "FILE", "FILE", "FILE", "file", "file", NULL, 1, TK_STRUCT, KIND_STRUCT, NULL, NULL, "NULL", NULL, NULL, "FILE", "SC_FILE_I", "SC_FILE_S", NULL, NULL, NULL }, 	\
   {   36,    8, "FILE *", "FILE *", "FILE *", "file", "ptr", NULL, 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "character-A", NULL, "FILE", "SC_FILE_P_I", "SC_FILE_P_S", NULL, NULL, NULL }, 	\
   {   37, sizeof(int), "enum", "enum", "enum", "enum", "int", "int", 0, TK_PRIMITIVE, KIND_INT, "INT_MIN", "INT_MAX", "0", "integer", NULL, "int", "SC_ENUM_I", "SC_ENUM_S", NULL, NULL, NULL }, 	\
   {   38, sizeof(int), "pboolean", "pboolean", "pboolean", "pboolean", "int", "int", 1, TK_PRIMITIVE, KIND_INT, "INT_MIN", "INT_MAX", "0", "integer", NULL, "int", "SC_PBOOLEAN_I", "SC_PBOOLEAN_S", NULL, NULL, NULL }, 	\
   {   39, sizeof(int), "pboolean *", "pboolean *", "pboolean *", "pboolean", "int *", "int", 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "integer-A", NULL, "int", "SC_PBOOLEAN_P_I", "SC_PBOOLEAN_P_S", NULL, NULL, NULL }, 	\
   {   40, sizeof(long), "ssize_t", "ssize_t", "ssize_t", "ssize_t", "long", "long", 1, TK_PRIMITIVE, KIND_INT, "LONG_MIN", "LONG_MAX", "0L", "integer(8)", NULL, "long", "SC_SSIZE_I", "SC_SSIZE_S", NULL, NULL, NULL }, 	\
   {   41, sizeof(long), "ssize_t *", "ssize_t *", "ssize_t *", "ssize_t", "long *", "long", 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "integer(8)-A", NULL, "long", "SC_SSIZE_P_I", "SC_SSIZE_P_S", NULL, NULL, NULL }, 	\
   {   42, sizeof(int), "integer", "integer", "integer", "integer", "int", "int", 1, TK_PRIMITIVE, KIND_INT, "INT_MIN", "INT_MAX", "0", "integer", NULL, "int", "SC_INTEGER_I", "SC_INTEGER_S", NULL, NULL, NULL }, 	\
   {   43, sizeof(int), "integer *", "integer *", "integer *", "integer", "int *", "int", 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "integer-A", NULL, "int", "SC_INTEGER_P_I", "SC_INTEGER_P_S", NULL, NULL, NULL }, 	\
   {   44, sizeof(short), "int16_t", "int16_t", "int16_t", "int16_t", "short", "short", 1, TK_PRIMITIVE, KIND_INT, "SHRT_MIN", "SHRT_MAX", "0", "integer(2)", "int", "short", "SC_INT16_I", "SC_INT16_S", NULL, NULL, NULL }, 	\
   {   45, sizeof(short), "int16_t *", "int16_t *", "int16_t *", "int16_t", "short *", "short", 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "integer(2)-A", "int", "short", "SC_INT16_P_I", "SC_INT16_P_S", NULL, NULL, NULL }, 	\
   {   46, sizeof(int), "int32_t", "int32_t", "int32_t", "int32_t", "int", "int", 1, TK_PRIMITIVE, KIND_INT, "INT_MIN", "INT_MAX", "0", "integer", NULL, "int", "SC_INT32_I", "SC_INT32_S", NULL, NULL, NULL }, 	\
   {   47, sizeof(int), "int32_t *", "int32_t *", "int32_t *", "int32_t", "int *", "int", 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "integer-A", NULL, "int", "SC_INT32_P_I", "SC_INT32_P_S", NULL, NULL, NULL }, 	\
   {   48, sizeof(long long), "int64_t", "int64_t", "int64_t", "int64_t", "long_long", "long long", 1, TK_PRIMITIVE, KIND_INT, "LLONG_MIN", "LLONG_MAX", "0LL", "integer(8)", NULL, "long long", "SC_INT64_I", "SC_INT64_S", NULL, NULL, NULL }, 	\
   {   49, sizeof(long long), "int64_t *", "int64_t *", "int64_t *", "int64_t", "long_long *", "long long", 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "integer(8)-A", NULL, "long long", "SC_INT64_P_I", "SC_INT64_P_S", NULL, NULL, NULL }, 	\
   {   50, sizeof(double), "REAL", "REAL", "REAL", "real", "double", "double", 1, TK_PRIMITIVE, KIND_FLOAT, "-DBL_MAX", "DBL_MAX", "0.0", "real(8)", NULL, "double", "SC_REAL_I", "SC_REAL_S", NULL, NULL, NULL }, 	\
   {   51, sizeof(double), "REAL *", "REAL *", "REAL *", "real", "double *", "double", 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "real(8)-A", NULL, "double", "SC_REAL_P_I", "SC_REAL_P_S", NULL, NULL, NULL }, 	\
   {   52, sizeof(float), "float32_t", "float32_t", "float32_t", "float32_t", "float", "float", 1, TK_PRIMITIVE, KIND_FLOAT, "-FLT_MAX", "FLT_MAX", "0.0", "real(4)", "double", "float", "SC_FLOAT32_I", "SC_FLOAT32_S", NULL, NULL, NULL }, 	\
   {   53, sizeof(float), "float32_t *", "float32_t *", "float32_t *", "float32_t", "float *", "float", 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "real(4)-A", "double", "float", "SC_FLOAT32_P_I", "SC_FLOAT32_P_S", NULL, NULL, NULL }, 	\
   {   54, sizeof(double), "float64_t", "float64_t", "float64_t", "float64_t", "double", "double", 1, TK_PRIMITIVE, KIND_FLOAT, "-DBL_MAX", "DBL_MAX", "0.0", "real(8)", NULL, "double", "SC_FLOAT64_I", "SC_FLOAT64_S", NULL, NULL, NULL }, 	\
   {   55, sizeof(double), "float64_t *", "float64_t *", "float64_t *", "float64_t", "double *", "double", 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "real(8)-A", NULL, "double", "SC_FLOAT64_P_I", "SC_FLOAT64_P_S", NULL, NULL, NULL }, 	\
   {   56, sizeof(long double), "float128_t", "float128_t", "float128_t", "float128_t", "long_double", "long double", 1, TK_PRIMITIVE, KIND_FLOAT, "-LDBL_MAX", "LDBL_MAX", "0.0", "real(16)", NULL, "long double", "SC_FLOAT128_I", "SC_FLOAT128_S", NULL, NULL, NULL }, 	\
   {   57, sizeof(long double), "float128_t *", "float128_t *", "float128_t *", "float128_t", "long_double *", "long double", 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "real(16)-A", NULL, "long double", "SC_FLOAT128_P_I", "SC_FLOAT128_P_S", NULL, NULL, NULL }, 	\
   {   58, sizeof(float _Complex), "complex32_t", "complex32_t", "complex32_t", "complex32_t", "float_complex", "float _Complex", 1, TK_PRIMITIVE, KIND_COMPLEX, "-FLT_MAX", "FLT_MAX", "0.0", "complex(4)", NULL, "float", "SC_COMPLEX32_I", "SC_COMPLEX32_S", NULL, NULL, NULL }, 	\
   {   59, sizeof(float _Complex), "complex32_t *", "complex32_t *", "complex32_t *", "complex32_t", "float_complex *", "float _Complex", 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "complex(4)-A", NULL, "float", "SC_COMPLEX32_P_I", "SC_COMPLEX32_P_S", NULL, NULL, NULL }, 	\
   {   60, sizeof(double _Complex), "complex64_t", "complex64_t", "complex64_t", "complex64_t", "double_complex", "double _Complex", 1, TK_PRIMITIVE, KIND_COMPLEX, "-DBL_MAX", "DBL_MAX", "0.0", "complex(8)", NULL, "double", "SC_COMPLEX64_I", "SC_COMPLEX64_S", NULL, NULL, NULL }, 	\
   {   61, sizeof(double _Complex), "complex64_t *", "complex64_t *", "complex64_t *", "complex64_t", "double_complex *", "double _Complex", 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "complex(8)-A", NULL, "double", "SC_COMPLEX64_P_I", "SC_COMPLEX64_P_S", NULL, NULL, NULL }, 	\
   {   62, sizeof(long double _Complex), "complex128_t", "complex128_t", "complex128_t", "complex128_t", "long_double_complex", "long double _Complex", 1, TK_PRIMITIVE, KIND_COMPLEX, "-LDBL_MAX", "LDBL_MAX", "0.0", "complex(16)", NULL, "long double", "SC_COMPLEX128_I", "SC_COMPLEX128_S", NULL, NULL, NULL }, 	\
   {   63, sizeof(long double _Complex), "complex128_t *", "complex128_t *", "complex128_t *", "complex128_t", "long_double_complex *", "long double _Complex", 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "complex(16)-A", NULL, "long double", "SC_COMPLEX128_P_I", "SC_COMPLEX128_P_S", NULL, NULL, NULL }, 	\
   { -1, -1, NULL, NULL, NULL, NULL, NULL, NULL, 0, TK_META, KIND_OTHER, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL } 	\
   }

#define SC_TYP_N		34
#define SC_UNKNOWN_I		SC_gs.ltyp[0].i
#define SC_UNKNOWN_S		SC_gs.ltyp[0].s
#define SC_BIT_I		SC_gs.ltyp[1].i
#define SC_BIT_S		SC_gs.ltyp[1].s
#define SC_STRUCT_I		SC_gs.ltyp[2].i
#define SC_STRUCT_S		SC_gs.ltyp[2].s
#define SC_VOID_I		SC_gs.ltyp[3].i
#define SC_VOID_S		SC_gs.ltyp[3].s
#define SC_POINTER_I		SC_gs.ltyp[3].p_i
#define SC_POINTER_S		SC_gs.ltyp[3].p_s
#define SC_BOOL_I		SC_gs.ltyp[4].i
#define SC_BOOL_S		SC_gs.ltyp[4].s
#define SC_BOOL_P_I		SC_gs.ltyp[4].p_i
#define SC_BOOL_P_S		SC_gs.ltyp[4].p_s
#define SC_CHAR_I		SC_gs.ltyp[5].i
#define SC_CHAR_S		SC_gs.ltyp[5].s
#define SC_STRING_I		SC_gs.ltyp[5].p_i
#define SC_STRING_S		SC_gs.ltyp[5].p_s
#define SC_WCHAR_I		SC_gs.ltyp[6].i
#define SC_WCHAR_S		SC_gs.ltyp[6].s
#define SC_WCHAR_P_I		SC_gs.ltyp[6].p_i
#define SC_WCHAR_P_S		SC_gs.ltyp[6].p_s
#define SC_INT8_I		SC_gs.ltyp[7].i
#define SC_INT8_S		SC_gs.ltyp[7].s
#define SC_INT8_P_I		SC_gs.ltyp[7].p_i
#define SC_INT8_P_S		SC_gs.ltyp[7].p_s
#define SC_SHORT_I		SC_gs.ltyp[8].i
#define SC_SHORT_S		SC_gs.ltyp[8].s
#define SC_SHORT_P_I		SC_gs.ltyp[8].p_i
#define SC_SHORT_P_S		SC_gs.ltyp[8].p_s
#define SC_INT_I		SC_gs.ltyp[9].i
#define SC_INT_S		SC_gs.ltyp[9].s
#define SC_INT_P_I		SC_gs.ltyp[9].p_i
#define SC_INT_P_S		SC_gs.ltyp[9].p_s
#define SC_LONG_I		SC_gs.ltyp[10].i
#define SC_LONG_S		SC_gs.ltyp[10].s
#define SC_LONG_P_I		SC_gs.ltyp[10].p_i
#define SC_LONG_P_S		SC_gs.ltyp[10].p_s
#define SC_LONG_LONG_I		SC_gs.ltyp[11].i
#define SC_LONG_LONG_S		SC_gs.ltyp[11].s
#define SC_LONG_LONG_P_I		SC_gs.ltyp[11].p_i
#define SC_LONG_LONG_P_S		SC_gs.ltyp[11].p_s
#define SC_FLOAT_I		SC_gs.ltyp[12].i
#define SC_FLOAT_S		SC_gs.ltyp[12].s
#define SC_FLOAT_P_I		SC_gs.ltyp[12].p_i
#define SC_FLOAT_P_S		SC_gs.ltyp[12].p_s
#define SC_DOUBLE_I		SC_gs.ltyp[13].i
#define SC_DOUBLE_S		SC_gs.ltyp[13].s
#define SC_DOUBLE_P_I		SC_gs.ltyp[13].p_i
#define SC_DOUBLE_P_S		SC_gs.ltyp[13].p_s
#define SC_LONG_DOUBLE_I		SC_gs.ltyp[14].i
#define SC_LONG_DOUBLE_S		SC_gs.ltyp[14].s
#define SC_LONG_DOUBLE_P_I		SC_gs.ltyp[14].p_i
#define SC_LONG_DOUBLE_P_S		SC_gs.ltyp[14].p_s
#define SC_FLOAT_COMPLEX_I		SC_gs.ltyp[15].i
#define SC_FLOAT_COMPLEX_S		SC_gs.ltyp[15].s
#define SC_FLOAT_COMPLEX_P_I		SC_gs.ltyp[15].p_i
#define SC_FLOAT_COMPLEX_P_S		SC_gs.ltyp[15].p_s
#define SC_DOUBLE_COMPLEX_I		SC_gs.ltyp[16].i
#define SC_DOUBLE_COMPLEX_S		SC_gs.ltyp[16].s
#define SC_DOUBLE_COMPLEX_P_I		SC_gs.ltyp[16].p_i
#define SC_DOUBLE_COMPLEX_P_S		SC_gs.ltyp[16].p_s
#define SC_LONG_DOUBLE_COMPLEX_I		SC_gs.ltyp[17].i
#define SC_LONG_DOUBLE_COMPLEX_S		SC_gs.ltyp[17].s
#define SC_LONG_DOUBLE_COMPLEX_P_I		SC_gs.ltyp[17].p_i
#define SC_LONG_DOUBLE_COMPLEX_P_S		SC_gs.ltyp[17].p_s
#define SC_QUATERNION_I		SC_gs.ltyp[18].i
#define SC_QUATERNION_S		SC_gs.ltyp[18].s
#define SC_QUATERNION_P_I		SC_gs.ltyp[18].p_i
#define SC_QUATERNION_P_S		SC_gs.ltyp[18].p_s
#define SC_FILE_I		SC_gs.ltyp[19].i
#define SC_FILE_S		SC_gs.ltyp[19].s
#define SC_FILE_P_I		SC_gs.ltyp[19].p_i
#define SC_FILE_P_S		SC_gs.ltyp[19].p_s
#define SC_ENUM_I		SC_gs.ltyp[20].i
#define SC_ENUM_S		SC_gs.ltyp[20].s
#define SC_PBOOLEAN_I		SC_gs.ltyp[21].i
#define SC_PBOOLEAN_S		SC_gs.ltyp[21].s
#define SC_PBOOLEAN_P_I		SC_gs.ltyp[21].p_i
#define SC_PBOOLEAN_P_S		SC_gs.ltyp[21].p_s
#define SC_SSIZE_I		SC_gs.ltyp[22].i
#define SC_SSIZE_S		SC_gs.ltyp[22].s
#define SC_SSIZE_P_I		SC_gs.ltyp[22].p_i
#define SC_SSIZE_P_S		SC_gs.ltyp[22].p_s
#define SC_INTEGER_I		SC_gs.ltyp[23].i
#define SC_INTEGER_S		SC_gs.ltyp[23].s
#define SC_INTEGER_P_I		SC_gs.ltyp[23].p_i
#define SC_INTEGER_P_S		SC_gs.ltyp[23].p_s
#define SC_INT16_I		SC_gs.ltyp[24].i
#define SC_INT16_S		SC_gs.ltyp[24].s
#define SC_INT16_P_I		SC_gs.ltyp[24].p_i
#define SC_INT16_P_S		SC_gs.ltyp[24].p_s
#define SC_INT32_I		SC_gs.ltyp[25].i
#define SC_INT32_S		SC_gs.ltyp[25].s
#define SC_INT32_P_I		SC_gs.ltyp[25].p_i
#define SC_INT32_P_S		SC_gs.ltyp[25].p_s
#define SC_INT64_I		SC_gs.ltyp[26].i
#define SC_INT64_S		SC_gs.ltyp[26].s
#define SC_INT64_P_I		SC_gs.ltyp[26].p_i
#define SC_INT64_P_S		SC_gs.ltyp[26].p_s
#define SC_REAL_I		SC_gs.ltyp[27].i
#define SC_REAL_S		SC_gs.ltyp[27].s
#define SC_REAL_P_I		SC_gs.ltyp[27].p_i
#define SC_REAL_P_S		SC_gs.ltyp[27].p_s
#define SC_FLOAT32_I		SC_gs.ltyp[28].i
#define SC_FLOAT32_S		SC_gs.ltyp[28].s
#define SC_FLOAT32_P_I		SC_gs.ltyp[28].p_i
#define SC_FLOAT32_P_S		SC_gs.ltyp[28].p_s
#define SC_FLOAT64_I		SC_gs.ltyp[29].i
#define SC_FLOAT64_S		SC_gs.ltyp[29].s
#define SC_FLOAT64_P_I		SC_gs.ltyp[29].p_i
#define SC_FLOAT64_P_S		SC_gs.ltyp[29].p_s
#define SC_FLOAT128_I		SC_gs.ltyp[30].i
#define SC_FLOAT128_S		SC_gs.ltyp[30].s
#define SC_FLOAT128_P_I		SC_gs.ltyp[30].p_i
#define SC_FLOAT128_P_S		SC_gs.ltyp[30].p_s
#define SC_COMPLEX32_I		SC_gs.ltyp[31].i
#define SC_COMPLEX32_S		SC_gs.ltyp[31].s
#define SC_COMPLEX32_P_I		SC_gs.ltyp[31].p_i
#define SC_COMPLEX32_P_S		SC_gs.ltyp[31].p_s
#define SC_COMPLEX64_I		SC_gs.ltyp[32].i
#define SC_COMPLEX64_S		SC_gs.ltyp[32].s
#define SC_COMPLEX64_P_I		SC_gs.ltyp[32].p_i
#define SC_COMPLEX64_P_S		SC_gs.ltyp[32].p_s
#define SC_COMPLEX128_I		SC_gs.ltyp[33].i
#define SC_COMPLEX128_S		SC_gs.ltyp[33].s
#define SC_COMPLEX128_P_I		SC_gs.ltyp[33].p_i
#define SC_COMPLEX128_P_S		SC_gs.ltyp[33].p_s

/* these must have the same sequence/values as the dynamic values */

#define _SC_DEF_TYP_ {                                                       \
   {   0, "unknown", },   		\
   {   1, "bit", },   		\
   {   2, "struct", },   		\
   {   3, "void",	  4, "void *" },   		\
   {   5, "bool",	  6, "bool *" },   		\
   {   7, "char",	  8, "char *" },   		\
   {   9, "wchar_t",	 10, "wchar_t *" },   		\
   {  11, "int8_t",	 12, "int8_t *" },   		\
   {  13, "short",	 14, "short *" },   		\
   {  15, "int",	 16, "int *" },   		\
   {  17, "long",	 18, "long *" },   		\
   {  19, "long long",	 20, "long long *" },   		\
   {  21, "float",	 22, "float *" },   		\
   {  23, "double",	 24, "double *" },   		\
   {  25, "long double",	 26, "long double *" },   		\
   {  27, "float _Complex",	 28, "float _Complex *" },   		\
   {  29, "double _Complex",	 30, "double _Complex *" },   		\
   {  31, "long double _Complex",	 32, "long double _Complex *" },   		\
   {  33, "quaternion",	 34, "quaternion *" },   		\
   {  35, "FILE",	 36, "FILE *" },   		\
   {  37, "enum", },   		\
   {  38, "pboolean",	 39, "pboolean *" },   		\
   {  40, "ssize_t",	 41, "ssize_t *" },   		\
   {  42, "integer",	 43, "integer *" },   		\
   {  44, "int16_t",	 45, "int16_t *" },   		\
   {  46, "int32_t",	 47, "int32_t *" },   		\
   {  48, "int64_t",	 49, "int64_t *" },   		\
   {  50, "REAL",	 51, "REAL *" },   		\
   {  52, "float32_t",	 53, "float32_t *" },   		\
   {  54, "float64_t",	 55, "float64_t *" },   		\
   {  56, "float128_t",	 57, "float128_t *" },   		\
   {  58, "complex32_t",	 59, "complex32_t *" },   		\
   {  60, "complex64_t",	 61, "complex64_t *" },   		\
   {  62, "complex128_t",	 63, "complex128_t *" },   		\
   }

#ifndef NO_VA_ARG_ID
#ifdef HAVE_COMPLEX_VA_ARG
#define SC_VA_ARG_ID(_id, _d, _n)                    \
   {int _lid;                                        \
    if (_id == SC_STRING_I)                          \
       _lid = _id;                                   \
    else if (SC_is_type_ptr(_id) == TRUE)            \
       _lid = SC_POINTER_I;                          \
    else                                             \
       _lid = _id;                                   \
    switch (_lid) {                                  \
       case 4:   		\
            {void * *_pv = (void * *) (_d);   		\
             _pv[_n] = va_arg(__a__, void *);};   		\
            break;    		\
       case 5:   		\
            {bool *_pv = (bool *) (_d);   		\
             _pv[_n] = va_arg(__a__, int);};   		\
            break;    		\
       case 7:   		\
            {char *_pv = (char *) (_d);   		\
             _pv[_n] = va_arg(__a__, int);};   		\
            break;    		\
       case 8:   		\
            {char * *_pv = (char * *) (_d);   		\
             _pv[_n] = va_arg(__a__, char *);};   		\
            break;    		\
       case 9:   		\
            {wchar_t *_pv = (wchar_t *) (_d);   		\
             _pv[_n] = va_arg(__a__, int);};   		\
            break;    		\
       case 11:   		\
            {int8_t *_pv = (int8_t *) (_d);   		\
             _pv[_n] = va_arg(__a__, int);};   		\
            break;    		\
       case 13:   		\
            {short *_pv = (short *) (_d);   		\
             _pv[_n] = va_arg(__a__, int);};   		\
            break;    		\
       case 15:   		\
            {int *_pv = (int *) (_d);   		\
             _pv[_n] = va_arg(__a__, int);};   		\
            break;    		\
       case 17:   		\
            {long *_pv = (long *) (_d);   		\
             _pv[_n] = va_arg(__a__, long);};   		\
            break;    		\
       case 19:   		\
            {long long *_pv = (long long *) (_d);   		\
             _pv[_n] = va_arg(__a__, long long);};   		\
            break;    		\
       case 21:   		\
            {float *_pv = (float *) (_d);   		\
             _pv[_n] = va_arg(__a__, double);};   		\
            break;    		\
       case 23:   		\
            {double *_pv = (double *) (_d);   		\
             _pv[_n] = va_arg(__a__, double);};   		\
            break;    		\
       case 25:   		\
            {long double *_pv = (long double *) (_d);   		\
             _pv[_n] = va_arg(__a__, long double);};   		\
            break;    		\
       case 27:   		\
            {float _Complex *_pv = (float _Complex *) (_d);   		\
             _pv[_n] = va_arg(__a__, float _Complex);};   		\
            break;    		\
       case 29:   		\
            {double _Complex *_pv = (double _Complex *) (_d);   		\
             _pv[_n] = va_arg(__a__, double _Complex);};   		\
            break;    		\
       case 31:   		\
            {long double _Complex *_pv = (long double _Complex *) (_d);   		\
             _pv[_n] = va_arg(__a__, long double _Complex);};   		\
            break;    		\
       case 33:   		\
            {quaternion *_pv = (quaternion *) (_d);   		\
             _pv[_n] = va_arg(__a__, quaternion);};   		\
            break;    		\
       }                                             \
   }
#else
#define SC_VA_ARG_ID(_id, _d, _n)                    \
   {int _lid;                                        \
    if (_id == SC_STRING_I)                          \
       _lid = _id;                                   \
    else if (SC_is_type_ptr(_id) == TRUE)            \
       _lid = SC_POINTER_I;                          \
    else                                             \
       _lid = _id;                                   \
    switch (_lid) {                                  \
       case 4:   		\
            {void * *_pv = (void * *) (_d);   		\
             _pv[_n] = va_arg(__a__, void *);};   		\
            break;    		\
       case 5:   		\
            {bool *_pv = (bool *) (_d);   		\
             _pv[_n] = va_arg(__a__, int);};   		\
            break;    		\
       case 7:   		\
            {char *_pv = (char *) (_d);   		\
             _pv[_n] = va_arg(__a__, int);};   		\
            break;    		\
       case 8:   		\
            {char * *_pv = (char * *) (_d);   		\
             _pv[_n] = va_arg(__a__, char *);};   		\
            break;    		\
       case 9:   		\
            {wchar_t *_pv = (wchar_t *) (_d);   		\
             _pv[_n] = va_arg(__a__, int);};   		\
            break;    		\
       case 11:   		\
            {int8_t *_pv = (int8_t *) (_d);   		\
             _pv[_n] = va_arg(__a__, int);};   		\
            break;    		\
       case 13:   		\
            {short *_pv = (short *) (_d);   		\
             _pv[_n] = va_arg(__a__, int);};   		\
            break;    		\
       case 15:   		\
            {int *_pv = (int *) (_d);   		\
             _pv[_n] = va_arg(__a__, int);};   		\
            break;    		\
       case 17:   		\
            {long *_pv = (long *) (_d);   		\
             _pv[_n] = va_arg(__a__, long);};   		\
            break;    		\
       case 19:   		\
            {long long *_pv = (long long *) (_d);   		\
             _pv[_n] = va_arg(__a__, long long);};   		\
            break;    		\
       case 21:   		\
            {float *_pv = (float *) (_d);   		\
             _pv[_n] = va_arg(__a__, double);};   		\
            break;    		\
       case 23:   		\
            {double *_pv = (double *) (_d);   		\
             _pv[_n] = va_arg(__a__, double);};   		\
            break;    		\
       case 25:   		\
            {long double *_pv = (long double *) (_d);   		\
             _pv[_n] = va_arg(__a__, long double);};   		\
            break;    		\
       case 33:   		\
            {quaternion *_pv = (quaternion *) (_d);   		\
             _pv[_n] = va_arg(__a__, quaternion);};   		\
            break;    		\
       }                                             \
   }
#endif

#endif

#endif

