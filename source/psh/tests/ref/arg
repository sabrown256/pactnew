/*
 * SCARG.H - generated type handling routines - do not edit
 *
 */

#ifndef PCK_SCARG

#define PCK_SCARG

#include "cpyright.h"

#define REAL double
#define HUGE_REAL 1.0e100

#ifndef HAVE_FIXED_WIDTH_FLOAT
typedef float       float32_t;
typedef double      float64_t;
typedef long double float128_t;
#endif

/*--------------------------------------------------------------------------*/

/*                           DEFINED CONSTANTS                              */

/*--------------------------------------------------------------------------*/

#define SC_UNKNOWN_I                 SC_gs.ltyp[0].i
#define SC_UNKNOWN_S                 SC_gs.ltyp[0].s
#define SC_BIT_I                     SC_gs.ltyp[1].i
#define SC_BIT_S                     SC_gs.ltyp[1].s

#define SC_BOOL_I                    SC_gs.ltyp[2].i
#define SC_BOOL_S                    SC_gs.ltyp[2].s
#define SC_BOOL_P_I                  SC_gs.ltyp[2].p_i
#define SC_BOOL_P_S                  SC_gs.ltyp[2].p_s

#define SC_CHAR_I                    SC_gs.ltyp[3].i
#define SC_CHAR_S                    SC_gs.ltyp[3].s
#define SC_STRING_I                  SC_gs.ltyp[3].p_i
#define SC_STRING_S                  SC_gs.ltyp[3].p_s
#define SC_WCHAR_I                   SC_gs.ltyp[4].i
#define SC_WCHAR_S                   SC_gs.ltyp[4].s
#define SC_WCHAR_P_I                 SC_gs.ltyp[4].p_i
#define SC_WCHAR_P_S                 SC_gs.ltyp[4].p_s

#define SC_SHORT_I                   SC_gs.ltyp[5].i
#define SC_SHORT_S                   SC_gs.ltyp[5].s
#define SC_SHORT_P_I                 SC_gs.ltyp[5].p_i
#define SC_SHORT_P_S                 SC_gs.ltyp[5].p_s
#define SC_INT_I                     SC_gs.ltyp[6].i
#define SC_INT_S                     SC_gs.ltyp[6].s
#define SC_INT_P_I                   SC_gs.ltyp[6].p_i
#define SC_INT_P_S                   SC_gs.ltyp[6].p_s
#define SC_LONG_I                    SC_gs.ltyp[7].i
#define SC_LONG_S                    SC_gs.ltyp[7].s
#define SC_LONG_P_I                  SC_gs.ltyp[7].p_i
#define SC_LONG_P_S                  SC_gs.ltyp[7].p_s
#define SC_LONG_LONG_I               SC_gs.ltyp[8].i
#define SC_LONG_LONG_S               SC_gs.ltyp[8].s
#define SC_LONG_LONG_P_I             SC_gs.ltyp[8].p_i
#define SC_LONG_LONG_P_S             SC_gs.ltyp[8].p_s

#define SC_INT8_I                    SC_gs.ltyp[9].i
#define SC_INT8_S                    SC_gs.ltyp[9].s
#define SC_INT8_P_I                  SC_gs.ltyp[9].p_i
#define SC_INT8_P_S                  SC_gs.ltyp[9].p_s
#define SC_INT16_I                   SC_gs.ltyp[10].i
#define SC_INT16_S                   SC_gs.ltyp[10].s
#define SC_INT16_P_I                 SC_gs.ltyp[10].p_i
#define SC_INT16_P_S                 SC_gs.ltyp[10].p_s
#define SC_INT32_I                   SC_gs.ltyp[11].i
#define SC_INT32_S                   SC_gs.ltyp[11].s
#define SC_INT32_P_I                 SC_gs.ltyp[11].p_i
#define SC_INT32_P_S                 SC_gs.ltyp[11].p_s
#define SC_INT64_I                   SC_gs.ltyp[12].i
#define SC_INT64_S                   SC_gs.ltyp[12].s
#define SC_INT64_P_I                 SC_gs.ltyp[12].p_i
#define SC_INT64_P_S                 SC_gs.ltyp[12].p_s

#define SC_FLOAT_I                   SC_gs.ltyp[13].i
#define SC_FLOAT_S                   SC_gs.ltyp[13].s
#define SC_FLOAT_P_I                 SC_gs.ltyp[13].p_i
#define SC_FLOAT_P_S                 SC_gs.ltyp[13].p_s
#define SC_DOUBLE_I                  SC_gs.ltyp[14].i
#define SC_DOUBLE_S                  SC_gs.ltyp[14].s
#define SC_DOUBLE_P_I                SC_gs.ltyp[14].p_i
#define SC_DOUBLE_P_S                SC_gs.ltyp[14].p_s
#define SC_LONG_DOUBLE_I             SC_gs.ltyp[15].i
#define SC_LONG_DOUBLE_S             SC_gs.ltyp[15].s
#define SC_LONG_DOUBLE_P_I           SC_gs.ltyp[15].p_i
#define SC_LONG_DOUBLE_P_S           SC_gs.ltyp[15].p_s

#define SC_FLOAT32_I                 SC_gs.ltyp[16].i
#define SC_FLOAT32_S                 SC_gs.ltyp[16].s
#define SC_FLOAT32_P_I               SC_gs.ltyp[16].p_i
#define SC_FLOAT32_P_S               SC_gs.ltyp[16].p_s
#define SC_FLOAT64_I                 SC_gs.ltyp[17].i
#define SC_FLOAT64_S                 SC_gs.ltyp[17].s
#define SC_FLOAT64_P_I               SC_gs.ltyp[17].p_i
#define SC_FLOAT64_P_S               SC_gs.ltyp[17].p_s
#define SC_FLOAT128_I                SC_gs.ltyp[18].i
#define SC_FLOAT128_S                SC_gs.ltyp[18].s
#define SC_FLOAT128_P_I              SC_gs.ltyp[18].p_i
#define SC_FLOAT128_P_S              SC_gs.ltyp[18].p_s

#define SC_FLOAT_COMPLEX_I           SC_gs.ltyp[19].i
#define SC_FLOAT_COMPLEX_S           SC_gs.ltyp[19].s
#define SC_FLOAT_COMPLEX_P_I         SC_gs.ltyp[19].p_i
#define SC_FLOAT_COMPLEX_P_S         SC_gs.ltyp[19].p_s
#define SC_DOUBLE_COMPLEX_I          SC_gs.ltyp[20].i
#define SC_DOUBLE_COMPLEX_S          SC_gs.ltyp[20].s
#define SC_DOUBLE_COMPLEX_P_I        SC_gs.ltyp[20].p_i
#define SC_DOUBLE_COMPLEX_P_S        SC_gs.ltyp[20].p_s
#define SC_LONG_DOUBLE_COMPLEX_I     SC_gs.ltyp[21].i
#define SC_LONG_DOUBLE_COMPLEX_S     SC_gs.ltyp[21].s
#define SC_LONG_DOUBLE_COMPLEX_P_I   SC_gs.ltyp[21].p_i
#define SC_LONG_DOUBLE_COMPLEX_P_S   SC_gs.ltyp[21].p_s

#define SC_COMPLEX32_I               SC_gs.ltyp[22].i
#define SC_COMPLEX32_S               SC_gs.ltyp[22].s
#define SC_COMPLEX32_P_I             SC_gs.ltyp[22].p_i
#define SC_COMPLEX32_P_S             SC_gs.ltyp[22].p_s
#define SC_COMPLEX64_I               SC_gs.ltyp[23].i
#define SC_COMPLEX64_S               SC_gs.ltyp[23].s
#define SC_COMPLEX64_P_I             SC_gs.ltyp[23].p_i
#define SC_COMPLEX64_P_S             SC_gs.ltyp[23].p_s
#define SC_COMPLEX128_I              SC_gs.ltyp[24].i
#define SC_COMPLEX128_S              SC_gs.ltyp[24].s
#define SC_COMPLEX128_P_I            SC_gs.ltyp[24].p_i
#define SC_COMPLEX128_P_S            SC_gs.ltyp[24].p_s

#define SC_QUATERNION_I              SC_gs.ltyp[25].i
#define SC_QUATERNION_S              SC_gs.ltyp[25].s
#define SC_QUATERNION_P_I            SC_gs.ltyp[25].p_i
#define SC_QUATERNION_P_S            SC_gs.ltyp[25].p_s

#define SC_VOID_I                    SC_gs.ltyp[26].i
#define SC_VOID_S                    SC_gs.ltyp[26].s
#define SC_POINTER_I                 SC_gs.ltyp[26].p_i
#define SC_POINTER_S                 SC_gs.ltyp[26].p_s

#define SC_ENUM_I                    SC_gs.ltyp[27].i
#define SC_ENUM_S                    SC_gs.ltyp[27].s
#define SC_STRUCT_I                  SC_gs.ltyp[28].i
#define SC_STRUCT_S                  SC_gs.ltyp[28].s

#define SC_FILE_I                    SC_gs.ltyp[29].i
#define SC_FILE_S                    SC_gs.ltyp[29].s
#define SC_FILE_P_I                  SC_gs.ltyp[29].p_i
#define SC_FILE_P_S                  SC_gs.ltyp[29].p_s

#define SC_INTEGER_I                 SC_gs.ltyp[30].i
#define SC_INTEGER_S                 SC_gs.ltyp[30].s

#define SC_REAL_I                    SC_gs.ltyp[31].i
#define SC_REAL_S                    SC_gs.ltyp[31].s
#define SC_REAL_P_I                  SC_gs.ltyp[31].p_i
#define SC_REAL_P_S                  SC_gs.ltyp[31].p_s

#define SC_TYP_N                     32

/* these must have the same sequence/values as the dynamic values
 * assigned in SC_init_base_types
 * changes here MUST be reflected there
 */

#define _SC_DEF_TYP_                                                         \
 { { 0, "unknown", },                                                        \
   { 1, "bit", },                                                            \
   { 2, "bool",                  18, "bool *" },                             \
   { 3, "char",                  19, "char *" },                             \
   { 4, "wchar",                 20, "wchar *" },                            \
   { 6, "short",                 22, "short *" },                            \
   { 7, "int",                   23, "int *" },                              \
   { 8, "long",                  24, "long *" },                             \
   { 9, "long_long",             25, "long_long *" },                        \
   { 5, "int8_t",                21, "int8_t *" },                           \
   { 6, "int16_t",               22, "int16_t *" },                          \
   { 7, "int32_t",               23, "int32_t *" },                          \
   { 9, "int64_t",               25, "int64_t *" },                          \
   { 10, "float",                26, "float *" },                            \
   { 11, "double",               27, "double *" },                           \
   { 12, "long_double",          28, "long_double *" },                      \
   { 10, "float32_t",            26, "float32_t *" },                        \
   { 11, "float64_t",            27, "float64_t *" },                        \
   { 12, "float128_t",           28, "float128_t *" },                       \
   { 13, "float_complex",        29, "float_complex *" },                    \
   { 14, "double_complex",       30, "double_complex *" },                   \
   { 15, "long_double_complex",  31, "long_double_complex *" },              \
   { 13, "complex32_t",          29, "complex32_t *" },                      \
   { 14, "complex64_t",          30, "complex64_t *" },                      \
   { 15, "complex128_t",         31, "complex128_t *" },                     \
   { 16, "quaternion",           32, "quaternion *" },                       \
   { 33, "void",                 17, "void *" },                             \
   { 7,  "enum", },                                                          \
   { 34, "struct", },                                                        \
   { 35, "FILE",                 40, "FILE *" },                             \
   { 7, "integer", },                                                        \
   { 11, "double", } }

#define _SC_DEF_ITYP_                                                        \
 { { 39, "pcons *",  } }

#define DEF_STANDARD_TYPES  \
       SC_UNKNOWN_I               = SC_type_register(SC_UNKNOWN_S,             KIND_OTHER,      B_F, 0,                            0);\
       SC_BIT_I                   = SC_type_register(SC_BIT_S,                 KIND_OTHER,      B_F, 0,                            0);\
       SC_BOOL_I                  = SC_type_register(SC_BOOL_S,                KIND_BOOL,       B_T, sizeof(bool),                 0);\
       SC_CHAR_I                  = SC_type_register(SC_CHAR_S,                KIND_CHAR,       B_T, sizeof(char),                 0);\
       SC_WCHAR_I                 = SC_type_register(SC_WCHAR_S,               KIND_CHAR,       B_T, sizeof(wchar_t),              0);\
       SC_INT8_I                  = SC_type_register(SC_INT8_S,                KIND_INT,        B_T, sizeof(int8_t),               0);\
       SC_SHORT_I                 = SC_type_register(SC_SHORT_S,               KIND_INT,        B_T, sizeof(short),                0);\
       SC_INT_I                   = SC_type_register(SC_INT_S,                 KIND_INT,        B_T, sizeof(int),                  0);\
       SC_LONG_I                  = SC_type_register(SC_LONG_S,                KIND_INT,        B_T, sizeof(long),                 0);\
       SC_LONG_LONG_I             = SC_type_register(SC_LONG_LONG_S,           KIND_INT,        B_T, sizeof(long long),            0);\
       SC_FLOAT_I                 = SC_type_register(SC_FLOAT_S,               KIND_FLOAT,      B_T, sizeof(float),                0);\
       SC_DOUBLE_I                = SC_type_register(SC_DOUBLE_S,              KIND_FLOAT,      B_T, sizeof(double),               0);\
       SC_LONG_DOUBLE_I           = SC_type_register(SC_LONG_DOUBLE_S,         KIND_FLOAT,      B_T, sizeof(long double),          0);\
       SC_FLOAT_COMPLEX_I         = SC_type_register(SC_FLOAT_COMPLEX_S,       KIND_COMPLEX,    B_T, sizeof(float _Complex),       0);\
       SC_DOUBLE_COMPLEX_I        = SC_type_register(SC_DOUBLE_COMPLEX_S,      KIND_COMPLEX,    B_T, sizeof(double _Complex),      0);\
       SC_LONG_DOUBLE_COMPLEX_I   = SC_type_register(SC_LONG_DOUBLE_COMPLEX_S, KIND_COMPLEX,    B_T, sizeof(long double _Complex), 0);\
       SC_QUATERNION_I            = SC_type_register(SC_QUATERNION_S,          KIND_QUATERNION, B_T, 4*sizeof(double),             0);\
       SC_POINTER_I               = SC_type_register(SC_POINTER_S,               KIND_POINTER, B_F, szptr, 0);\
       SC_BOOL_P_I                = SC_type_register(SC_BOOL_P_S,                KIND_POINTER, B_F, szptr, 0);\
       SC_STRING_I                = SC_type_register(SC_STRING_S,                KIND_POINTER, B_F, szptr, 0);\
       SC_WCHAR_P_I               = SC_type_register(SC_WCHAR_P_S,               KIND_POINTER, B_F, szptr, 0);\
       SC_INT8_P_I                = SC_type_register(SC_INT8_P_S,                KIND_POINTER, B_F, szptr, 0);\
       SC_SHORT_P_I               = SC_type_register(SC_SHORT_P_S,               KIND_POINTER, B_F, szptr, 0);\
       SC_INT_P_I                 = SC_type_register(SC_INT_P_S,                 KIND_POINTER, B_F, szptr, 0);\
       SC_LONG_P_I                = SC_type_register(SC_LONG_P_S,                KIND_POINTER, B_F, szptr, 0);\
       SC_LONG_LONG_P_I           = SC_type_register(SC_LONG_LONG_P_S,           KIND_POINTER, B_F, szptr, 0);\
       SC_FLOAT_P_I               = SC_type_register(SC_FLOAT_P_S,               KIND_POINTER, B_F, szptr, 0);\
       SC_DOUBLE_P_I              = SC_type_register(SC_DOUBLE_P_S,              KIND_POINTER, B_F, szptr, 0);\
       SC_LONG_DOUBLE_P_I         = SC_type_register(SC_LONG_DOUBLE_P_S,         KIND_POINTER, B_F, szptr, 0);\
       SC_FLOAT_COMPLEX_P_I       = SC_type_register(SC_FLOAT_COMPLEX_P_S,       KIND_POINTER, B_F, szptr, 0);\
       SC_DOUBLE_COMPLEX_P_I      = SC_type_register(SC_DOUBLE_COMPLEX_P_S,      KIND_POINTER, B_F, szptr, 0);\
       SC_LONG_DOUBLE_COMPLEX_P_I = SC_type_register(SC_LONG_DOUBLE_COMPLEX_P_S, KIND_POINTER, B_F, szptr, 0);\
       SC_QUATERNION_P_I          = SC_type_register(SC_QUATERNION_P_S,          KIND_POINTER, B_F, szptr, 0);\
       SC_VOID_I                  = SC_type_register(SC_VOID_S,     KIND_OTHER,   B_T, 0,               0);\
       SC_STRUCT_I                = SC_type_register(SC_STRUCT_S,   KIND_STRUCT,  B_F, 0,               0);\
       SC_FILE_I                  = SC_type_register(SC_FILE_S,     KIND_STRUCT,  B_T, sizeof(FILE),    0);\
       SC_PCONS_P_I               = SC_type_register(SC_PCONS_P_S,  KIND_POINTER, B_F, szptr,           0);\
       SC_FILE_P_I                = SC_type_register(SC_FILE_P_S,   KIND_POINTER, B_F, szptr,           0)

/* aliases */
#define DEF_STANDARD_ALIASES  \
       SC_ENUM_I         = SC_type_alias(SC_ENUM_S,    SC_INT_I);\
       SC_INTEGER_I      = SC_type_alias(SC_INTEGER_S, SC_INT_I);\
       SC_INT16_I        = SC_type_alias(SC_INT16_S,   SC_SHORT_I);\
       SC_INT32_I        = SC_type_alias(SC_INT32_S,   SC_INT_I);\
       SC_INT64_I        = SC_type_alias(SC_INT64_S,   SC_LONG_LONG_I);\
       SC_REAL_I         = SC_type_alias(SC_REAL_S,    SC_DOUBLE_I);\
       SC_FLOAT32_I      = SC_type_alias(SC_FLOAT32_S,  SC_FLOAT_I);\
       SC_FLOAT64_I      = SC_type_alias(SC_FLOAT64_S,  SC_DOUBLE_I);\
       SC_FLOAT128_I     = SC_type_alias(SC_FLOAT128_S, SC_LONG_DOUBLE_I);\
       SC_COMPLEX32_I    = SC_type_alias(SC_COMPLEX32_S,  SC_FLOAT_COMPLEX_I);\
       SC_COMPLEX64_I    = SC_type_alias(SC_COMPLEX64_S,  SC_DOUBLE_COMPLEX_I);\
       SC_COMPLEX128_I   = SC_type_alias(SC_COMPLEX128_S, SC_LONG_DOUBLE_COMPLEX_I);\
       SC_INT16_P_I      = SC_type_alias(SC_INT16_P_S,   SC_SHORT_P_I);\
       SC_INT32_P_I      = SC_type_alias(SC_INT32_P_S,   SC_INT_P_I);\
       SC_INT64_P_I      = SC_type_alias(SC_INT64_P_S,   SC_LONG_LONG_P_I);\
       SC_REAL_P_I       = SC_type_alias(SC_REAL_P_S,     SC_DOUBLE_P_I);\
       SC_FLOAT32_P_I    = SC_type_alias(SC_FLOAT32_P_S,  SC_FLOAT_P_I);\
       SC_FLOAT64_P_I    = SC_type_alias(SC_FLOAT64_P_S,  SC_DOUBLE_P_I);\
       SC_FLOAT128_P_I   = SC_type_alias(SC_FLOAT128_P_S, SC_LONG_DOUBLE_P_I);\
       SC_COMPLEX32_P_I  = SC_type_alias(SC_COMPLEX32_P_S,  SC_FLOAT_COMPLEX_P_I);\
       SC_COMPLEX64_P_I  = SC_type_alias(SC_COMPLEX64_P_S,  SC_DOUBLE_COMPLEX_P_I);\
       SC_COMPLEX128_P_I = SC_type_alias(SC_COMPLEX128_P_S, SC_LONG_DOUBLE_COMPLEX_P_I)

#ifndef NO_VA_ARG_ID
#ifdef HAVE_COMPLEX_VA_ARG
#define SC_VA_ARG_ID(_id, _d, _n)                    \
   {int _lid;                                        \
    if (_id == SC_STRING_I)                          \
       _lid = _id;                                   \
    else if (SC_is_type_ptr(_id) == TRUE)            \
       _lid = SC_POINTER_I;                          \
    else                                             \
       _lid = _id;                                   \
    switch (_lid) {                                  \
       case 2:                                    \
            {bool *_pv = (bool *) (_d);                \
             _pv[_n] = va_arg(__a__, int);};        \
            break;                                 \
       case 3:                                    \
            {char *_pv = (char *) (_d);                \
             _pv[_n] = va_arg(__a__, int);};        \
            break;                                 \
       case 4:                                    \
            {wchar_t *_pv = (wchar_t *) (_d);                \
             _pv[_n] = va_arg(__a__, int);};        \
            break;                                 \
       case 5:                                    \
            {int8_t *_pv = (int8_t *) (_d);                \
             _pv[_n] = va_arg(__a__, int);};        \
            break;                                 \
       case 6:                                    \
            {short *_pv = (short *) (_d);                \
             _pv[_n] = va_arg(__a__, int);};        \
            break;                                 \
       case 7:                                    \
            {int *_pv = (int *) (_d);                \
             _pv[_n] = va_arg(__a__, int);};        \
            break;                                 \
       case 8:                                    \
            {long *_pv = (long *) (_d);                \
             _pv[_n] = va_arg(__a__, long);};        \
            break;                                 \
       case 9:                                    \
            {long long *_pv = (long long *) (_d);                \
             _pv[_n] = va_arg(__a__, long long);};        \
            break;                                 \
       case 10:                                    \
            {float *_pv = (float *) (_d);                \
             _pv[_n] = va_arg(__a__, double);};        \
            break;                                 \
       case 11:                                    \
            {double *_pv = (double *) (_d);                \
             _pv[_n] = va_arg(__a__, double);};        \
            break;                                 \
       case 12:                                    \
            {long double *_pv = (long double *) (_d);                \
             _pv[_n] = va_arg(__a__, long double);};        \
            break;                                 \
       case 13:                                    \
            {float _Complex *_pv = (float _Complex *) (_d);                \
             _pv[_n] = va_arg(__a__, float _Complex);};        \
            break;                                 \
       case 14:                                    \
            {double _Complex *_pv = (double _Complex *) (_d);                \
             _pv[_n] = va_arg(__a__, double _Complex);};        \
            break;                                 \
       case 15:                                    \
            {long double _Complex *_pv = (long double _Complex *) (_d);                \
             _pv[_n] = va_arg(__a__, long double _Complex);};        \
            break;                                 \
       case 16:                                    \
            {quaternion *_pv = (quaternion *) (_d);                \
             _pv[_n] = va_arg(__a__, quaternion);};        \
            break;                                 \
       case 17:                                    \
            {void * *_pv = (void * *) (_d);                \
             _pv[_n] = va_arg(__a__, void *);};        \
            break;                                 \
       case 19:                                    \
            {char * *_pv = (char * *) (_d);                \
             _pv[_n] = va_arg(__a__, char *);};        \
            break;                                 \
       }                                             \
   }
#else
#define SC_VA_ARG_ID(_id, _d, _n)                    \
   {int _lid;                                        \
    if (_id == SC_STRING_I)                          \
       _lid = _id;                                   \
    else if (SC_is_type_ptr(_id) == TRUE)            \
       _lid = SC_POINTER_I;                          \
    else                                             \
       _lid = _id;                                   \
    switch (_lid) {                                  \
       case 2:                                    \
            {bool *_pv = (bool *) (_d);                \
             _pv[_n] = va_arg(__a__, int);};        \
            break;                                 \
       case 3:                                    \
            {char *_pv = (char *) (_d);                \
             _pv[_n] = va_arg(__a__, int);};        \
            break;                                 \
       case 4:                                    \
            {wchar_t *_pv = (wchar_t *) (_d);                \
             _pv[_n] = va_arg(__a__, int);};        \
            break;                                 \
       case 5:                                    \
            {int8_t *_pv = (int8_t *) (_d);                \
             _pv[_n] = va_arg(__a__, int);};        \
            break;                                 \
       case 6:                                    \
            {short *_pv = (short *) (_d);                \
             _pv[_n] = va_arg(__a__, int);};        \
            break;                                 \
       case 7:                                    \
            {int *_pv = (int *) (_d);                \
             _pv[_n] = va_arg(__a__, int);};        \
            break;                                 \
       case 8:                                    \
            {long *_pv = (long *) (_d);                \
             _pv[_n] = va_arg(__a__, long);};        \
            break;                                 \
       case 9:                                    \
            {long long *_pv = (long long *) (_d);                \
             _pv[_n] = va_arg(__a__, long long);};        \
            break;                                 \
       case 10:                                    \
            {float *_pv = (float *) (_d);                \
             _pv[_n] = va_arg(__a__, double);};        \
            break;                                 \
       case 11:                                    \
            {double *_pv = (double *) (_d);                \
             _pv[_n] = va_arg(__a__, double);};        \
            break;                                 \
       case 12:                                    \
            {long double *_pv = (long double *) (_d);                \
             _pv[_n] = va_arg(__a__, long double);};        \
            break;                                 \
       case 16:                                    \
            {quaternion *_pv = (quaternion *) (_d);                \
             _pv[_n] = va_arg(__a__, quaternion);};        \
            break;                                 \
       case 17:                                    \
            {void * *_pv = (void * *) (_d);                \
             _pv[_n] = va_arg(__a__, void *);};        \
            break;                                 \
       case 19:                                    \
            {char * *_pv = (char * *) (_d);                \
             _pv[_n] = va_arg(__a__, char *);};        \
            break;                                 \
       }                                             \
   }
#endif

#endif

#endif

