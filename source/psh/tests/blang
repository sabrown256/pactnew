#!/bin/csh -f
#
# BLANG - blang testing
#
# Source Version: 3.0
# Software Release #: LLNL-CODE-422942
#
# include "cpyright.h"
#

source ../../tests/common

set msg = "BLANG Test ....................."

while ($#argv > 0)
   switch ($1)
      case -h:
           echo ""
           echo "Usage: blang [-h]"
           echo "  h  this help message"
           echo ""
           exit(1);
      default:
           breaksw
   endsw
   shift
end

InitLog Log $TestDir/log.blang.$LogSfx

flog $Log cd $TestDir

NoteD $Log ""

# omit tests - usually in difficult CROSS_COMPILE situation
if ($RUN_TESTS == FALSE) then
   NoteD $Log "                    ${msg}omitted"
   NoteD $Log ""

else

   NoteD $Log "                    $msg"
   Note $Log ""

   flog $Log set cc = ( ${CC_Exe} ${CDefDebug} ${CC_Flags} -I${IncDir} ${MDG_Inc} ${DP_Inc} )
   flog $Log set fc = ( ${FC_Exe} ${FDefDebug} ${FC_Flags} -I${IncDir} )

   foreach i (bl1 bl2 bl3 bl4 bl5 bl6)

      @ lerr = 0

      Separator $Log

      set f = ( `fill-string -n 23 $i` )
      NoteD $Log -n "                        $f"
      Note $Log ""

      flog $Log cp $FilesDir/$i.* .

      flog $Log set hdr = ${i}_int.h
      flog $Log $RM $hdr
      flog $Log touch $hdr
      Note $hdr "#include <sx_int.h>"
      Note $hdr "#define G_STR  256"
      Note $hdr "struct s_str {int a; double b;};"
      Note $hdr "typedef struct s_str str;"
      flog $Log cat $hdr

      flog $Log blang -b $i.bind -c $i.proto

      cat $i.proto | \
      grep -v '#' | \
      awk '$0 != "" { printf("extern %s;\n", $0); }' >>& $hdr

# compile Fortran module
      if ($FC_Exe == none) then
         NoteD $Log -n "."
      else
         Note $Log ""
         Note $Log "Compile fortran module"
         flog $Log set file = gm-$i.f
         flog $Log ${fc} -c $file
         @ xstatus = $status
         if (-f $RefDir/$file) then
            flog $Log ( grep -v 'isizea =' $file >&! $file.cmp )
            flog $Log ( grep -v 'isizea =' $RefDir/$file >&! $file.ref.cmp )
            flog $Log diff $file.cmp $file.ref.cmp
            if ($status != 0) then
               @ xstatus = $xstatus + 1
               flog $Log rm -f $file.cmp $file.ref.cmp
            endif
         else
            flog $Log cp $file $RefDir/$file
         endif
         if ($xstatus == 0) then
            NoteD $Log -n "."
         else
            NoteD $Log -n "x"
            @ lerr = $lerr + 1
         endif
         unset file
      endif

# compile Fortran wrapper
      Note $Log ""
      Note $Log "Compile fortran wrapper"
      flog $Log set file = gf-$i.c
      flog $Log ${cc} -c $file
      @ xstatus = $status
      if (-f $RefDir/$file) then
         flog $Log diff $file $RefDir/$file
         if ($status != 0) then
            @ xstatus = $xstatus + 1
         endif
      else
         flog $Log cp $file $RefDir/$file
      endif
      if ($xstatus == 0) then
         NoteD $Log -n "."
      else
         NoteD $Log -n "x"
         @ lerr = $lerr + 1
      endif
      unset file

# compile Scheme wrapper
      Note $Log ""
      Note $Log "Compile scheme wrapper"
      flog $Log set file = gs-$i.c
      flog $Log ${cc} -c $file
      @ xstatus = $status
      if (-f $RefDir/$file) then
         flog $Log diff $file $RefDir/$file
         if ($status != 0) then
            @ xstatus = $xstatus + 1
         endif
      else
         flog $Log cp $file $RefDir/$file
      endif
      if ($xstatus == 0) then
         NoteD $Log -n "."
      else
         NoteD $Log -n "x"
         @ lerr = $lerr + 1
      endif
      unset file

# compile Python wrapper
      Note $Log ""
      flog $Log set file = gp-$i.c
      if ($HavePython == FALSE) then
         Note $Log "Not compiling python wrapper"
         @ xstatus = 0
      else
         Note $Log "Compile python wrapper"
         flog $Log ${cc} -I$PyInc -c $file
         @ xstatus = $status
      endif
      if (-f $RefDir/$file) then
         flog $Log diff $file $RefDir/$file
         if ($status != 0) then
            @ xstatus = $xstatus + 1
         endif
      else
         flog $Log cp $file $RefDir/$file
      endif

      if ($xstatus == 0) then
         NoteD $Log -n "."
      else
         NoteD $Log -n "x"
         @ lerr = $lerr + 1
      endif
      unset file

# compare HTML
      Note $Log ""
      flog $Log set file = gh-$i.html
      @ xstatus = 0
      if (-f $RefDir/$file) then
         flog $Log diff $file $RefDir/$file
         if ($status != 0) then
            @ xstatus = $xstatus + 1
         endif
      else
         flog $Log cp $file $RefDir/$file
      endif
      if ($xstatus == 0) then
         NoteD $Log -n "."
      else
         NoteD $Log -n "x"
         @ lerr = $lerr + 1
      endif
      unset file

# report status
      Note $Log ""
      if ($lerr == 0) then
         NoteD $Log " ok"
         $RM $i*.* $hdr
      else
         NoteD $Log " ng"
         @ nerr = $nerr + 1
      endif

   end

   set rpf = ( $rpf *.o *.mod )

   Separator $Log

endif

$TEST_CHECK part -a blang -e $nerr -rpf "$rpf" "$msg"

exit($status)

