#!/bin/csh -f
#
# EXT-SPEC - test special options @r, @x, @v, and @l
#

unalias *

set t = spec

@ err = 0

source $TestScrDir/functions-pact.csh
alias ftee      'echo "Command: \!\!:2-$" >>& \!\!:1 ; \!\!:2-$ |& tee -ai \!\!:1'

set f = ( `fill-string -n 8 -c ' ' $t` )
NoteD $Log -n "                        $f "
Note $Log ""

set exe = $t
set opt = ( $argv )
set rpf = ""

set lt = `timer -r`

set logout = ( osrc -t out cat )
set logerr = ( osrc -t err cat )

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

foreach i (1 2 3 4)

   Note $Log ""
   Note $Log "---------------------------------------------------"
   Note $Log ""

   set id  = e$i
   set res = ext-$id.res
   set raw = $res.raw
   set dif = $res.dif
   set ref = $RefDir/ext-$id
   set dod = TRUE

   switch ($i)
      case 1:
           set cmd = ( gexec $opt /bin/echo "$id" @x $logout '>&!' $res )
           set gst = "0 0"
           set srt = FALSE
           breaksw
      case 2:
           set cmd = ( gexec $opt /bin/echo "$id" @r $logout '>&!' $res )
           set gst = "0 0"
           set srt = FALSE
           breaksw
      case 3:
#           set cmd = ( gexec $opt /bin/echo "foo=bar" @v printenv foo '>&!' $res )
           set cmd = ( gexec $opt csh -c "'(echo foo=bar ; echo bar=baz ; echo baz=blat)'" @v printenv foo '>&!' $res )
           set gst = "0 0"
           set srt = FALSE
           breaksw
      case 4:
           set cmd = ( gexec $opt /bin/echo "core=13000" @l /bin/csh -cf limit @o grep coredumpsize '>&!' $res )
           set gst = "0 0 0"
           set srt = FALSE
           set dod = FALSE
           breaksw
   endsw

   Note $Log "cmd = $cmd"
   Note $Log "srt = $srt"

   if ("$Valgrind" == "") then
      flog $Log eval $cmd

      if ($srt == TRUE) then
         flog $Log ( sort $raw >&! $res )
         flog $Log rm -f $raw
      endif

      flog $Log cat $res
      if ($?PERDB_PATH == 0) then
         eval `grep "setenv gstatus" $res`
         grep -v "setenv gstatus" $res >&! $res.new
         flog $Log mv $res.new $res
      else
         dbget gstatus
      endif

      Note $Log "> gstatus = $gstatus"
      if ("$gstatus" != "$gst") then
         flog $Log @ err = $err + 1
         NoteD $Log -n "x"
         Note $Log "$id failed"
      else if (-f $ref) then
         if ($dod == TRUE) then
            flog $Log ( diff $res $ref >&! $dif )
            set xstatus = $status
         else
            flog $Log touch $dif
            set xstatus = 0
         endif
         if ($xstatus == 0) then
            NoteD $Log -n "."
            Note $Log "$id passed"
            flog $Log rm -f $res $dif
         else
            flog $Log @ err = $err + 1
            NoteD $Log -n "o"
            Note $Log "$id differed"
            flog $Log cat $dif
         endif
      else
         NoteD $Log -n "+"
         Note $Log "$id added"
         flog $Log cp $res $ref
         flog $Log rm -f $res
      endif

   else
      set cmd = ( `echo "$cmd" | sed 's+>.*$++'` )
      ftee $Log $Valgrind $cmd                |& \
      grep "ERROR SUMMARY:"                   |& \
      awk '{ print $4 }'   >&! $Tmp
      set xstatus = `cat $Tmp`
      @ err = $err + $xstatus
      if ($xstatus == 0) then
         NoteD $Log -n "."
      else
         NoteD $Log -n "x"
      endif
   endif

end

NoteD $Log -n " .................."

Note $Log "exiting with err = $err"
Note $Log ""

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

set xstatus = $err

set lt = `timer -b $lt`

set rpf = ( $rpf ext-$t )

$TEST_CHECK part -a gexec_${t} -e $xstatus -dt $lt -x $exe -l -rpf "$rpf" none

exit($status)
