#!/bin/csh -f
#
# ELIDE - test elide
#
# Source Version: 3.0
# Software Release #: LLNL-CODE-422942
#
# include "cpyright.h"
#

source ../../tests/common

set msg = "ELIDE Test ....................."

while ($#argv > 0)
   switch ($1)
      case -h:
           echo ""
           echo "Usage: elide [-h]"
           echo "  h  this help message"
           echo ""
           exit(1);
      default:
           breaksw
   endsw
   shift
end

NoteD $Log ""
NoteD $Log "                    $msg"

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# TEST 1 - try different delimiters of varying depths

set List = (1 2 3)

foreach t (ebasic emlt echr)
   Separator $Log

   flog $Log set dat = $FilesDir/$t.dat

   foreach i ($List)
      Separator $Log

      flog $Log set res = ${t}${i}
      flog $Log set ref = $RefDir/$res

      set f = ( `fill-string -n 28 $res` )
      NoteD $Log -n "                        $f "
      Note $Log ""

      switch ($i)
         case 1:
              flog $Log ( elide '/*' '*/' $dat >&! $res )
              set xstatus = $status
              breaksw
         case 2:
              flog $Log ( elide '{' '}' $dat >&! $res )
              set xstatus = $status
              breaksw
         case 3:
              flog $Log ( elide '#if' '#endif' $dat >&! $res )
              set xstatus = $status
              breaksw
         default:
              break
      endsw

      if (-f $ref) then
         flog $Log ( diff -w -b $res $ref >! $res.diff )
         set xstatus = $status
      else
         flog $Log cp $res $ref
         set xstatus = $status
      endif

      if ($xstatus == 0) then
         NoteD $Log "ok"
         flog $Log rm -f $res $res.diff
      else
         if (-d $res.log) then
            flog $Log cat $res.log
         endif
         flog $Log cat $res
         flog $Log cat $res.diff
         NoteD $Log "ng"
      endif

      @ nerr = $nerr + $xstatus

   end
end

Note $Log ""

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# TEST 2 - try eliding different range sets

set f = ( `fill-string -n 28 erng` )
NoteD $Log -n "                        $f "
Note $Log ""

flog $Log set dat = $FilesDir/erng.dat

@ lerr = 0

@ l = 0
while ($l < 3)
   @ l = $l + 1

   @ i = 0
   while ($i < 7)
      @ i = $i + 1

      Separator $Log

      switch ($l)
         case 1:
              set opt = ( -ns $i )
              breaksw
         case 2:
              set opt = ( -ne $i )
              breaksw
         case 3:
              set opt = ( -ns $i -ne $i )
              breaksw
      endsw

      flog $Log set res = erng${l}-${i}
      flog $Log set ref = $RefDir/$res

      echo "# elide $opt '{' '}' $dat:t" >&! $res
      flog $Log ( elide $opt '{' '}' $dat >>& $res )
      set xstatus = $status

      if (-f $ref) then
         flog $Log ( diff -w -b $res $ref >! $res.diff )
         set xstatus = $status
      else
         flog $Log cp $res $ref
         set xstatus = $status
      endif

      if ($xstatus == 0) then
         flog $Log rm -f $res $res.diff
      else
         if (-d $res.log) then
            flog $Log cat $res.log
         endif
         flog $Log cat $res
         flog $Log cat $res.diff
      endif

      @ lerr = $lerr + $xstatus
   end
end

if ($lerr == 0) then
   NoteD $Log "ok"
else
   NoteD $Log "ng"
   @ nerr = $nerr + $lerr
endif

Note $Log ""

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# TEST 3 - try eliding and substituting different range sets

set f = ( `fill-string -n 28 esub` )
NoteD $Log -n "                        $f "
Note $Log ""

flog $Log set dat = $FilesDir/esub.dat

@ lerr = 0

@ l = 0
while ($l < 3)
   @ l = $l + 1

   @ i = 0
   while ($i < 6)
      @ i = $i + 1

      Separator $Log

      switch ($l)
         case 1:
              set opt = ( -ns $i -s "'x_y_z'" )
              breaksw
         case 2:
              set opt = ( -ne $i -s "'x_y_z'"  )
              breaksw
         case 3:
              set opt = ( -ns $i -ne $i -s "'x_y_z'"  )
              breaksw
      endsw

      flog $Log set res = esub${l}-${i}
      flog $Log set ref = $RefDir/$res

      echo "# elide $opt '{' '}' $dat:t" >&! $res
      flog $Log ( elide $opt '{' '}' $dat >>& $res )
      set xstatus = $status

      if (-f $ref) then
         flog $Log ( diff -w -b $res $ref >! $res.diff )
         set xstatus = $status
      else
         flog $Log cp $res $ref
         set xstatus = $status
      endif

      if ($xstatus == 0) then
         flog $Log rm -f $res $res.diff
      else
         if (-d $res.log) then
            flog $Log cat $res.log
         endif
         flog $Log cat $res
         flog $Log cat $res.diff
      endif

      @ lerr = $lerr + $xstatus
   end
end

if ($lerr == 0) then
   NoteD $Log "ok"
else
   NoteD $Log "ng"
   @ nerr = $nerr + $lerr
endif

Note $Log ""

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

touch dbfoo
set rpf = ( $rpf db* )

$TEST_CHECK part -a elide -e $nerr -rpf "$rpf" "$msg"

exit($status)


