#!/bin/csh -f
#
# CC-DEBUG - help debug compiler crashes by narrowing to
#          - function causing the compiler to crash
#
# include cpyright.h
#

unalias *

@ err = 0

set file = ""
set cmd  = "gcc"
set vrb  = FALSE
set str  = FALSE

while ($#argv > 0)
   switch ($1)
      case -h:
           echo ""
           echo "Usage: cc-debug [-h] [-s] [-v] -c <file> <cmd>"
           echo "   c     the file that causes the compiler crash"
           echo "   h     this help message"
           echo "   s     strip comments from final result"
           echo "   v     verbose mode"
           echo "   <cmd> the compilation command without the file"
           echo ""
           exit(1)
      case -c:
           shift
           set file = $1
           breaksw
      case -s:
           set str = TRUE
           breaksw
      case -v:
           set vrb = TRUE
           breaksw
      default:
           set cmd = ( $argv )
           break
           breaksw
   endsw
   shift
end

if ("$file" == "") then
   echo "No file specified - exiting"
   exit(1)
endif

set exe = ( `which $cmd[1]` )
if (!(-x "$exe")) then
   echo "No such executable '$cmd[1]' - exiting"
   exit(1)
endif

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# count expressions delimited by { and }

echo -n "counting all expressions .... "

set nf = $file:r-count.c
@ nu = 100000
@ nl = 1
@ n  = $nu
while (1)
   elide -ns 1 -ne $n -s ';' '{' '}' $file >! $nf
   @ nc = `grep '{' $nf | wc -l`
   if ($nc == 0) then
      @ nu = $n
   else
      @ nl = $n
   endif
   if ($nl == $nu - 1) then
      break
   endif
   @ n = ( $nl + $nu ) / 2
end
rm -f $nf
unset nf
unset nu
unset nl

echo "$n expressions"

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# get baseline compiler messages and status for comparison

set cres = $file.res

$cmd -c $file >&! $cres
set bstatus = $status
@  nlb = `cat $cres | wc -l`

echo "crash status ................ $bstatus ($nlb lines)"

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

echo "finding bad expressions ..... "

set base = $file:r
set cf   = $file

rm -f tmp-${base}-*.c* >& /dev/null

# outer loop iterates to convergence - i.e. no changes
set lkf = $cf

@ k  = 0
@ na = $n
while ($k < $na)
   @ k = $k + 1

   echo -n "   iteration $k "

# middle loop tries to discover functions
# that matter for compiler crash

   @ j  = 0
   @ nx = $n
   while ($j < $nx)
      @ i = $j
      @ j = $j + 1

      set nf  = tmp-${base}-${k}-${j}.c
      set nres = $nf.res
      @  nlc   = `cat $cf | wc -l`
      @ brk    = 0
      set ok   = TRUE

      if ($vrb == TRUE) then
         echo ""
         echo "   $j> working with $cf ($nlc lines)"
      endif

# inner loop tries to eliminate functions
# that do not matter for compiler crash

      while (($i < $n) && ($brk == 0))
         @ i = $i + 1

         elide -ns $j -ne $i -s ';' '{' '}' $cf >! $nf
         if ($vrb == TRUE) then
            echo "      ${k}.${j}.${i}> elide -ns $j -ne $i -s ';' '{' '}' $cf -> $nf (`cat $nf | wc -l` lines)"
         endif
         grep '{' $nf >& /dev/null
         if ($status == 0) then
            $cmd -c $nf >&! $nres
            set xstatus = $status
            if ($vrb == TRUE) then
               echo "      ${k}.${j}.${i}> $cmd -c $nf -> $xstatus (`cat $nres | wc -l` lines)"
            endif
            if ($xstatus != $bstatus) then
               echo -n "o"
               set ok = FALSE
            else
               @ nlr = `cat $nres | wc -l`
               diff $nres $cres >& /dev/null
               set xstatus = $status
               if ($xstatus != 0) then
                  echo -n "x"
                  set ok = FALSE
               endif
            endif
            if ($ok == FALSE) then
               @ brk = 1
            else
               echo -n "."
            endif
         else
            if ($vrb == TRUE) then
               echo "      ${k}.${j}.${i}> no more expressions"
            endif

# if deleting the first expression drains the file - take note
            if ($i == 1) then
               @ brk = 3
            else
               @ brk = 2
            endif
         endif
         if ($vrb == TRUE) then
            echo ""
         endif
      end                   # end of inner loop i

# if we broke out it was because we went one expression
# too far and there was no compiler crash
# so reconstruct the previous file
      if ($brk != 0) then
         @ i = $i - 1
         if ($i < $j) then
            @ i = $j
         endif
         elide -ns $j -ne $i -s ';' '{' '}' $cf >! $nf
         @ n = $n - $i + 1
      endif

# if nothing new was discovered then quit
      if ($ok == TRUE) then
         break
      endif

      set cf   = $nf
      set cres = $nres
   end                      # end of middle loop j

   @ ne = $j - 1
   if ($ne < 1) then
      @ ne = 1
   endif
   echo " done ($ne)"

# decide whether or not to iterate again

# if the last middle loop ended with a file with no expressions
# exit with the current working file
   if ($brk == 3) then
      if ($vrb == TRUE) then
         echo "   ${k}> leaving with single expression"
      endif
      set nf = $cf
      break

# if this iteration produced the same file as the previous one
# take it as the result
   else
      if (!(-f $nf)) then
         @ j = $j - 1
         if ($i < $j) then
            @ i = $j
         endif
         set nf  = tmp-${base}-${k}-${j}.c
         elide -ns $j -ne $i -s ';' '{' '}' $cf >! $nf
         @ n = $n - $i + 1
      endif

      set cf = $nf
      diff $lkf $cf >>& /dev/null
      if ($status == 0) then
         if ($vrb == TRUE) then
            echo "   ${k}> leaving with no differences"
         endif
         break
      endif
   endif

# remember this working file for the next iteration
   set lkf = $cf

end                         # end of outer loog k

set ff = ${base}-crash.c
echo "   results in $ff"

# remove everything after the last expression
@ ll = ( `grep -n '}' $nf | tail -n 1 | sed 's|:.*$||'` )
mv $nf $nf.res
head -n $ll $nf.res >&! $nf

if ($str == TRUE) then
   if ($vrb == TRUE) then
      echo -n "stripping comments ... "
   endif
   elide '/*' '*/' $nf |& cat -s >&! $ff
   if ($vrb == TRUE) then
      echo "done"
   endif
   rm -f $nf
else
   cat -s $nf >&! $ff
endif

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

echo -n "verifying crash ............. "
set res = ok
$cmd -c $ff >&! $ff.res
set xstatus = $status
if ($xstatus != $bstatus) then
   set res = status
   @ err = $err + 1
else
   diff $ff.res $cres >& /dev/null
   if ($status != 0) then
      set res = diff
      @ err = $err + 1
   endif
endif
echo "$res"

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

if ($err == 0) then
   rm -f tmp-${base}-*.[co] *${base}*.c.res ${base}*.o >& /dev/null
endif

exit($err)
