#
# TEST-ENV - standard environment for PACT tests
#
# Source Version: 3.0
# Software Release #: LLNL-CODE-422942
#
# include "cpyright.h"
#

unalias *
umask 007

setenv TestScrDir $cwd
foreach f (../scripts ../../scripts ../../../scripts ../../../../scripts)
   if (-f $f/functions-pact.csh) then
      pushd $f >>& /dev/null
      setenv TestScrDir $cwd
      setenv BaseDir $cwd:h
      popd >>& /dev/null
      break
   endif
end
source $TestScrDir/functions-pact.csh
setenv TEST_CHECK $TestScrDir/test-check

if ($?TEST_ADVISORY == 0) then
   setenv TEST_ADVISORY
endif

# settle log file base
# at package level Test should be ""
# at test level Test should be name of test script
set TLog = test
if ($?Test == 1) then
   if ("$Test" != "") then
      set TLog = $Test
   endif
endif

set VG = `where valgrind | head -n 1`
if (-x "$VG") then
   set largs = ( $argv )
   while ($#largs > 0)
      switch ($largs[1])
         case -vg:
              set TLog = ${TLog}-vg
              setenv Valgrind  "valgrind --tool=memcheck --track-origins=yes --gen-suppressions=all"
              breaksw
         case -vgd:
              set TLog = ${TLog}-vgd
              setenv Valgrind  "valgrind --tool=memcheck --track-origins=yes --db-attach=yes"
              breaksw
         case -vgs:
              set TLog = ${TLog}-vgs
              setenv Valgrind  "valgrind --tool=memcheck --track-origins=yes"
              breaksw
      endsw
      shift largs
   end
endif

if ($?Valgrind == 0) then
   setenv Valgrind ""
endif

set DbgOpt = `pact -info DbgOpt`
switch ($DbgOpt)
   case debug:
        setenv LogSfx  g
        breaksw
   case optmize:
        setenv LogSfx  o
        breaksw
   case mixed:
   default:
        setenv LogSfx  O
        breaksw
endsw

# tests run concurrently with the DISPLAY environment variable
# set, may result in X11 connection failures on some systems
unsetenv DISPLAY

setenv OS  `uname`

setenv ZeroSpace  "-z 2"

#   pushd .. >& /dev/null
#   while (!(-d dev) && !(-d manager))
#      cd .. >& /dev/null
#   end
#   setenv BaseDir  $cwd
#   popd >& /dev/null

   setenv System    `$BaseDir/scripts/cfgman use`
   setenv SysDir    $BaseDir/dev/$System
   setenv SrcDir    $BaseDir/$Package

   setenv EtcDir    $SysDir/etc
   setenv IncDir    $SysDir/include
   setenv LibDir    $SysDir/lib
   setenv BinDir    $SysDir/bin

   setenv TestDir   $SrcDir/z-$System/test
   setenv FilesDir  $SrcDir/tests
   setenv RefDir    $FilesDir/ref

   setenv TIMER     $BinDir/timer
   setenv MAKE      $BinDir/pact
   setenv DORUN     $BinDir/do-run
   setenv PSDIFF    $BinDir/ps-diff
   setenv PX        $BaseDir/scripts/px

   source $EtcDir/env-pact.csh

   if ($?IBM_BGL == 1) then
      setenv RUN_TESTS FALSE
   else
      setenv RUN_TESTS TRUE
   endif

   if ($?CROSS_COMPILE == 0) then
      setenv CROSS_COMPILE FALSE
   endif

# control when to use do-run
   setenv PFE   $DORUN
   setenv CFE   ""
   if ($CROSS_COMPILE != FALSE) then
      setenv CFE $DORUN

# make up the list of environment variable to pass through submit
      set lenv = ""
      foreach i (SCHEME)
         printenv $i >& /dev/null
         if ($status == 0) then
            set lenv = ( $lenv -exp_env $i )
         endif
      end

      setenv DO_RUN_SUBMIT_ENV "$lenv"
      unset lenv
   endif

   setenv PACT_Exe  "$CFE $BinDir/pact"

   setenv Parallel     `$PACT_Exe -info THREADING`
   setenv MPI          `$PACT_Exe +l -info HAVE_MPI`
   setenv HaveDevZero  `$PACT_Exe +l -info HAVE_DEV_ZERO`
   setenv LARGE_FILES  `$PACT_Exe -info _LARGE_FILES`

   if (-e $IncDir/noipc) then
      setenv HaveIPC  NO
   else
      setenv HaveIPC  YES
   endif

set path = ( . $BinDir $path )

setenv SCHEME $BaseDir/scheme/applications
setenv SCHEME $BaseDir/scheme/applications/extensions:${SCHEME}
setenv SCHEME $BaseDir/scheme/tests:${SCHEME}

if ($?Package == 1) then
   setenv SCHEME $BaseDir/$Package/tests:${SCHEME}
   setenv SCHEME $BaseDir/$Package/applications:${SCHEME}
   setenv SCHEME $BaseDir/$Package/applications/extensions:${SCHEME}
else
   setenv SCHEME $BaseDir/sx/applications:${SCHEME}
   setenv SCHEME $BaseDir/sx/applications/extensions:${SCHEME}
   setenv SCHEME $BaseDir/sx/tests:${SCHEME}
   setenv SCHEME $BaseDir/ultra:${SCHEME}
   setenv SCHEME $BaseDir/ultra/applications:${SCHEME}
   setenv SCHEME $BaseDir/ultra/applications/extensions:${SCHEME}
   setenv SCHEME $BaseDir/panacea/applications:${SCHEME}
endif

setenv SCHEME $SysDir/scheme:${SCHEME}

# test inside a subdirectory
if (!(-d $TestDir)) then
  mkdir -p $TestDir
endif

setenv Tmp $TestDir/.tmp.$$

InitLog Log $TestDir/log.$TLog.$LogSfx
Note $Log "Package: $Package"
Note $Log "Test:    $Test"
Note $Log "Log:     $Log"
Note $Log ""

Separator $Log

if ("$Valgrind" != "") then
   Note $Log "Using valgrind: $VG"
endif

if ($?TEST_RM_EXE == 1) then
   Note $Log "Removing test executables tests that pass"
   setenv rm_cache $TestDir/rm-cache
   if ($?rm_cache == 1) then
      flog $Log $RM $rm_cache
   endif
endif

if ("$Test" == "") then
   if ("$Valgrind" != "") then
      foreach i ($vgdirs)
         if ("$i" == ".") then
            set base = $FilesDir/vg.suppress
         else
            set base = $BaseDir/$i/tests/vg.suppress
         endif
         if (-f $base) then
            setenv Valgrind  "$Valgrind --suppressions=$base"
         endif
         if (-f ${base}-test) then
            setenv Valgrind  "$Valgrind --suppressions=${base}-test"
         endif
      end
   endif
endif

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# log test environment

Separator $Log

Note $Log "Test environment"

Note $Log ""
Note $Log "Directories:"
Note $Log "BaseDir    = |$BaseDir|"
Note $Log "System     = |$System|"
Note $Log "SysDir     = |$SysDir|"
Note $Log "SrcDir     = |$SrcDir|"
Note $Log "IncDir     = |$IncDir|"
Note $Log "LibDir     = |$LibDir|"
Note $Log "BinDir     = |$BinDir|"
Note $Log "TestDir    = |$TestDir|"
Note $Log "FilesDir   = |$FilesDir|"
Note $Log "RefDir     = |$RefDir|"
Note $Log "TestScrDir = |$TestScrDir|"

Note $Log ""
Note $Log "Executables:"
Note $Log "TIMER    = |$TIMER|"
Note $Log "MAKE     = |$MAKE|"
Note $Log "DORUN    = |$DORUN|"
Note $Log "PX       = |$PX|"
Note $Log "PFE      = |$PFE|"
Note $Log "CFE      = |$CFE|"
Note $Log "PACT_Exe = |$PACT_Exe|"
Note $Log "PSDIFF   = |$PSDIFF|"
Note $Log "Valgrind = |$Valgrind|"

Note $Log ""
Note $Log "State:"
Note $Log "OS                = |$OS|"
Note $Log "HaveIPC           = |$HaveIPC|"
Note $Log "Parallel          = |$Parallel|"
Note $Log "MPI               = |$MPI|"
Note $Log "HaveDevZero       = |$HaveDevZero|"
Note $Log "LARGE_FILES       = |$LARGE_FILES|"
Note $Log "LogSfx            = |$LogSfx|"
Note $Log "ZeroSpace         = |$ZeroSpace|"
Note $Log "RUN_TESTS         = |$RUN_TESTS|"
Note $Log "CROSS_COMPILE     = |$CROSS_COMPILE|"
Note $Log "SCHEME            = |$SCHEME|"
Note $Log "TEST_CHECK        = |$TEST_CHECK|"
Note $Log "Tmp               = |$Tmp|"
if ($?rm_cache == 1) then
   Note $Log "rm_cache          = |$rm_cache|"
endif
if ($?DO_RUN_SUBMIT_ENV == 1) then
   Note $Log "DO_RUN_SUBMIT_ENV = |$DO_RUN_SUBMIT_ENV|"
endif
if ($?RUN_SIGNATURE_DB == 1) then
   Note $Log "RUN_SIGNATURE_DB  = $RUN_SIGNATURE_DB"
endif

flog $Log ( where pact | head -n 1 )
flog $Log ( where cc   | head -n 1 )

Separator $Log

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# state for test-check

unsetenv xstatus
set xstatus = 0
set rpf     = none
@ nerr      = 0

setenv t0 `$TIMER -r`
setenv dt -1

