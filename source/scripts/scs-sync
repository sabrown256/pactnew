#!/bin/csh -f
#
# SCS-SYNC - update repository D from the contents of repository S
#          - excluding the contents of the specified sub directories
#
# Source Version: 3.0
# Software Release #: LLNL-CODE-422942
#
# include "cpyright.h"
#

unalias *

alias flog      'echo "Command: \!\!:2-$" >>& \!\!:1 ; \!\!:2-$ >>& \!\!:1'
alias ftee      'echo "Command: \!\!:2-$" >>& \!\!:1 ; \!\!:2-$ |& tee -ai \!\!:1'
alias Note      'echo \!\!:2-$ >>& \!\!:1'
alias NoteD     'echo \!\!:2-$ >>& \!\!:1 ; echo \!\!:2-$'

set ldir = `dirname $0`
if ("$ldir" == ".") then
   set ldir = $cwd
endif
set gitd = ( `$ldir/where-git` )
set repo = ( `$ldir/scs-meta -r` )
set knd  = ( `$ldir/scs-meta -k` )

set repos = ""
set repod = ""
set pkgs  = ""
set pkgd  = ""
set ignd  = ( ../.git ../.svn .svn ../CVS CVS )
set dirs  = ""
set tgt   = repo

while ($#argv > 0)
   switch ($1)
      case -exclude:
           shift
           set ignd = ( $ignd $1 )
           breaksw
      case -h:
           echo ""
           echo "Usage: scs-sync [-exclude <dir>]* [-h] <src> <dst>"
           echo "   exclude   rsync exclude specifications"
           echo "   h         this help message"
           echo "   <src>     a .tar file, .gz file, or a repository"
           echo "   <dst>     the destination repository"
           echo ""
           exit(1)
      default:
           if ("$repos" == "") then
	      if ("$1" =~ *,*) then
                 set repos = ( `echo $1 | sed 's|,.*$||'` )
                 set pkgs  = ( `echo $1 | sed 's|^.*,||'` )
              else
                 set repos = $1
              endif
           else if ("$repod" == "") then
	      if ("$1" =~ *,*) then
                 set repod = ( `echo $1 | sed 's|,.*$||'` )
                 set pkgd  = ( `echo $1 | sed 's|^.*,||'` )
              else
                 set repod = $1
              endif
           endif
           breaksw
   endsw
   shift
end

set log = $cwd/log.sync
date >&! $log

set rel = $cwd/syncs
flog $log rm -rf syncs syncd

set excf = $cwd/tmp.excf
rm -f $excf
touch $excf

set excd  = ( ../.git ../.svn .svn ../CVS CVS $ignd )
Note $log "Ignore directories: $ignd"
Note $log "Exclude directories: $excd"

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# SOURCE SETUP

# get a working copy of the source
flog $log mkdir syncs
flog $log pushd syncs
if (("$repos" =~ *.gz) || ("$repos" =~ *.tgz)) then
   NoteD $log -n "Untarring compressed tarfile $repos ... "
   flog $log tar xvzf $repos
   set xstatus = $status

else if ("$repos" =~ *.tar) then
   NoteD $log -n "Untarring tarfile $repos ... "
   flog $log tar xvf $repos
   set xstatus = $status

else

# remote repo case - the repo path must identify the SCS kind
# we do not want to have to authenticate and do remote queries
   if ("$repos" =~ *:/*) then
      if ("$repos" =~ *cvs*) then
         set sknd = cvs
      else if ("$repos" =~ *svn*) then
         set sknd = svn
      else
         set sknd = git
      endif
      NoteD $log -n "Checking out remote $sknd repository $repos ... "

# local repo case
   else
      if (-d $repos/CVSROOT) then
         set sknd = cvs
      else if (-d $repos/.git) then
         set sknd = git
      else
         set sknd = svn
      endif
      NoteD $log -n "Checking out local $sknd repository $repos ... "

   endif
   Note $log ""

   flog $log scs-co -k $sknd -d $repos $pkgs
   set xstatus = $status
endif

if ($xstatus == 0) then
   NoteD $log "ok"
else
   NoteD $log "ng"
endif

flog $log popd

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# DESTINATION SETUP

# get a working copy of the destination repo
flog $log mkdir syncd
flog $log pushd syncd

# remote repo case - the repo path must identify the SCS kind
# we do not want to have to authenticate and do remote queries
if ("$repod" =~ *:/*) then
   if ("$repod" =~ *cvs*) then
      set dknd = cvs
   else if ("$repod" =~ *svn*) then
      set dknd = svn
   else
      set dknd = git
   endif
   NoteD $log -n "Checking out remote $dknd repository $repod ... "

# local repo case
else
   if (-d $repod/CVSROOT) then
      set dknd = cvs
   else if (-d $repod/.git) then
      set dknd = git
   else
      set dknd = svn
   endif
   NoteD $log -n "Checking out local $dknd repository $repod ... "

endif
Note $log ""

flog $log scs-co -k $dknd -d $repod $pkgd
if ($status == 0) then
   NoteD $log "ok"
else
   NoteD $log "ng"
endif

flog $log popd

flog $log ls -la syncs/*
flog $log ls -la syncd/*

set pkg = `ls -1 syncs`

# add exclude patterns for source and destination
flog $log pushd syncs/$pkg
set dirs = ( $dirs `$ldir/scs-meta -d -a` )
flog $log popd

flog $log pushd syncd/$pkg
set dirs = ( $dirs `$ldir/scs-meta -d -a | sed 's|'$cwd'|\.|g'` )
flog $log popd

foreach e ($dirs $excd)
   if ("$e" =~ /*) then
      echo $e'/*' >>& $excf
   else if ("$e" =~ ./*) then
      echo $e | sed 's|^\./|'$pkg'/|' >>& $excf
   else if ("$e" =~ ../*) then
      echo $e | sed 's|^\.\./|'$pkg:h'/|' >>& $excf
   else
      echo $pkg'/**/'$e'/*' >>& $excf
   endif
end

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# MERGE

flog $log pushd syncd

flog $log cat $excf

# rsync in the source tree files
NoteD $log -n "Running rsync ... "
Note $log ""
flog $log rsync -av --delete --exclude-from=$excf $rel/ .
if ($status == 0) then
   NoteD $log "ok"
else
   NoteD $log "ng"
endif

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# ADD/REMOVE ENTRIES

flog $log cd $pkg

set gitd = ( `$ldir/where-git` )
set repo = ( `$ldir/scs-meta -r` )
set knd  = ( `$ldir/scs-meta -k` )
set dirs = ( `$ldir/scs-meta -d -a | sed 's|'$cwd'|\.|g'` )
Note $log "Destination repo info:"
Note $log "   Repo = $repo"
Note $log "   Kind = $knd"
# NOTE: dirs may be "Word too long." to print
#Note $log "   Dirs = $dirs"

NoteD $log -n "Reconciling contents ... "
Note $log ""

if (-d $gitd[1]) then

   flog $log git add -A
   flog $log git status -s

else if (-d CVS) then

   foreach d ( $ignd )
      set td = $d:t
      if (("$td" != CVS) && ("$td" != .svn) && ("$td" != .git)) then
         Note $log "Remove: $d"
         flog $log ( find . -type d -name $td | xargs rm -r )
      endif
   end

   foreach d ($dirs)
      set sd = $d:h
      if (-d $sd) then
         flog $log pushd $sd

# remove entries
         foreach f ( `cat CVS/Entries | sed 's|^/||' | sed 's|/.*//$||'` )
            if ($f != D) then
               if (!(-f $f)) then
                  flog $log cvs remove $f
               endif
            endif
         end

# add entries
         foreach f ( `ls -1` )
            if ($f != CVS) then
               grep "/$f/" CVS/Entries >& /dev/null
               if ($status != 0) then
                  flog $log cvs add $f
               endif
            endif
         end
         flog $log popd
      endif
   end

else if (-d .svn) then

   foreach d ( $ignd )
      set td = $d:t
      if (("$td" != CVS) && ("$td" != .svn) && ("$td" != .git)) then
         Note $log "Remove: $d"
         flog $log ( find . -type d -name $td | xargs rm -r )
      endif
   end

   foreach d ($dirs)
      set sd = $d:h
      if (-d $sd) then
         flog $log pushd $sd

# remove entries
         foreach e ( `ls -1 .svn/text-base` )
            set f = $e:r
            if (!(-f $f)) then
               flog $log svn remove $f
            endif
         end

# add entries
         foreach e ( `ls -1` )
            set f = .svn/text-base/$e.svn-base
            if (!(-f $f)) then
               flog $log svn add $e
            endif
         end
         flog $log popd
      endif
   end

endif

NoteD $log "done"

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# COMMIT

ftee $log scs-update

NoteD $log ""
NoteD $log "Are these changes correct?"
NoteD $log "Entering sub-shell to verify before commit"
NoteD $log "   To accept, exit the sub-shell with status 0, e.g. exit"
NoteD $log "   To reject, exit the sub-shell with non-zero status, e.g. exit(1)"
NoteD $log ""

flog $log set here = $cwd
csh -f
set xstatus = $status
flog $log cd $here

if ($xstatus == 0) then
   flog $log scs-commit -m "Import from $repos"
   flog $log cat log.commit
   flog $log rm -f $excf
   flog $log rm -rf syncs syncd
else
   NoteD $log ""
   NoteD $log "Verification denied - commit not attempted"
   NoteD $log "Examine $cwd for information"
   NoteD $log "Also file $cwd/log.commit"
   NoteD $log ""
endif

flog $log popd

exit($status)
