#!/bin/csh -f
#
# SCS-COMMIT - commit sources whether GIT, CVS or SVN
#
# Source Version: 3.0
# Software Release #: LLNL-CODE-422942
#
# include "cpyright.h"
#

unalias *

@ err = 0

set ldir = `dirname $0`
if ("$ldir" == ".") then
   set ldir = $cwd
endif
set scsi = ( `$ldir/which-scs` )
set repo = ( `$ldir/scs-meta -r` )

set args = ""
set msg  = ""

while ($#argv > 0)
   switch ($1)
      case -h:
           echo ""
           echo "Usage: scs-commit [-h] [-m <mgs>] <arg>*"
           echo "    h      this help message"
           echo "    <msg>  commit message enclosed in quotes"
           echo "    <arg>  arguments passed on to underlying utility"
           echo ""
           exit(1)
      case -m:
           shift
           set msg = ( $argv )
           break
           breaksw
      default:
           set args = ( $args $1 )
           breaksw
   endsw
   shift
end

set log = $cwd/log.commit
rm -f $log
touch $log

switch ($scsi[1])

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

   case git:
        set part = $scsi[3]
        pushd $scsi[2] >>& $log

# do a pull first
        echo -n "Sync .............. "
        echo "git pull $repo master" >>& $log
        git pull $repo master >>& $log
        set xstatus = $status
        if ($xstatus == 0) then
           echo "ok"
        else
           @ err = $err + $xstatus
           echo "ng ($xstatus)"
        endif

# find changed files
        if ("$part" == ".") then
           set inf = ( `git status -s |& egrep -v '^\?'` )
        else
           set inf = ( `git status -s |& egrep -v '^\?' | grep $part` )
        endif
        echo "Committing:"
        set files = ""
        while ($#inf > 0)
           set tag  = $inf[1]
           set file = $inf[2]
           shift inf
           shift inf
           if ((-f $file) || ($tag == 'D')) then
              set files = ( $files $file )
              echo " $tag  $file"
           endif
        end
        echo "$#files changed"

# do the local commit
# NOTE: if files list is too big shell will kill off before the commit
# if you do not give files you must do git add to the files first
        echo -n "Local commit ...... "

# GOTCHA: too many files and the echo hacks up a 'Word too long' hairball
        if ($#files < 40) then
           echo "git commit $args -q -m '$msg' $files" >>& $log
        endif

        ( git commit $args -q -m "$msg" $files ; exit($status) ) >>& $log
        set xstatus = $status
        if ($xstatus == 0) then
           echo "ok"
        else
           @ err = $err + $xstatus
           echo "ng ($xstatus)"
        endif

        echo "---------------------" >>& $log

# push it up to the master repository
        if ($xstatus == 0) then
           echo -n "Pushing changes ... "
           echo "git push $repo" >>& $log
           git push $repo >>& $log
           if ($xstatus == 0) then
              echo "ok"
           else
              @ err = $err + $xstatus
              echo "ng ($xstatus)"
              echo "Need 'git config --bool core.bare true' on master"
           endif
        endif

        echo "---------------------" >>& $log

# do final pull back from the master repository
# so that git status does not show being ahead of origin/master
        if ($xstatus == 0) then
           echo -n "Pulling back ...... "
           echo "git pull" >>& $log
           git pull >>& $log
#           echo "git pull $repo" >>& $log
#           git pull $repo >>& $log
           if ($xstatus == 0) then
              echo "ok"
           else
              @ err = $err + $xstatus
              echo "ng ($xstatus)"
           endif
        endif

        popd >& /dev/null
        breaksw

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

   case cvs:
        setenv CVS_RSH  ssh
        ( cvs commit $args -m "$msg" ; exit($status) ) |& tee -a $log
        @ err = $status

        breaksw

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

   case svn:
        ( svn commit $args -m "$msg" ; exit($status) ) |& tee -a $log
        @ err = $status
        breaksw

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

endsw

echo "leaving with exit status = $err" >>& $log

exit($err)
