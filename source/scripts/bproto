#!/bin/csh -f
#
# BPROTO - generate C prototypes for use with BLANG
#
# Source Version: 3.0
# Software Release #: LLNL-CODE-422942
#
# include "cpyright.h"
#

unalias *

set arch = `../scripts/cfgman use`

set err = 0
set d   = $cwd
set d   = $d:t

source ../dev/$arch/include/env-pact.csh
source ../scripts/env-csh

InitLog Log $cwd/z-$arch/obj/bproto

Note $Log ""
Note $Log "Generating C bindings for Fortran, SX, and Python"
Note $Log ""

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# GENERATE - generate interfaces for each package

   @ CCount = `echo $d | wc -c`
   @ NDots  = 20 - $CCount
   set Fill = "$d "
   while ($NDots > 0)
      set Fill = "$Fill."
      @ NDots = $NDots - 1
   end

   NoteD $Log -n "      $Fill "
   Note $Log ""

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# PARSE - parse the pre-Make file and make a file list

   set Lst = ( `grep '${TGTLib}(' pre-Make | sed 's/TGTLib//g' | sed 's/[=()$\]//g'` )
   set Files = ""
   foreach i ($Lst)
      set j = $i:r.c
      if (-f $j) then
         set Files = ( $Files $j )
      endif
   end

   Note $Log "Files = $Files"
   Note $Log ""

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# FIND_CC_DECL - process the C declarations
#              - the transformations are:
#   elide '/*' '*/' $Files                         remove C comments
#   elide '{' '}' -                                remove compound statements
#   awk '$NF ~ /\\/ { printf("%s ", $0); }         merge lines ending in  \
#        $NF !~ /\\/ { printf("%s\n", $0); }'  
#   sed 's/\\/ /g'                                 remove embedded \
#   elide '#if' '#endif' -                         remove conditionals
#   grep -v '#'                                    remove #include, #define
#   sed 's/[ \t][ \t]*/ /g'                        compress whitespace
#   awk '$0 ~ /,[ \t]*$/   { printf("%s", $0) }    
#        $0 !~ /,[ \t]*$/  { printf("%s\n", $0) }' combine lines ending in ,
#   sed '/^[ \t]*$/d'                              remove blank lines
#   sed '/;[ \t]*$/d'                              remove lines ending in ;
#   grep -v '='                                    remove lines with assignments
#

   elide '/*' '*/' $Files                          | \
   elide '{' '}' -                                 | \
   awk '$NF ~ /\\/ { printf("%s ", $0); }            \
        $NF !~ /\\/ { printf("%s\n", $0); }'       | \
   sed 's/\\/ /g'                                  | \
   elide '#if' '#endif' -                          | \
   grep -v '#'                                     | \
   sed 's/[ \t][ \t]*/ /g'                         | \
   awk '$0 ~ /,[ \t]*$/   { printf("%s", $0) }       \
        $0 !~ /,[ \t]*$/  { printf("%s\n", $0) }'  | \
   sed '/^[ \t]*$/d'                               | \
   sed '/;[ \t]*$/d'                               | \
   grep -v '='                                     | \
   grep -v 'FIXNUM'                                | \
   grep -v 'static'                                | \
   grep '('                                        | \
   sort                                            | \
   cat >&! z-$arch/$d.proto

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# FIND_FF_WRAPPER - find the FF_ID declarations
#                 - account for the convention:
#                 -    <type> *sxxx    is a scalar
#                 -    <type> *axxx    is an array
#                 - the transformations are:
#
#   sed 's/[ \t][ \t]*/ /g'               compress white space
#   awk '$0 ~ /,[ \t]*$/   { printf("%s", $0) }     join lines ending in ','
#        $0 !~ /,[ \t]*$/  { printf("%s\n", $0) }'
#   grep 'FF_ID('                    
#   grep -v "#"                           suppress #define FF_ID
#   grep -v ";"                           suppress ... FF_ID(x,X)(...);
#   grep -v "="                           suppress x = FF_ID(x,X)(...
#   sed 's/, .*)(/(/'                     FF_ID(x, X)(     -> FF_ID(x)(
#   sed 's/FF_ID(//'                      FF_ID(x)         -> x
#   sed 's/(void)/()/'                    (void)           -> ()
#   sed 's/(/ /'                          '('              -> ' '
#   sed 's/)$/ END/'                      foo(...)         -> foo(... END
#   sed 's/FIXNUM/integer/g'              FIXNUM           -> integer
#   sed 's/char *\*/integer(isizea) /g'   char *           -> integer(isizea)
#   sed 's/void *\*/integer(isizea) /g'   void *           -> integer(isizea)
#   sed 's/integer *\*s/integer s/g'      integer *s       -> integer
#   sed 's/integer *\*/integerARRAY /g'   integer *        -> integer(*)
#   sed 's/integer *\*/integer /g'        integer *        -> integer
#   sed 's/REAL *\*/real /g'              REAL *           -> real*8
#   sed 's/double *\*/real /g'            double *         -> real*8
#   sed 's/REAL/real*8/g'                 REAL             -> real*8
#   sed 's/double/real*8/g'               double           -> real*8
#   sed 's/float/real*4/g'                float            -> real*4
#   sed 's/char */character*(*)/g'        char *           -> character*(*)
#   sed 's/*//g'                          '*'              -> ''
#   sed 's/,/ /g'                         ','              -> ' '
#   sed 's/PF[^ ]* /external /g'          function pointer -> external
#

   cat $Files                                     | \
   sed 's/[ \t][ \t]*/ /g'                        | \
   awk '$0 ~ /,[ \t]*$/   { printf("%s", $0) }      \
        $0 !~ /,[ \t]*$/  { printf("%s\n", $0) }' | \
   grep 'FF_ID('                                  | \
   grep -v "#"                                    | \
   grep -v ";"                                    | \
   grep -v "="                                    | \
   sed 's/, .*)(/(/'                              | \
   sed 's/FF_ID(//'                               | \
   sed 's/(void)/()/'                             | \
   sed 's/(/ /'                                   | \
   sed 's/)[ \t]*$//'                             | \
   sed 's/FIXNUM/integer/g'                       | \
   sed 's/char *\*/character /g'                  | \
   sed 's/void *\*/integer(isizea) /g'            | \
   sed 's/integer *\*s/integer s/g'               | \
   sed 's/integer *\*/integer-A /g'               | \
   sed 's/REAL *\*/real--8 /g'                    | \
   sed 's/double *\*s/real--8 s/g'                | \
   sed 's/double *\*/real8-A /g'                  | \
   sed 's/REAL/real--8/g'                         | \
   sed 's/double/real--8/g'                       | \
   sed 's/float/real--4/g'                        | \
   sed 's/*//g'                                   | \
   sed 's/,/ /g'                                  | \
   sed 's/PF[^ ]* /external /g'                   | \
   sed 's/.*:/      /'                            | \
   sed 's/--/*/g'                                 | \
   cat >&! z-$arch/$d.wrapper

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

   NoteD $Log "done"

   flog $Log pushd z-$arch

   flog $Log blang $d.proto ../$d.bind $d.wrapper
   set xstatus = $status

   if (-f gf-$d.c) then
      flog $Log mv gf-$d.c obj
   endif
   if (-f gm-$d.f) then
      flog $Log mv gm-$d.f obj
   endif
   if (-f gs-$d.c) then
      flog $Log mv gs-$d.c ../../sx/z-$arch/obj
   endif
   if (-f gp-$d.c) then
      flog $Log mv gp-$d.c ../../python/z-$arch/obj
   endif
   if (-f gh-$d.html) then
      flog $Log mv gh-$d.html ../../doc
   endif

   if ($xstatus == 0) then
#      flog $Log $RM $d.proto
   endif

   flog $Log popd

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

exit($err)

