#!/bin/csh -f
#
# IMPORT-API - generate an API binding for a foreign package
#            - to be used by PACT and
#            - linked statically or dynamically as requested
#
# include "cpyright.h"
#

unalias *

set pact   = `which perdb`
set bindir = $pact:h
set lbase  = $bindir:h
set devinc = $lbase/include
set devetc = $lbase/etc

if (-d ../scripts) then
   source ../scripts/functions-pact.csh
else
   source $lbase/etc/functions-pact.csh
endif

unset bindir
unset lbase

@ nerr  = 0
@ nwarn = 0

set api    = ""
set def    = ""
set fatal  = 0
set keep   = FALSE
set noinc  = FALSE
set incdir = ( . /usr/include )
set libdir = ( . /lib64 /usr/lib64 /lib /usr/lib )

while ($#argv > 0)
   switch ($1)
      case -f:
           set fatal = 1
           breaksw
      case -h:
           echo ""
           echo "Usage: import-api [-f] [-h] [-i] [-k] [-I<incdir>]* [-L<libdir>]* [-o <api>] <def>"
           echo "   f      make errors fatal (exit with 1 instead of 0)"
           echo "   h      this help message"
           echo "   i      do not expand dependent includes"
           echo "   k      keep prototypes file"
           echo "   I      add <incdir> to include directory list"
           echo "   L      add <libdir> to lib directory list"
           echo "   o      name of generated API file"
           echo "   <def>  api definition file"
           echo ""
           exit(1)
      case -i:
           set noinc = TRUE
           breaksw
      case -I*:
           set t = ( `echo $1 | sed 's|-I||g' | sed 's|:| |g'` )
           set incdir = ( $t $incdir )
           unset t
           breaksw
      case -k:
           set keep = TRUE
           breaksw
      case -L*:
           set t = ( `echo $1 | sed 's|-L||g' | sed 's|:| |g'` )
           set libdir = ( $t $libdir )
           unset t
           breaksw
      case -o:
           shift
           set api = $1
           breaksw
      default:
           set def = $1
           breaksw
   endsw
   shift
end

if ("$def" == "") then
   echo "No API definition file specified - exiting"
   exit($fatal)
endif
if (!(-f "$def")) then
   echo "File '$def' does not exist - exiting"
   exit($fatal)
endif

set pck = ( `grep -w package $def` )
set pck = $pck[2]
set PCK = `echo $pck | tr "[a-z]" "[A-Z]"`

if ("$api" == "") then
   set api = $pck.api
endif

set apid = $api:h
if ($apid == $api) then
   set apid = $cwd
endif

InitLog log $apid/log.$pck

# make sure that there is no API file that is empty
# an empty file may let you compile, but you will fail
# the tests or the link
# so die sooner rather than later
flog $log rm -f $api

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# find the condition for needing this API
# if we do not need it go no further

set cnd = ( `grep -w condition $def` )
if ("$cnd" != "") then
   set cnd = $cnd[2]

   flog $log set db = $devetc/cfg.db
   if (-f $db) then
      set defc = ( `grep -w $cnd $db | sed 's|=| |'` )
      Note $log "Condition $cnd = |$defc|"

# if the condition variable is not set
      if ("$defc" == "") then
         NoteD $log "   not needed '$api'"
         exit($fatal)

# if the condition variable is set to FALSE
      else if ("$defc" !~ *TRUE) then
         NoteD $log "   not needed '$api'"
         exit($fatal)
      endif
      unset defc
   else
      NoteD $log "   configuration database not found - fatal"
      exit(1)
   endif
   unset db
endif
unset cnd

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# find the header
set ok  = FALSE
set hdr = ( `grep -w header $def` )
set hdr = $hdr[2]
foreach d ($incdir)
   if (-f $d/$hdr) then
      set hdr = $d/$hdr
      set ok  = TRUE
      NoteD $log "   using header '$hdr'"
      break
   endif
end
if ($ok == FALSE) then
   NoteD $log "   no header '$hdr'"
   Note $log "   Error: '$hdr' not found in '$incdir'"
   exit($fatal)
endif

# find the shared library for a potential dynamic link
set so = ( `grep -w so $def` )
set so = $so[2]
set ok = FALSE
foreach d ($libdir)
   if (-f $d/$so) then
      set so = $d/$so
      set ok = TRUE
      NoteD $log "   have lib '$so'"
      break
   endif
end
if ($ok == FALSE) then
   Note $log "   Warning: '$so' not found in '$libdir'"
   flog $log @ nwarn = $nwarn + 1
endif

# find the archive for a potential static link
set ok  = FALSE
set arc = ( `grep -w arc $def` )
if ("$#arc" > 1) then
   set arc = $arc[2]
   foreach d ($libdir)
      if (-f $d/$arc) then
         set arc = $d/$arc
         set ok  = TRUE
         Note $log "   have lib '$arc'"
         break
      endif
   end
   if ($ok == FALSE) then
      Note $log "   Warning: '$arc' not found in '$libdir'"
#      flog $log @ nwarn = $nwarn + 2
   endif
endif
unset arc

Note $log "   generating '$api'"

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# PROCESS_PACKAGE_HEADER - make a clean list of functions, variables, and
#                        - typedefs defined by the package header
#
#   elide '{' '}' -                             remove struct bodies
#   sed 's/extern//g'                           get rid of extern
#   grep -v typedef                             get rid of typedefs
#

Separator $log

flog $log set ppf = $devinc/$hdr:t.api

Note $log "Making $ppf from $hdr"

if (-f $hdr) then
   if ($?PERDB_PATH == 0) then
      flog $log setenv PERDB_PATH /tmp/$$
      flog $log set clean = TRUE
   else
      flog $log set clean = FALSE
   endif

   Note $log "PCPP ... "

   ( pcpp -o - $hdr ; perdb cpp2=$status >& /dev/null )    |& \
   elide '{' '}' -                                         |  \
   sed 's/extern//g'                                       |  \
   grep -v typedef                                         |  \
   cat >&! $ppf

   set cpp2 = `perdb cpp2`
   set cpp1 = `perdb cpp1`
   if ($clean == TRUE) then
      flog $log perdb quit:
      flog $log rm -f ${PERDB_PATH}.*
      flog $log unsetenv PERDB_PATH
   endif
   unset clean

   if (($cpp2 != 0) || ($cpp1 != 0)) then
      Note $log "PCPP ... ng ($cpp2/$cpp1)"
      flog $log @ nerr = $nerr + 2
      flog $log rm -rf $ppf
      exit($nerr)
   else if (-z $ppf) then
      Note $log "PCPP ... ng (zero length file)"
      flog $log @ nerr = $nerr + 2
      flog $log rm -rf $ppf
      exit($nerr)
   else
      Note $log "PCPP ... ok"
      flog $log ls -l $ppf
      flog $log cat $ppf
   endif
   unset cpp2
   unset cpp1

else
   flog $log @ nerr = $nerr + 2
endif

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# FIND-FUNCTIONS - look for specified functions to bind

Separator $log

Note $log "Finding functions in '$ppf' specified in '$def'"

set fncl    = ""
set varl    = ""
set missing = ""

set fok = FALSE
set vok = FALSE
@ nl = `cat $def | wc -l`
@ il = 0
while ($il < $nl)
   @ il = $il + 1
   get_line line $def $il
   if ("$line" == "") continue
   if ("$line" =~ \#*) continue
   if ("$line" =~ *functions\ \{) then
      set fok = TRUE
      continue
   endif
   if ("$line" =~ *variables\ \{) then
      set vok = TRUE
      continue
   endif
   if ("$line" =~ *\}*) then
      set fok = FALSE
      set vok = FALSE
      continue
   endif
   if ($fok == TRUE) then
      grep -w $line $ppf >& /dev/null
      if ($status == 0) then
         Note $log "   Function '$line' found"
         set fncl = ( $fncl $line )
      else
         Note $log "   Function '$line' missing"
         set missing = ( $missing $line )
      endif

   else if ($vok == TRUE) then
      grep -w $line $ppf >& /dev/null
      if ($status == 0) then
         Note $log "   Variable '$line' found"
         set varl = ( $varl $line )
      else
         Note $log "   Variable '$line' missing"
         set missing = ( $missing $line )
      endif
   endif
end

# if none are specified take them all
if ("$fncl" == "") then
   set noglob
   @ nl = `cat $ppf | wc -l`
   @ il = 0
   while ($il < $nl)
      @ il = $il + 1
      get_line line $ppf $il
      if ("$line" == "") continue
      if ("$line" =~ \#*) continue
      if ("$line" =~ *\(*) then
         set s = ( `echo "$line" | sed 's|(.*$||' | sed 's|\*||g'`)
         if (($#s > 1) && ("$s" !~ *attribute*)) then
            set t = $s[$#s]
            Note $log "   Function '$line' add"
            set fncl = ( $fncl $t )
         endif
      endif
   end
   unset noglob
endif

if ("$varl" == "") then
   flog $log @ nv = 0
else
   flog $log @ nv = $#varl
endif

# it is an error to specify no functions
# however we must generate a dummy API
flog $log @ nf = $#fncl
if ("$fncl" == "") then
   NoteD $log "   Warning: no functions found in $ppf"
   flog $log cat $ppf
   @ nf = 0
   @ nm = 0

else if ("$missing" != "") then
   @ nm = $#missing
   if ($nm == $nf) then
      NoteD $log "   Warning: all $nm functions missing in $ppf"
      flog $log cat $ppf
   else
      set t = $hdr:t
      @ n  = $nf + $nm
      NoteD $log "   Warning: missing $nm out of $n requested functions or variables for ${t}"
      foreach f ($missing)
         NoteD $log "      $f"
      end
      unset n
      unset t
      flog $log @ nwarn = $nwarn + 4
   endif
endif
unset missing

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# MAKE-API - build the API file

Separator $log

Note $log "Making API file '$api'"

flog $log touch $api

Note $api '/*'
Note $api " * $PCK.API - define $PCK API for PACT"
Note $api ' *'
Note $api ' * #include "cpyright.h"'
Note $api ' *'
Note $api ' */'
Note $api ''
Note $api "#ifndef ${PCK}_API_PACT"
Note $api ''
Note $api "#define ${PCK}_API_PACT"
Note $api ''
Note $api '#include <'$hdr:t'>'
Note $api ''

if (($nf > 0) || ($nv > 0)) then
   Note $api "typedef struct s_${pck}_api ${pck}_api;"
   Note $api ''
   Note $api "struct s_${pck}_api"
   Note $api '   {'

   set noglob
   foreach v ($varl)
      set m = v$v
      set t = ( `grep -w $v $ppf | sed "s|$v|*$m|"` )
      Note $api "    $t"
   end
   foreach f ($fncl)
      set m = '(*f'$f')'
      set t = ( `grep -w $f $ppf | sed "s|$f|$m|"` )
      Note $api "    $t"
   end
   unset noglob

   Note $api '   };'
   Note $api ''
   Note $api "static ${pck}_api"
   Note $api " _${pck}_;"
   Note $api ''
endif

Note $api '/*--------------------------------------------------------------------------*/'
Note $api '/*--------------------------------------------------------------------------*/'
Note $api ''
Note $api "/* _${PCK}_SET_API - setup the API for ${PCK} access */"
Note $api ''
Note $api "void _${PCK}_set_api(void)"
Note $api '   {'
Note $api ''

if (($nf > 0) || ($nv > 0)) then
   set m = f$fncl[1]
   Note $api "    if (_${pck}_.$m == NULL)"

   Note $api ''
   Note $api "#ifdef ${PCK}_SO"
   Note $api ''
   Note $api '/* dynamically linked way */'
   Note $api '       {int rv;'
   Note $api ''

   Note $api "	rv = SC_so_register_func(OBJ_SO, ${PCK}_SO, "'"'${pck}'",'
   Note $api '				 NULL, NULL, NULL, NULL);'
   Note $api '	if (rv == FALSE)'
   Note $api '	   SC_error(-1, "CANNOT LOAD '${so}'");'
   Note $api ''

   foreach v ($varl)
      set m = v$v
#      Note $api "	_${pck}_.$m \t = SC_so_get(OBJ_SO, "'"'${pck}'", "'$v'");'
      PrintF $api '	_%s_.%s \t = SC_so_get(OBJ_SO, \"%s\", \"%s\");\n' $pck $m $pck $v
   end
   foreach f ($fncl)
      set m = f$f
#      Note $api "	ASSIGN_FNC(_${pck}_.$m, \t SC_so_get(OBJ_SO, "'"'${pck}'", "'$f'"));'
      PrintF $api '	ASSIGN_FNC(_%s_.%s, \t SC_so_get(OBJ_SO, \"%s\", \"%s\"));\n' $pck $m $pck $f
   end

   Note $api '       }'
   Note $api ''
   Note $api '#else'
   Note $api ''
   Note $api '/* statically linked way */'
   Note $api '       {'
   Note $api ''

   foreach v ($varl)
      set m = v$v
#      Note $api "	_${pck}_.$m \t = &$v;\n"
      PrintF $api "	_%s_.%s \t = &%s\n;" $pck $m $v
   end
   foreach f ($fncl)
      set m = f$f
#      Note $api "	_${pck}_.$m \t = $f;\n"
      PrintF $api "	_%s_.%s \t = %s;\n" $pck $m $f
   end

   Note $api '       };'
   Note $api ''
   Note $api '#endif'
   Note $api ''
endif

Note $api '    return;}'
Note $api ''
Note $api '/*--------------------------------------------------------------------------*/'
Note $api '/*--------------------------------------------------------------------------*/'
Note $api ''

if (($nf > 0) || ($nv > 0)) then
   foreach v ($varl)
      set m = v$v
#      Note $api "#define $v \t "'*('_${pck}_.$m')'
      PrintF $api "#define %s \t *(_%s_.%s)\n" $v $pck $m
   end
   foreach f ($fncl)
      set m = f$f
#      Note $api "#define $f \t _${pck}_.$m"
      PrintF $api "#define %s \t _%s_.%s\n" $f $pck $m
   end
   Note $api ''
endif

Note $api '#endif'
Note $api ''

flog $log ( cat $api | sed 's|\\t|\t|g' >&! $api.new )
flog $log mv $api.new $api
flog $log ls -l $api
flog $log cat $api

if (!(-f $api)) then
   flog $log @ nerr = $nerr + 8
endif

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# FINISH - wrap it up

Separator $log

Note $log "Finishing up"

if ($nwarn > 0) then
   NoteD $log "   completed with $nwarn warnings"
endif

if ($keep == FALSE) then
   flog $log rm -rf $ppf
endif

exit($nerr)

