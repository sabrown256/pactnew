#!/bin/csh -f
#
# SYS-SITE - define system types and sites
#

unalias *

set END   = '}'
set signf = ""

# GOTHA: OLD_DB_VARS look for old variable
if ($?SITE_SIGNATURE_DB == 1) then
   set signf = $SITE_SIGNATURE_DB
endif

if ($?DB_SITE_SIGNATURE == 1) then
   set signf = $DB_SITE_SIGNATURE
endif

set exe    = $0
set bindir = $exe:h
set path   = ( $path $bindir )

set deflt = FALSE
set osh   = csh
set vrb   = FALSE
set ucnd  = FALSE

while ($#argv > 0)
   switch ($1)
      case -csh:
           set osh = csh
           breaksw
      case -dc:
           set deflt = TRUE
           set ucnd  = FALSE
           breaksw
      case -du:
           set deflt = TRUE
           set ucnd  = TRUE
           breaksw
      case -f:
           shift
           set signf = $1
           breaksw
      case -h:
           echo ""
           echo "Usage: sys-site [-csh] [-dc] [-du] [-f <sign>] [-h] [-sh] [-v]"
           echo "   csh emit results in C shell syntax (default)"
           echo "   dc  conditionally emit default settings when no database specified"
           echo "   du  unconditionally emit default settings when no database specified"
           echo "   f   use signature file <sign>"
           echo "   h   this help message"
           echo "   sh  emit results in Bourne shell syntax"
           echo "   v   run in verbose mode"
           echo ""
           exit(1)
      case -sh:
           set osh = sh
           breaksw
      case -v:
           set vrb = TRUE
           breaksw
   endsw
   shift
end

if (-f "$signf") then

# process any variable settings into shell variables of this session
   set noglob
   set VarLst = ( `cat $signf | awk '$2 == "=" { print $1 }'` )
   set ExpLst = ( `cat $signf | awk '$2 == "=" { printf("set %s ; ", $0); }'` )

   eval "$ExpLst"
   unset noglob

   if ($vrb == TRUE) then
      foreach var ($VarLst)
         set val = `set | awk '$1 == "'$var'" { print }'`
         shift val
         echo "local:   $var = $val"
      end
   endif

   set Section = $END
   set skip    = FALSE
   set nlines  = ( `wc -l $signf` )
   @ nline = $nlines[1]
   @ iline = 0
   while ($iline < $nline)
      set noglob
      @ iline = $iline + 1
      set line = ( `head -n $iline $signf |& tail -n 1` )
      if (("$line" == "") || ("$line" =~ \#*)) continue
 
# skip all remaining tests in a section
      if (($skip == TRUE) && ("$line" != $END)) then
         continue

# recognize the end of a section and reset
      else if ("$line" == $END) then
         set Section = $END
         set skip    = FALSE

# single token line starts a section
      else if ("$line" =~ variable*:*\{) then
         set Section = $line[3]
         set skip    = FALSE
         if ($vrb == TRUE) then
            echo "line ${iline}:   determine $Section"
         endif

# do tests until one succeeds
      else if ($Section != $END) then
         set Val = $line[1]
         shift line

         set Res = FALSE

# do if test on things that match (...)
         if ("$line" =~ \(*\)) then
            eval "if $line set Res = TRUE"
            if ($vrb == TRUE) then
               echo "line ${iline}:      test $line => $Res"
            endif

# anything with TRUE succeeds
         else if (("$line" == true) || ("$line" == TRUE)) then
            set Res = TRUE

# do test on status after executing any other form
         else
            unset noglob
#            $line >& /dev/null
            eval "$line" >& /dev/null
            if ($status == 0) set Res = TRUE
            if ($vrb == TRUE) then
               echo "line ${iline}:      $line => $Res"
            endif
         endif

# if we have a TRUE result accept the value and skip the rest
         if ($Res == TRUE) then
            eval "setenv $Section $Val"
            set skip = TRUE
            if ($vrb == TRUE) then
               echo "line ${iline}:   $Section = $Val"
            endif
            if ($osh == csh) then
               echo "setenv $Section `printenv $Section` ; "
            else if ($osh == sh) then
               echo "$Section=`printenv $Section` ; export $Section ; "
            endif
         endif
      endif
   end

else if ($deflt == TRUE) then

   set lsys = `$bindir/system-id`

# unconditionally set these
   if ($ucnd == TRUE) then
      if ($osh == csh) then
         echo "setenv SYS_SITE LONER ; "
      else if ($osh == sh) then
         echo "SYS_SITE=LONER ; export SYS_SITE ; "
      endif
      if ($osh == csh) then
         echo "setenv SYS_TYPE $lsys ; "
      else if ($osh == sh) then
         echo "SYS_TYPE=$lsys ; export SYS_TYPE ; "
      endif
      if ($osh == csh) then
         echo "setenv SYS_AIRoot /usr/local ; "
      else if ($osh == sh) then
         echo "SYS_AIRoot=/usr/local ; export SYS_AIRoot ; "
      endif
      if ($osh == csh) then
         echo "setenv SYS_ASRoot /usr/share ; "
      else if ($osh == sh) then
         echo "SYS_ASRoot=/usr/share ; export SYS_ASRoot ; "
      endif

# set these only if not already set
   else
      set inf = ( `printenv SYS_SITE` )
      if ("$inf" == "") then
         if ($osh == csh) then
            echo "setenv SYS_SITE LONER ; "
         else if ($osh == sh) then
            echo "SYS_SITE=LONER ; export SYS_SITE ; "
         endif
      endif

      set inf = ( `printenv SYS_TYPE` )
      if ("$inf" == "") then
         if ($osh == csh) then
            echo "setenv SYS_TYPE $lsys ; "
         else if ($osh == sh) then
            echo "SYS_TYPE=$lsys ; export SYS_TYPE ; "
         endif
      endif

      set inf = ( `printenv SYS_AIRoot` )
      if ("$inf" == "") then
         if ($osh == csh) then
            echo "setenv SYS_AIRoot /usr/local ; "
         else if ($osh == sh) then
            echo "SYS_AIRoot=/usr/local ; export SYS_AIRoot ; "
         endif
      endif

      set inf = ( `printenv SYS_ASRoot` )
      if ("$inf" == "") then
         if ($osh == csh) then
            echo "setenv SYS_ASRoot /usr/share ; "
         else if ($osh == sh) then
            echo "SYS_ASRoot=/usr/share ; export SYS_ASRoot ; "
         endif
      endif
      unset inf
   endif

   echo "$bindir/no-op"

   unset lsys
   
endif

unset noglob

exit(0)

