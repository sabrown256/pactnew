#!/bin/csh -f
#
# CFGMAN - manage code configurations
#        - with this facility it will be possible to have
#        - multiple versions of the codes configured from a
#        - single source on a single platform.
#        - this represents an improvement over the uname
#        - based schemes which permitted only a single configuration
#        - per architecture
#
#        - configuration management is achieved by the following
#        - operations:
#        -
#        -   add    - add a configuration to the managed database
#        -   delete - remove a configuration to the managed database
#        -   use    - return the effective config designation for builds
#        -   list   - return all configurations  for the current architecture
#
# Source Version: 3.0
# Software Release #: LLNL-CODE-422942
#
# include "cpyright.h"
#

unalias *

set Cmnd = $0
if ("$Cmnd" == "") then
   echo "CFGMAN: bad invocation"
   exit(110)
endif

# NOTE: this insanity is because under high system loads
# dirname has returned an empty string which cannot be tolerated
@ count = 1
while (1)
   set ExeRoot = `dirname $Cmnd`
   if ("$ExeRoot" != "") break
   if ($count >= 10) then
      echo "CFGMAN: dirname returned null"
      exit(111)
   endif
   @ count = $count + 1
   sleep 1
end

set path     = ( $ExeRoot /usr/bin /bin )
set sys_arch = `system-id`

set SGN   = .pc
set ret   = 0
set dbdir = ""
set Tgt   = ""
while ($#argv > 0)
   switch ($1)
      case -d:
           shift
           set dbdir = $1
           breaksw
      case -h:
           echo ""
           echo "Usage: cfgman [-d <dir>] [-h]"
           echo "              add <cfg> | delete <cfg> | list | reconst <host> [<arch>] | use"
           echo ""
           echo "  d    directory where database lives"
           echo "  h    this help message"
           echo ""
           echo "  add      add a configuration to the data base"
           echo "  delete   remove a configuration from the data base"
           echo "  list     list the available configurations for the"
           echo "           current real architecture"
           echo "  reconst  reconstitute the database from a host file"
           echo "           takes host file and architecture"
           echo "  use      return the effective architecture name derived"
           echo "           from the current selected configuration"
           echo ""
           exit(1)
           breaksw
      case -to:
           shift
           breaksw
      case -*:
           breaksw
      default:
           set Tgt = $1
           shift
           break
           breaksw
   endsw
   shift
end

# clear DB_CFGMAN if it is not a directory
if ($?DB_CFGMAN == 1) then
   if (!(-d "$DB_CFGMAN")) then
      unsetenv DB_CFGMAN
   endif
endif

# settle on the root database directory
set DB = ""
if ("$dbdir" != "") then
   set DB = $dbdir
else if ($?DB_CFGMAN == 1) then
   set DB = $DB_CFGMAN
else
   set lwd = $cwd
   @ nd = 10
   @ i  = 0
   while ($i < $nd)
      if (-d dev) then
         set DB = $cwd/dev
         break
      endif
      cd .. >& /dev/null
      @ i = $i + 1
   end
   cd $lwd
   unset lwd
endif

if ("$DB" == "") then
   echo "CFGMAN: no database directory found"
   exit(112)
else
   set DB = $DB/$SGN-$sys_arch
   if (!(-d $DB)) then
      mkdir -p $DB
      chmod 2770 $DB >& /dev/null
   endif

# make full expanded path name for DB
   pushd $DB >& /dev/null
   set DB = $cwd
   popd >& /dev/null
endif

# make the most common usage as fast as possible
# also if SESSION_CONFIG is set do NOT change the database at all
# this will virtually eliminate corruption of the database as
# well as speeding things up
# if you need to change the database you MUST unset SESSION_CONFIG

if ($?SESSION_CONFIG == 1) then
   if ("$SESSION_CONFIG" == "") then
      echo "CFGMAN: SESSION_CONFIG is null"
      exit(113)
   else
      if ($Tgt == add) then
         set i = $DB/$SESSION_CONFIG
         touch $i
         chmod 660 $i >& /dev/null
      endif
      echo $SESSION_CONFIG
      exit(0)
   endif
endif

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# READ_DB - read the existing database

onintr INTERRUPT

# all subsequent work to be done in database directory
   pushd $DB >& /dev/null

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

switch ($Tgt)

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# ADD - add the specified config or make it first on the current host

   case add:
        set ent = $1

        set lst = ( `ls -1` )

# if no entries add it
        if (("$lst" == "") || ("$lst" == current)) then
           touch $ent
           chmod 660 $ent >& /dev/null
           rm -f current >& /dev/null
           ln -s $ent current

# check everybody on the current list
        else
           set lok = FALSE
           foreach i ($lst)
              if ($i == current) continue

              if ("$i" == "$ent") then
                 set lok = TRUE
                 break
              endif
           end
           if ($lok == FALSE) then
              touch $ent
           endif
           chmod 660 $ent >& /dev/null
           rm -f current >& /dev/null
           ln -s $ent current

           unset lok
           unset ent
        endif

        goto USE
        breaksw

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# DELETE - remove the specified config on the current host

   case delete:
        set ent = $1
        if ($ent != all) then

# check everybody on the current list
           foreach i (`ls -1`)
              if ($i == current) continue

              set sid = $i

              if (("$ent" == "$i") || ("$ent" == "$sid")) then
                 ls -l current |& grep $i >& /dev/null
                 if ($status == 0) then
                    rm -f current >& /dev/null
                 endif
                 rm -f $i >& /dev/null
              endif
           end
           unset sid
        endif
        unset ent

        breaksw

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# LIST - list all configs for the current host

   case list:
        ls -1 |& grep -v current | awk '{printf("   %s\n", $0);}'
        breaksw

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# RECONST - reconstitute the database from a host file

   case reconst:
        set hf = $1
        if ($#argv > 1) then
           set lsys_arch = $2
        else
           set lsys_arch = `system-id`
        endif

# remove old entries
        rm -f * >& /dev/null

# find the proper entries in the host file
	set lst = ( `grep $lsys_arch $hf | grep host | awk '{print $6}'` )
        foreach i ($lst)
           set j = ( `echo $i | sed 's|^.*@||'` )
           if ("$j" != "") then
              touch $j
              chmod 660 $j >& /dev/null
           endif
        end

# first entry is defined to be current
        set j = ( `echo $lst[1] | sed 's|^.*@||'` )
        if ("$j" != "") then
           ln -s $j current
        endif

	unset lsys_arch

        breaksw

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# USE - return the correct name for the current config on the current host

   case use:
        goto USE

        breaksw

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

   default:
        echo "CFGMAN: Unknown operation $1"
        set ret = 1
        breaksw
endsw

INTERRUPT:

exit($ret)

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# USE - report the current configuration

USE:
   if ($?SESSION_CONFIG == 1) then
      set use = $SESSION_CONFIG
   else
      set use = "$sys_arch"
      if (-e current) then
         set inf = ( `ls -l current` )
         if ("$inf" != "") then
            set use = "$inf[$#inf]"
         endif
         unset inf
      endif
   endif
   echo "$use"
   unset use

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

exit($ret)

