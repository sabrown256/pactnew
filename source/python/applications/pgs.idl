//
// Source Version: 9.0
// Software Release #: LLNL-CODE-422942
//
// include cpyright.h
//

module pgs
    lang python {
        name='_pgs', abbrev='PP';
        output_dir='..';
        file_per_class=1;
        write_header=1;
        includes=['<pgs.h>', '<pputil.h>', '"utilpgs.h"'];
        prolog = [
            "Source Version: 9.0",
            "Software Release: LLNL-CODE-422942",
            "",
            "include cpyright.h"
            ];
    }
    {

    lang C { prefix=''; }

    const int LINE_SOLID         =  1;
    const int LINE_DASHED        =  2;
    const int LINE_DOTTED        =  3;
    const int LINE_DOTDASHED     =  4;

    const int AXIS_LINESTYLE     =  1;
    const int AXIS_LINETHICK     =  2;
    const int AXIS_LINECOLOR     =  3;
    const int AXIS_LABELCOLOR    =  4;
    const int AXIS_LABELSIZE     =  5;
    const int AXIS_LABELFONT     =  6;
    const int AXIS_LABELPREC     =  7;
    const int AXIS_X_FORMAT      =  8;
    const int AXIS_Y_FORMAT      =  9;
    const int AXIS_TICKSIZE      = 10;
    const int AXIS_GRID_ON       = 11;
    const int AXIS_SIGNIF_DIGIT  = 12;
    const int AXIS_CHAR_ANGLE    = 13;

//    const int MAJOR                  = '\001';
//    const int MINOR                  = '\002';
//    const int LABEL                  = '\003';
//    const int MAJOR_MINOR            = '\004';
//    const int MAJOR_LABEL            = '\005';
//    const int MINOR_LABEL            = '\006';
//    const int MAJOR_MINOR_LABEL      = '\007';
//    const int NO_TICKS               = '\010';

//    const int RIGHT_OF_AXIS          = '\011';
//    const int LEFT_OF_AXIS           = '\012';
//    const int STRADDLE_AXIS          = '\013';
//    const int ENDS                   = '\014';
//    const int NOTHING_ON_AXIS        = '\015';

    const int GRID_LINESTYLE     =  1;
    const int GRID_LINETHICK     =  2;
    const int GRID_LINECOLOR     =  3;
    const int GRID_LABELCOLOR    =  4;
    const int GRID_LABELSIZE     =  5;
    const int GRID_LABELFONT     =  6;
    const int GRID_LABELPREC     =  7;
    const int GRID_XFORMAT       =  8;
    const int GRID_YFORMAT       =  9;
    const int GRID_TICKPOSITION  = 10;
    const int GRID_TICKSIZE      = 11;
    const int GRID_TICKTYPE      = 12;
    const int GRID_SIGNIF_DIGIT  = 13;

    const int VEC_SCALE          =  1;
    const int VEC_ANGLE          =  2;
    const int VEC_HEADSIZE       =  3;
    const int VEC_FIXSIZE        =  4;
    const int VEC_MAXSIZE        =  5;
    const int VEC_LINESTYLE      =  6;
    const int VEC_LINETHICK      =  7;
    const int VEC_COLOR          =  8;
    const int VEC_FIXHEAD        =  9;

//    const int CLEAR_SCREEN       = -5;
//    const int CLEAR_VIEWPORT     = -6;
//    const int CLEAR_FRAME        = -7;

    const int NOTICKS            =  0;
    const int INSIDE             =  1;
    const int OUTSIDE            =  2;
//    const int INOUT              =  3;
    const int TICKTICK           =  1;
    const int LINELINE           =  2;
    const int TICKLINE           =  3;
    const int LINETICK           =  4;

    const int CARTESIAN          = -1;
    const int POLAR              = -2;
    const int INSEL              = -3;
    const int HISTOGRAM          = -4;
    const int SCATTER            = -5;
    const int LOGICAL            = -6;
    const int ERROR_BAR          = -7;
    const int CARTESIAN_3D       = -8;
   
//     const int PG_TEXT           =  1
//     const int PG_FILL           =  2
//     const int PG_LINE           =  3
//     const int PG_NOPRIM         = -1


    const int PLOT_CURVE       =  10;
    const int PLOT_CONTOUR     =  11;
    const int PLOT_IMAGE       =  12;
    const int PLOT_WIRE_MESH   =  13;
    const int PLOT_SURFACE     =  14;
    const int PLOT_VECTOR      =  15;
    const int PLOT_FILL_POLY   =  16;
    const int PLOT_MESH        =  17;
    const int PLOT_ERROR_BAR   =  18;
    const int PLOT_SCATTER     =  19;
    const int PLOT_DV_BND      =  20;
    const int PLOT_DEFAULT     =  21;

    const int STICK            = 0;
    const int SOLID            = 1;

//    typedef float REAL;
//
//    typedef sequence<REAL> rarray
//        lang C {ignore;}
//        lang python {extractor=REAL_array_extractor;}
//    ;
//    typedef sequence<double> darray
//        lang C {ignore;}
//        lang python {extractor=darray_extractor;}
//    ;
//    typedef sequence<int> iarray
//        lang C {ignore;}
//        lang python {extractor=iarray_extractor;}
//    ;
//
//    // This kludge allows NULL as a pointer
//    typedef sequence<void> voidptr
//        lang C {ignore;}
//        lang python {py_format=z;};

    // Deals with 'unsigned char *'
    typedef sequence<void> buffer
        lang C {type="unsigned char *";}
    lang python {extractor=PP_buffer_extractor;};
    
    lang C { prefix=PG_; }

    class palette
        lang C { object_index=0, object_name=pal; }
        lang python { member_name=pal,
                      extractor=palette_extractor,
                      getter='PPpalette_from_ptr(%s)'; }
        {
        readonly attribute string name;
        readonly attribute int max_pal_dims;        // number of different palette shapes
//        readonly attribute int **pal_dims;        // shapes for 1, 2, ... dimensional palettes
        readonly attribute int n_pal_colors;
        readonly attribute int n_dev_colors;
        readonly attribute REAL max_red_intensity;
        readonly attribute REAL max_green_intensity;
        readonly attribute REAL max_blue_intensity;
//        readonly attribute RGB_color_map *pseudo_colormap;
//        readonly attribute RGB_color_map *true_colormap;
//        readonly attribute unsigned long *pixel_value;
        readonly attribute palette next;

//        palette make(string name, int nc)
//            lang C {name=mk_palette, ctor; };
    }

    
    class graph
        lang C { object_index=0, object_name=data; }
        lang python { member_name=data,
                      getter='PPgraph_from_ptr(%s)',
                      dealloc; }
        {
        readonly attribute int rendering;
        readonly attribute int mesh;
        readonly attribute string info_type;
//        readonly attribute voidptr info;
        attribute assoc info;
        readonly attribute int identifier;
        readonly attribute string use;
//        readonly attribute graph next;

    }

//  Some factory functions to make graphs (gsmm.c)

    graph make_graph_1d(in int id, in string label, in int cp,
                        in int n, in rarray x, in rarray y,
                        in string xname, in string yname);

    graph make_graph_r2_r1(in int id, in string label, in int cp, in int imx, in int jmx,
                           in int centering, in rarray x, in rarray y,
                           in rarray r, in string dname, in string rname);
    
//    graph make_graph_r3_r1(int id, string label, int cp,
//                           int imx, int jmx, int kmx, int centering,
//                           REAL *x, REAL *y, REAL *z, REAL *r,
//                           string dname, string rname);
//    graph make_graph_from_sets(string name, PM_set *domain, PM_set *range,
//                               int centering, string info_type, void *info,
//                               int id, graph next);
//    graph make_graph_from_mapping(PM_mapping *f, string  info_type, void *info,
//                                  int id, graph next);

    assoc set_line_info(in assoc info, in int type, in int axis_type, in int style,
			in int scatter, in int marker, in int color, in int start,
			in double width);

    assoc set_tds_info(in assoc info, in int type, in int axis_type, in int style,
		       in int color, in int nlev, in double ratio, in double width,
		       in double theta, in double phi, in double chi, in double d);

    assoc set_tdv_info(in assoc info, in int type, in int axis_type,
		       in int style, in int color, in double width);

    class image
        lang C { object_index=0, object_name=im; }
        lang python { member_name=im,
                      getter='PPimage_from_ptr(%s)',
                      dealloc; }
        {
        readonly attribute int version_id;    // version id in case of change see PG_IMAGE_VERSION
        readonly attribute string label;
        readonly attribute double xmin;
        readonly attribute double xmax;
        readonly attribute double ymin;
        readonly attribute double ymax;
        readonly attribute double zmin;
        readonly attribute double zmax;
        readonly attribute string element_type;
        readonly attribute buffer buffer;
        readonly attribute int kmax;
        readonly attribute int lmax;
        readonly attribute long size;
        readonly attribute int bits_pixel;
        readonly attribute palette palette;
    }
    

    image make_image(in string label, in string type,
                     in buffer z,
                     in double xmn, in double xmx, in double ymn, in double ymx,
                     in double zmn, in double zmx,
                     in int k, in int l, in int bits_pix,
                     in palette palette);
    

    class device
        lang C { object_index=0, object_name=dev; }
        lang python { member_name=dev; }
        {
        readonly attribute string name;
        readonly attribute string title;
        readonly attribute string type;

        // 16 standard colors
        readonly attribute int BLACK;
        readonly attribute int WHITE;
        readonly attribute int GRAY;
        readonly attribute int DARK_GRAY;
        readonly attribute int BLUE;
        readonly attribute int GREEN;
        readonly attribute int CYAN;
        readonly attribute int RED;
        readonly attribute int MAGENTA;
        readonly attribute int BROWN;
        readonly attribute int DARK_BLUE;
        readonly attribute int DARK_GREEN;
        readonly attribute int DARK_CYAN;
        readonly attribute int DARK_RED;
        readonly attribute int YELLOW;
        readonly attribute int DARK_MAGENTA;

        void make_device(
            in string name,
            in string type,
            in string title)
            lang C { ctor; }
            ;
    
//        void query_pointer(int px, int py, int pb, int pq);
//    void (*query_pointer)(PG_device *dev, int *px, int *py, int *pb, int *pq);

//    void (*clear_page)(PG_device *dev, int i);
          void clear_window();
//    void (*clear_viewport)(PG_device *dev);
//    void (*clear_region_NDC)(PG_device *dev, double xmn, double xmx,
//			     double ymn, double ymx, int pad);
//    void (*close_console)(void);
        void close()
            lang C {name=PG_close_device;};
//    void (*draw_dj_polyln_2)(PG_device *dev, REAL *x, REAL *y, long n,
//			     int flag, int coord);
//    void (*draw_curve)(PG_device *dev, PG_curve *crv, int clip);
//    void (*draw_to_abs)(PG_device *dev, double x, double y);
//    void (*draw_to_rel)(PG_device *dev, double x, double y);
//    void (*expose_device)(PG_device *dev);
        void finish_plot();
//    int (*get_char)(PG_device *dev);
//    void (*get_image)(PG_device *dev, unsigned char *bf, int ix, int iy,
//		      int nx, int ny);
//    void (*get_text_ext_NDC)(PG_device *dev, char *s, REAL *px, REAL *py);
//    PFfgets ggets;
//    void (*gputs)(char *bf);
//    void (*set_bound)(PG_device *dev, double xmn, double xmx,
//		      double ymn, double ymx);
//    void (*set_clipping)(PG_device *dev, int flag);
//    void (*set_char_line)(PG_device *dev, int n);
        void set_char_path(in double x, in double y);
//    void (*set_char_precision)(PG_device *dev, int p);
//    void (*set_char_space)(PG_device *dev, double s);
//    void (*set_char_size_NDC)(PG_device *dev, double x, double y);
//    void (*set_char_up)(PG_device *dev, double x, double y);
//    void (*set_fill_color)(PG_device *dev, int color, int mapped);
        int set_font(in string face, in string style, in int size);
        void set_color_line(in int color, in int mapped);
        void set_line_style(in int style);
        void set_line_width(in double width);
//    void (*set_logical_op)(PG_device *dev, int lop);
// in header        void set_text_color(in int color, in int mapped);
//    void (*shade_poly)(PG_device *dev, REAL *x, REAL *y, int n);
//    void (*fill_curve)(PG_device *dev, PG_curve *crv);
//    void (*make_device_current)(PG_device *dev);
//    void (*map_to_color_table)(PG_device *dev, PG_palette *pal);
//    void (*match_rgb_colors)(PG_device *dev, PG_palette *pal);
//    void (*move_gr_abs)(PG_device *dev, double x, double y);
//    void (*move_tx_abs)(PG_device *dev, double x, double y);
//    void (*move_tx_rel)(PG_device *dev, double x, double y);
//    void (*next_line)(PG_device *dev);
//    PG_device *(*open_screen)(PG_device *dev, double xf, double yf,
//			      double dxf, double dyf);
//    void (*put_image)(PG_device *dev, unsigned char *bf, int ix, int iy,
//		      int nx, int ny);
//    void (*query_screen)(PG_device *dev, int *pdx, int *pdy, int *pnc);
//    void (*release_current_device)(PG_device *dev);
        void update_vs();
//    void (*write_text)(PG_device *dev, FILE *fp, char *s);


        // pgs.h
        void set_line_color(in int color);
        void set_text_color(in int color);
        void set_color_text(in int color, in int mapped);

        void turn_data_id(in int t);
        
        // gspr.c
        void set_viewport(in double x1, in double x2, in double y1, in double y2);
        void set_window(in double xmn, in double xmx, in double ymn, in double ymx);
        void draw_box(in double xmin, in double xmax, in double ymin, in double ymax);
        void get_text_ext(in string s, out REAL x, out REAL y);
        void draw_line(in double x1, in double y1, in double x2, in double y2);

        // gsdv.c
        // varargs
        int write_WC(in double x, in double y);
        
        void open(in double xf, in double yf, in double dxf, in double dyf)
            lang C {name=PG_open_device;};

        palette set_palette(in string name);

        void draw_graph(in graph data);

        void draw_image(in image im, in string label, in voidptr alist);

        // uses varargs
        void contour_plot(in graph data);
                           
        // uses varargs
        void poly_fill_plot(in graph data);

        void draw_surface(in rarray a1, in rarray a2, in rarray extr,
                          in rarray x, in rarray y, in int nn,
                          in double xmn, in double xmx, in double ymn, in double ymx,
                          in double theta, in double phi, in double chi, in double width,
                          in int color, in int style, in int type,
                          in string name, in string mesh_type, in iarray cnnct, in assoc alist);
//                          in string name, in string mesh_type, in voidptr cnnct, in assoc alist);

        void draw_picture(in mapping f,
                          in int ptyp, in int bndp, in int cbnd, in int sbnd,
                          in double wbnd, in int mshp, in int cmsh, in int smsh,
                          in double wmsh);


        }


    int get_processor_number();
    int get_number_processors();

    void iso_limit(in rarray a, in int npts,
                   out REAL min, out REAL max);

}

