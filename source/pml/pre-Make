#
# pre-Makefile for Portable Math Library
#
# Files and Directories
#
# Source Version: 3.0
# Software Release #: LLNL-CODE-422942
#
# include "cpyright.h"
#

LibName=pml

TGTLib = ${LibDir}/lib${LibName}.a
TGTInc = ${Hdrs}

OD = DefaultO

#
# Compiler/Loader Options
#
UniFlags =
CcFlags = ${ODC} -I${IncDir} ${MDInc}
FcFlags =
LdFlags = -L${LibDir} ${LDFLAGS}

CCAnnounce = ${CCompiler} ${ODC} ${Shared_CC_Flags} ${CFLAGS}

CXX = ${CC_Exe} ${CcFlags}

#
# Files to Save for Backup (pact save)
#
SaveFiles = *.c *.h

#
# Files to remove in directory clean (pact clean)
#
CleanFiles = 

#
# Things upon which install depends (pact install)
#
InstallDep = ${TGTLib} ${BinDir}/tmlcsm
BinDep =
BinObj =

#
# Required Libraries
#
Libs = ${LPML} ${LSCORE} ${MDLib}

targets :
	@echo "Targets for PML"
	@echo "   cgsolv    : make sparse linear CG solvers test"
	@echo "   checksum  : make checksum routines test"
	@echo "   eigen     : make eigen systems tests"
	@echo "   fpe       : make FPE tests"
	@echo "   funcs     : make functions test"
	@echo "   icsolv    : make matrix ICG solvers test"
	@echo "   install   : install PML headers and utilities in dev/arch"
	@echo "   interp    : make interpolation test"
	@echo "   link      : link PML utilities for public use"
	@echo "   lnnorm    : make ln norm test"
	@echo "   lrac      : make LR to AC mapping test"
	@echo "   matrix    : make matrix tests"
	@echo "   perf      : test arithmetic performance"
	@echo "   sharedlib : build and install PML shared libs in dev/arch"
	@echo "   svdsolv   : make SVD solvers test"
	@echo "   topsort   : make topological sort test"
	@echo "   test      : run the PML test suite"

#
# Headers Files
#
Hdrs = pml.h pml_int.h scope_constants.h scope_complex.h scope_quaternion.h

#
# Object Files
#
Objs = mlconst.o mlmath.o mlsrch.o mlrand.o mlnls.o mlmatr.o      \
       mlrfnc.o mlcfnc.o mlsfnc.o mlqfnc.o                        \
       mlsolv.o mlsvd.o mlvnd.o mleigen.o                         \
       mlcg.o mliccg.o mlicgs.o                                   \
       mlfft.o mllsq.o mlfpe.o mloper.o mlgeom.o mlsort.o mlmm.o  \
       mlintm.o mlintp.o mlints.o                                 \
       mlchksm.o mlmesh.o mlmsrch.o mlcmsh.o mlmextr.o            \
       mlvect.o mlsmp.o 

ArObjs = ${TGTLib}(mlconst.o) ${TGTLib}(mlmath.o)                       \
         ${TGTLib}(mlrfnc.o)  ${TGTLib}(mlcfnc.o)                       \
         ${TGTLib}(mlqfnc.o)  ${TGTLib}(mlsfnc.o)                       \
         ${TGTLib}(mlmatr.o)  ${TGTLib}(mlsort.o)  ${TGTLib}(mlnls.o)   \
         ${TGTLib}(mlsolv.o)  ${TGTLib}(mlsvd.o)   ${TGTLib}(mlvnd.o)   \
         ${TGTLib}(mlcg.o)    ${TGTLib}(mliccg.o)  ${TGTLib}(mlicgs.o)  \
         ${TGTLib}(mleigen.o) ${TGTLib}(mlsrch.o)  ${TGTLib}(mlfft.o)   \
         ${TGTLib}(mlintm.o)  ${TGTLib}(mlintp.o)  ${TGTLib}(mlints.o)  \
         ${TGTLib}(mllsq.o)   ${TGTLib}(mlfpe.o)   ${TGTLib}(mloper.o)  \
	 ${TGTLib}(mlgeom.o)  ${TGTLib}(mlrand.o)  ${TGTLib}(mlmm.o)    \
         ${TGTLib}(mlmesh.o)  ${TGTLib}(mlmsrch.o) ${TGTLib}(mlcmsh.o)  \
         ${TGTLib}(mlmextr.o) ${TGTLib}(mlchksm.o)                      \
         ${TGTLib}(mlvect.o)  ${TGTLib}(mlsmp.o)

${LibDep} : ${hdrf} ${Hdrs}

#
# Generated code rules
#

# headers

${IncDir}/mlsrch.h : mlsrch.t
	@(echo "template mlsrch.t -o ${IncDir}/mlsrch.h" ;  \
	  ${BinDir}/template mlsrch.t -o ${IncDir}/mlsrch.h)

hdrf = ${IncDir}/mlsrch.h

IncAction = @pact generate


# extra commands needed when building TGTLib
LibAction = pact patch-fpe

#
# verify C++ compiles
#
chk++ :
	${CXX} -c tests/chk++.cc -o ${PACTTmpDir}/chk++.o

#
# make new test executable
#
matrix : ${BinDir}/tmlmtx

${BinDir}/tmlmtx : tmlmtx.c ${TGTLib}
	${CLD} ${LdFlags} tmlmtx.c -o ${BinDir}/tmlmtx ${Libs}

#
# test functions
#
funcs : ${BinDir}/tmlfn

${BinDir}/tmlfn : tmlfn.c ${TGTLib}
	${CLD} ${LdFlags} tmlfn.c -o ${BinDir}/tmlfn ${Libs}

#
# test LR to AC mapping
#
lrac : ${BinDir}/tmlac

${BinDir}/tmlac : tmlac.c ${TGTLib}
	${CLD} ${LdFlags} tmlac.c -o ${BinDir}/tmlac ${Libs}

#
# test topological sort
#
topsort : ${BinDir}/tmlstp

${BinDir}/tmlstp : tmlstp.c ${TGTLib}
	${CLD} ${LdFlags} tmlstp.c -o ${BinDir}/tmlstp ${Libs}

#
# test matrix ICG solvers
#
icsolv : ${BinDir}/tmlic ${BinDir}/tmlics ${BinDir}/tmlcg

${BinDir}/tmlic : tmlic.c ${TGTLib}
	${CLD} ${LdFlags} tmlic.c -o ${BinDir}/tmlic ${Libs}

${BinDir}/tmlics : tmlics.c ${TGTLib}
	${CLD} ${LdFlags} tmlics.c -o ${BinDir}/tmlics ${Libs}

#
# test sparse linear CG solvers
#
cgsolv : ${BinDir}/tmlcg

${BinDir}/tmlcg : tmlcg.c ${TGTLib}
	${CLD} ${LdFlags} tmlcg.c -o ${BinDir}/tmlcg ${Libs}

#
# test SVD solvers
#
svdsolv : ${BinDir}/tmlsvd

${BinDir}/tmlsvd : tmlsvd.c ${TGTLib}
	${CLD} ${LdFlags} tmlsvd.c -o ${BinDir}/tmlsvd ${Libs}

#
# test EIGEN systems
#
eigen : ${BinDir}/tmlev

${BinDir}/tmlev : tmlev.c ${TGTLib}
	${CLD} ${LdFlags} tmlev.c -o ${BinDir}/tmlev ${Libs}

#
# test polygon intersection
#
ipoly : ${BinDir}/tmlip

${BinDir}/tmlip : tmlip.c ${TGTLib}
	${CLD} ${LdFlags} tmlip.c -o ${BinDir}/tmlip ${Libs}

#
# test interpolation
#
interp : ${BinDir}/tmli

${BinDir}/tmli : tmli.c ${TGTLib}
	${CLD} ${LdFlags} tmli.c -o ${BinDir}/tmli ${Libs}

#
# test ln norm
#
lnnorm : ${BinDir}/tmllnnm

${BinDir}/tmllnnm : tmllnnm.c ${TGTLib}
	${CLD} ${LdFlags} tmllnnm.c -o ${BinDir}/tmllnnm ${Libs}

#
# test checksum routines
#
checksum : ${BinDir}/tmlck ${BinDir}/tmlcsm

${BinDir}/tmlck : tmlck.c ${TGTLib}
	${CLD} ${LdFlags} tmlck.c -o ${BinDir}/tmlck ${Libs}

${BinDir}/tmlcsm : tmlcsm.c ${TGTLib}
	${CLD} ${LdFlags} tmlcsm.c -o ${BinDir}/tmlcsm ${Libs}

#
# test FPE
#
fpe : ${BinDir}/tmlfpe ${BinDir}/tmlnan

${BinDir}/tmlfpe : tmlfpe.c ${TGTLib}
	${CLD} ${LdFlags} tmlfpe.c -o ${BinDir}/tmlfpe ${Libs}

${BinDir}/tmlnan : tmlnan.c ${TGTLib}
	${CC} -c tmlnan.c -o ${PACTTmpDir}/tmlnan.o
	${CLD} ${LdFlags} ${PACTTmpDir}/tmlnan.o -o ${BinDir}/tmlnan ${Libs}

#
# test performance
#
perf : ${BinDir}/tmlpf ${BinDir}/tmlnan

${BinDir}/tmlpf : tmlpf.c ${TGTLib}
	${CLD} ${LdFlags} tmlpf.c -o ${BinDir}/tmlpf ${Libs}

#
# link 
#
link: ${InstallDep}
	pact man3install

#
# install 
#
install:
	pact link
	pact incinstall

#
# sharedlib
#
sharedlib:
	pact shared
	pact incinstall

#
# inform
#
inform :
	@rm -f required.objs
	@echo ${Objs} > required.objs

#
# Run the PML test suite
#
test :
	@./mltest

