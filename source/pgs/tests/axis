#!/bin/csh -f
#
# AXIS - PGS log axis tests
#
# Source Version: 3.0
# Software Release #: LLNL-CODE-422942
#
# include "cpyright.h"
#

source ../../tests/common

set DDir = $RootDir/pgs/tests

set Replace = FALSE

Note $Log "Args = $argv"

while ($#argv > 0)
   switch ($1)
      case -r:
           set Replace = TRUE
           breaksw
   endsw
   shift
end

#--------------------------------------------------------------------------

#                           PGS AXIS TEST

#--------------------------------------------------------------------------

   Separator $Log

   set msg = "PGS Axis Test .......... "
   set rpf = "none"
   set exe = $BinDir/gslaxt

   NoteD $Log ""
   NoteD $Log -n "                    $msg"
   Note $Log ""

   flog $Log pushd $SrcDir
   flog $Log $MAKE axis
   set xstatus = $status
   flog $Log popd

   if ($xstatus != 0) then
      NoteD $Log ""
      NoteD $Log "                         Can't build PGS Log Axis Test Program"
      NoteD $Log "                    PGS Axis Test .......... FAILED (-1)"
      set Err = 1
   else
      flog $Log rm -f gslax*.res gslax*.ps
      flog $Log cp $SrcDir/tests/gslax*.dat .

      @ nerr  = 0
      @ nomit = 0
      set first = TRUE

      foreach o (lin log)
         switch ($o)
            case lin:
                 set opt = ( -l )
                 breaksw
            case log:
                 set opt = ""
                 breaksw
         endsw

         foreach i (gslax*.dat)
            if ($OS =~ CYGWIN*) then
               if ($i == gslax4.dat) continue
            endif
            Separator $Log
            Note $Log "Test $i ($o)"
            flog $Log set bs = $i:r
            flog $Log set ob = $bs.$o
            if ("$Valgrind" == "") then

               flog $Log ( $CFE $exe $opt -s $DDir/$i | sed 's|e-00|e+00|g' > $ob.res )
               set xstatus = $status
               if (($xstatus == 254) || ($xstatus == 255)) then
                  @ nomit = $nomit + 1
               else if ($xstatus == 0) then
                  flog $Log mv $bs.ps $ob.ps

# update fiducials
                  if ($Replace == TRUE) then
                     if ($first == TRUE) then
                        set first = FALSE
                        NoteD $Log ""
                     endif
                     flog $Log cp $ob.res $RefDir/$ob
                     flog $Log cp $ob.ps $RefDir/$ob.ps
                     NoteD $Log "                       $ob fiducials replaced"
                  endif

# check against fiducials
                  if (-f $RefDir/$ob.ps) then
                     flog $Log ( $CFE $PSDIFF -tp 2 $ob.ps $RefDir/$ob.ps > $ob.ps.diff )
                     set dstatus = $status
                     if (-z $ob.ps.diff) then
                        flog $Log rm $ob.ps.diff
                     endif
                  else
                     flog $Log mv $ob.ps $RefDir/$ob.ps
                     NoteD $Log "Adding $ob.ps fiducial to $RefDir - rerun"
                     set dstatus = 0
                  endif

                  flog $Log set ResFile = ""
                  if (-f $RefDir/$ob) then

# since the axis tests probe regions where roundoff can effect
# the floating point results
# only compare the numerical text output if the picture differs
# the picture is what we really care about
                     if ($dstatus != 0) then
                        flog $Log ( diff $ob.res $RefDir/$ob > $ob.res.diff )
                        if (-z $ob.res.diff) then
                           flog $Log rm $ob.res.diff
                        else
                           flog $Log set ResFile = "$ob.res.diff"
                        endif
                     endif

# first time add results as fiducials
                  else
                     flog $Log mv $ob.res $RefDir/$ob
                     NoteD $Log "Adding $ob.res fiducial to $RefDir - rerun"
                  endif

                  Note $Log "Status results: |$ResFile| |$dstatus|"

                  if (($dstatus == 254) || ($dstatus == 255)) then
                     @ nomit = $nomit + 1
                  else if ("$ResFile" != "") then
                     flog $Log set xstatus = results
                     @ nerr = $nerr + 1
                  else if ($dstatus != 0) then
                     flog $Log set xstatus = plots
                     @ nerr = $nerr + 1
                  else
                     flog $Log set xstatus = 0
                     flog $Log rm -f $ob*
                  endif
               endif
            else
               ftee $Log $Valgrind $exe $opt -s $RootDir/pgs/$i     |& \
               grep "ERROR SUMMARY:"                                |& \
               awk '{ print $4 }'   >&! $Tmp
               set xstatus = `cat $Tmp`
               set rpf     = ( $rpf $Tmp )
            endif
         end
      end

      Note $Log ""

      if ($nomit > 0) then
         set xstatus = 255
      else if ($nerr > 0) then
         set xstatus = $nerr
      else
         set xstatus = 0
      endif

      set rpf = ( $rpf gslax*.dat gslax*.ps gslax*.res gslax*.diff )

   endif

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

$TEST_CHECK part -a axis -e $Err -x $exe -rpf "$rpf" none

exit($status)
