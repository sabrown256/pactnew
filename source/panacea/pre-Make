#
# pre-Make for PANACEA
#
# Source Version: 3.0
# Software Release #: LLNL-CODE-422942
#
# include "cpyright.h"
#

LibName=panacea

TGTLib = ${LibDir}/lib${LibName}.a
TGTExe = ${BinDir}/toul
TGTInc = panace.h panacea_int.h f77std.h

TGTScm = applications/panache.scm applications/panabgc.scm applications/panagc.scm \
         applications/panbgc.scm applications/panpgc.scm applications/panint.scm

TGTScr = applications/panache

OD = DefaultG

#
# Compiler/Loader Options
#
UniFlags =
CcFlags  = ${ODC} -I${IncDir} ${MDInc} ${MDGInc}
FcFlags  =
LdFlags  = -L${LibDir} ${LDFLAGS}

CCAnnounce = ${CCompiler} ${ODC} ${CShared} ${CFLAGS}

#
# Files to Save for Backup (pact save)
#
SaveFiles = *.c *.h

#
# Files to remove in directory clean (pact clean)
#
CleanFiles = 

#
# Things upon which install depends (pact install)
#
DepLib = ${LibDir}/libppc.a \
         ${LibDir}/libpdb.a \
         ${LibDir}/libpml.a \
	 ${LibDir}/libscore.a

InstallDep = ${TGTLib} ${TGTExe} ${TGTScr}
BinDep = ${Hdrs} ${TGTLib} toul.c ${DepLib}
BinObj = ${LdFlags} toul.c

#
# Required Libraries
#
# NOTE: building shared seems to require these:
Libs   = ${LPANACEA} ${LPGS} ${MDGLib} ${LPPC} ${LPDB} ${LPML} ${LSCORE} ${MDLib}
NGLibs = ${LPANACEA} ${LPGS} ${MDGLib} ${LPPC} ${LPDB} ${LPML} ${LSCORE} ${MDLib}
# NOTE: building static seems to require only these:
#Libs   = ${LPANACEA} ${LPDB} ${LPML} ${LSCORE} ${MDLib}
#NGLibs = ${LPANACEA} ${LPDB} ${LPML} ${LSCORE} ${MDLib}

targets :
	@echo "Targets for PANACEA"
	@echo "   bindings  : make the language bindings"
	@echo "   Cth       : make C time history tests"
	@echo "   defvar    : make variable definition test"
	@echo "   Fth       : make Fortran time history tests"
	@echo "   install   : install PANACEA headers and utilities in dev/arch"
	@echo "   link      : link PANACEA utilities for public use"
	@echo "   prep      : make preprocessing test"
	@echo "   sharedlib : build and install PANACEA shared libs in dev/arch"
	@echo "   test      : run the PANACEA test suite"

#
# Headers Files
#
Hdrs = ${TGTInc} ${hdrf}

#
# Object Files
#
GenObjs = pagnrd.o pahand.o pafi.o pafia.o
PanObjs = padsys.o pamm.o panacea.o paccess.o pashar.o pashas.o pastr.o pavars.o \
 	  padef.o pacpp.o papkg.o pasmp.o
PPObjs  = papp.o padump.o panth.o
SorObjs = pasrc.o
Objs    = ${GenObjs} ${SorObjs} ${PanObjs} ${PPObjs}

ArObjs = ${TGTLib}(padef.o) ${TGTLib}(pacpp.o) ${TGTLib}(papkg.o)      \
	 ${TGTLib}(pagnrd.o) ${TGTLib}(pahand.o) ${TGTLib}(pafi.o)     \
         ${TGTLib}(panacea.o) ${TGTLib}(pashar.o) ${TGTLib}(pashas.o)  \
         ${TGTLib}(paccess.o) ${TGTLib}(padsys.o) ${TGTLib}(pamm.o)    \
         ${TGTLib}(pavars.o) ${TGTLib}(papp.o) ${TGTLib}(padump.o)     \
         ${TGTLib}(pasrc.o) ${TGTLib}(pastr.o) ${TGTLib}(pafia.o)      \
         ${TGTLib}(pasmp.o)                                            \
         ${TGTLib}(panth.o)

${LibDep} : ${hdrf} ${Hdrs}

#
# Generated code rules
#

${IncDir}/pasrc.h : pasrc.t
	@(echo "template pasrc.t -o ${IncDir}/pasrc.h" ;  \
	  ${BinDir}/template pasrc.t -o ${IncDir}/pasrc.h)

hdrf = ${IncDir}/pasrc.h

IncAction = @pact generate


#
# time history tests
#
Cth : ${BinDir}/pathts

${BinDir}/pathts : pathts.c ${TGTLib}
	${CLD} ${LdFlags} pathts.c -o ${BinDir}/pathts ${NGLibs}

Fth : ${BinDir}/pathft

${BinDir}/pathft : pathft.f ${TGTLib}
	${FC} ${LdFlags} pathft.c -o ${BinDir}/pathft ${NGLibs}

#
# pata
#
${BinDir}/pata : pata.c ${TGTLib}
	${CLD} ${LdFlags} pata.c -o ${BinDir}/pata ${NGLibs}

#
# preprocessing test
#
prep : ${BinDir}/pacppt

${BinDir}/pacppt : pacppt.c ${TGTLib}
	${CLD} ${LdFlags} pacppt.c -o ${BinDir}/pacppt ${NGLibs}
#
# test new variable definition
#
defvar : ${BinDir}/padeft

${BinDir}/padeft : padeft.c ${TGTLib}
	${CLD} ${LdFlags} padeft.c -o ${BinDir}/padeft ${NGLibs}

#
# make the executable
#
${TGTExe} : ${BinDep}
	${CLD} ${LdFlags} toul.c -o ${TGTExe} ${Libs}

#
# link 
#
link: ${InstallDep}
	pact scminstall
	pact scrinstall

#
# install 
#
install:
	pact link
	pact incinstall
	pact scminstall
	pact scrinstall

#
# sharedlib
#
sharedlib:
	pact shared
	pact incinstall

#
# inform
#
inform :
	@rm -f required.objs
	@echo ${Objs} > required.objs

#
# Run the PANACEA test suite
#
test :
	@./patest

