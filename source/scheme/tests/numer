#!/bin/csh -f
#
# NUMER - SCHEME numeric tests
#
# Source Version: 3.0
# Software Release #: LLNL-CODE-422942
#
# include "cpyright.h"
#

source ../../tests/common

set msg = "SCHEME Numeric Test .......... "
set rpf = none
set exe = $BinDir/scheme
@ nerr  = 0

NoteD $Log ""
NoteD $Log "                    $msg"

flog $Log pwd

#--------------------------------------------------------------------------

#                          INTEGER SYNTAX TESTS

#--------------------------------------------------------------------------

   set rpf = none

   NoteD $Log -n "                       integer syntax ............ "
   Note $Log ""

# test that the SCHEME variable can be derived from the executable path
   flog $Log unsetenv SCHEME
   flog $Log unsetenv DO_RUN_SUBMIT_ENV

   set UTime = `$TIMER -r`
   if ("$Valgrind" == "") then
      flog $Log $cfe $exe -e -l $FilesDir/shsint.scm
      set xstatus = $status
   else
      ftee $Log $Valgrind $exe -e -l $FilesDir/shsint.scm      |& \
      grep "ERROR SUMMARY:"                                    |& \
      awk '{ print $4 }'   >&! $Tmp
      set xstatus = `cat $Tmp`
      set rpf     = ( $rpf $Tmp )
   endif
   set ETime   = `$TIMER -b $UTime`

   set rpf = ( $rpf '#tmp#' )

   $TEST_CHECK part -a numer_int -e $xstatus -l -dt $ETime -rpf "$rpf" none

   @ nerr = $nerr + $status

#--------------------------------------------------------------------------

#                           NUMERIC TESTS

#--------------------------------------------------------------------------

   set rpf = none

   NoteD $Log -n "                       numeric ................... "
   Note $Log ""

   set UTime = `$TIMER -r`
   if ("$Valgrind" == "") then
      flog $Log $cfe $exe -e -l $FilesDir/shnum.scm
      set xstatus = $status
   else
      ftee $Log $Valgrind $exe -e -l $FilesDir/shnum.scm     |& \
      grep "ERROR SUMMARY:"                                  |& \
      awk '{ print $4 }'   >&! $Tmp
      set xstatus = `cat $Tmp`
      set rpf     = ( $rpf $Tmp )
   endif
   set ETime   = `$TIMER -b $UTime`

   set rpf = ( $rpf '#tmp#' )

   $TEST_CHECK part -a numer_num -e $xstatus -l -dt $ETime -rpf "$rpf" none

   @ nerr = $nerr + $status

#--------------------------------------------------------------------------

#                           COMPLEX NUMERIC TESTS

#--------------------------------------------------------------------------

   set rpf = none

   NoteD $Log -n "                       complex ................... "
   Note $Log ""

   set UTime = `$TIMER -r`
   if ("$Valgrind" == "") then
      flog $Log $cfe $exe -e -l $FilesDir/shcpx.scm
      set xstatus = $status
   else
      ftee $Log $Valgrind $exe -e -l $FilesDir/shcpx.scm     |& \
      grep "ERROR SUMMARY:"                                  |& \
      awk '{ print $4 }'   >&! $Tmp
      set xstatus = `cat $Tmp`
      set rpf     = ( $rpf $Tmp )
   endif
   set ETime   = `$TIMER -b $UTime`

   set rpf = ( $rpf '#tmp#' )

   $TEST_CHECK part -a numer_complex -e $xstatus -l -dt $ETime -rpf "$rpf" none

   @ nerr = $nerr + $status

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

$TEST_CHECK part -a numer -e $nerr "$msg"

exit($status)
