#!/bin/csh
#
# PACT-UPDATE - update/install the PACT distribution system on this machine
# (PACT-SRC)    Some of the complexity of this process stems from the fact
#               that there are several ways of obtaining the source:
#                -  from a source repository
#                -  from an anonymous FTP node as a distribution tar file
#                -  from an executable PACT distribution file. PACT-SRC
#               and that the other parts of the manager interlock with
#               this script
#
# Source Version: 3.0
# Software Release #: LLNL-CODE-422942
#
# include "cpyright.h"
#

# don't assume the umask is reasonable
umask 002

unalias *

alias flog      'echo "Command: \!\!:2-$" >>& \!\!:1 ; \!\!:2-$ >>& \!\!:1'
alias ftee      'echo "Command: \!\!:2-$" >>& \!\!:1 ; \!\!:2-$ |& tee -ai \!\!:1'
alias Note      'echo \!\!:2-$ >>& \!\!:1'
alias NoteD     'echo \!\!:2-$ >>& \!\!:1 ; echo \!\!:2-$'
alias Separator '(echo "--------------------------------------------------------------------------" ; echo "") >>& \!\!:1'
alias InitLog   'set t = \!\!:2 ; rm -f $t ; echo $USER >&! $t ; date >> $t ; pwd >> $t ; echo "" >> $t ; setenv \!\!:1 $t ; unset t'

if ($?USER == 0) then
   if ($?LOGNAME == 0) then
      set USER = "anonymous"
   else
      set USER = $LOGNAME
   endif
endif

set base       = $cwd
set keep       = FALSE
set savedocs   = FALSE
set mngdir     = manager
set cfgonly    = FALSE
set lstcfg     = FALSE
set node       = `uname -n`
set pattern    = 'pact.README pact*-src pact*.tar.gz'
set srconly    = FALSE
set tmpf       = tmp-file
set tmpd       = tmp-dir
set host       = `uname -n`
set os         = `uname -s | tr "[A-Z]" "[a-z]"`
set force      = ""
set test       = TRUE
set vrb        = FALSE

set name = $0
set name = $name:t

if ($name == "pact-update") then
   set srcmode = "repo"
else
   set srcmode = "self"
endif

#--------------------------------------------------------------------------

#                       HANDLE COMMAND LINE ARGUMENTS

#--------------------------------------------------------------------------

set opt = "$name  $argv"

set cargs = ""
while ($#argv > 0)
   switch ($1)
      case -cfg:
           set cfgonly = TRUE
           breaksw
      case -force:
           set force = "-force"
           breaksw
      case -h:
           echo ""
           if ($name == "pact-update") then
              echo "Usage:"
              echo "       pact-update [-cfg] [-extr] [-force] [-h] [-keep] [-lst]"
              echo "                   [+-net <host>] | [-src] | [-tar <tar-file>] [-vers]"
              echo "                   ..."
              echo ""
              echo "update the PACT installation on this machine"
           else
              echo "Usage:"
              echo "       pact-src [-c] [-cc <C Compiler>] [-cfg] [-db <db>] [-force] [-extr] [-g]"
              echo "                [-h] [-i <dir>] [-keep] [-t] [-test] [-vers] [-vrb]"
              echo "                ..."
              echo ""
              echo "Self-building PACT distribution."
              echo "Run with selected options to configure, compile, test,"
              echo "and install PACT:"
           endif

           echo ""
           echo "    -cfg       stop after configuring the distribution"
           echo "    -db        configure from an existing database <db>"
           echo "    -extr      setup/extract sources only"
           echo "    -force     force install if tests fail"
           echo "    -h         this help package"
           echo "    -keep      keep existing PACT distribution, ie. keep 'pact/'"
           echo "               in directory where new distribution being built"
           echo "    -lst       list some possible configurations that are available"
           echo "    -vers      only print the PACT Version (No update)"
           if ($name == "pact-update") then
              echo "    +net       get the PACT source from the specified host"
              echo "               via anonymous FTP without the documentation"
              echo "    -net       get the PACT source from the specified host"
              echo "               via anonymous FTP with the documenation"
              echo "    -src       sources are out and only need to be configured (default)"
              echo "    -tar       compressed or uncompressed tar file, example"
              echo "               for pact.tar.gz type:   -tar pact.tar"
              echo ""
              echo "    all other arguments are passed to 'dsys config'"
              echo "    do 'dsys config -h' for more information"
           else
              echo ""
              echo "    -c         create missing directories for -i option"
              echo "    -f         a directory containing your configuration file"
              echo "    -F         do fast builds using /tmp"
              echo "    -g         build an absolutely debuggable version"
              echo "    -gsys      use specified graphics system"
              echo "               options are: gl (OpenGL), qd (Apple Quickdraw), and x11 (default)"
              echo "    -i         base installation directory (default /usr/local)"
              echo "               to omit installation use "-i none""
              echo "    -llp       use LD_LIBRARY_PATH when analyzing compilers"
              echo "    -os        explicitly set the hardware/OS/release system id"
              echo "    -p         build a profiling version"
              echo "    -v         display the Version of the Source Control System"
              echo "    -V         configuration/build makefiles verbose"
              echo ""
              echo "   The following options apply only if no config file or database is specified:"
              echo ""
              echo "    -b         size of pointers in bits for platforms with option"
              echo "               the default is determined by the platform defaults"
              echo "    -cc        specify the compiler set to be used (default gnu)"
              echo "               use only when compilers from multiple vendors are"
              echo "               available on your system"
              echo "               use your PATH variable to select among multiple"
              echo "               installed versions of a single vendors compilers"
              echo "               partial list of available compilers:"
              echo "                  intel      Intel compilers"
              echo "                  gnu        GNU compilers"
              echo "                  gnu-bgl    GNU for IBM BG/L backend"
              echo "                  gnu-bgp    GNU for IBM BG/P backend"
              echo "                  gnu-bgq    GNU for IBM BG/Q backend"
              echo "                  gnu-cxe    GNU for CRAY XE backend"
              echo "                  path       PathScale compilers"
              echo "                  pgi        PGI compilers"
              echo "                  pgi-cxe    PGI for CRAY XE backend"
              echo "                  sun        SUN compilers"
              echo "                  xlc-bgl    XL compilers for IBM BG/L backend"
              echo "                  xlc-bgp    XL compilers for IBM BG/P backend"
              echo "                  xlc-bgq    XL compilers for IBM BG/Q backend"
              echo "    -feature   <feature>[,<feature>]*"
              echo "               look in pact/manager/features for available features"
              echo "    -ipy       path to python, implies -py"
              echo "    -mpi       build MPI version (equivalent to -feature mpi)"
              echo "    -py        build python bindings (equivalent to -feature python)"
              echo "    -s         build OpenMP version (equivalent to -feature openmp)"
              echo "    -sl        build shared libraries (equivalent to -feature shared)"
              echo "    -t         build threaded version (equivalent to -feature pthread)"
              echo "    -test      do not run tests"
              echo "    -vrb       run verbosely"
              echo ""
              echo "   Config files are optional and should be used to exercise"
              echo "   more control than is available from the command line options"
              echo ""
              echo "    <config>   the configuration for the installation"
              echo "               sample configs (see manager/std) are:"
              echo "                    -    auto-aix     IBM RS6000 systems"
              echo "                    -    auto-darwin  Mac OS X systmes"
              echo "                    -    auto-hp      HP RISC 700 systems"
              echo "                    -    auto-irix64  64 bit SGI systems running IRIX64 6.x"
              echo "                    -    auto-linux   LINUX systems"
              echo "                    -    auto-osf     OSF systems"
              echo "                    -    auto-sol     Sun Solaris systems"
              echo "               (check manager/local for any local configs)"
              echo ""
              echo "   Database files are generated by a full config after"
              echo "   reading one or more config files and then analyzing the system."
              echo "   The database can be used to configure other PACT installations"
              echo "   saving the overhead of processing config files and analyzing"
              echo "   the system.  When using a database no features or compilers"
              echo "   should be specified - they are included in the database already."
              echo "   Database info cannot be overridden except for the base installation"
              echo "   directory and overall debug/optimization/profile desired."
              echo ""
              echo "    <db>       database from a previous configuration"
           endif
           echo ""
           exit(1)
           breaksw
      case -lst:
           set lstcfg = TRUE
           breaksw
      case -keep:
           set keep = TRUE
           breaksw
      case +net:
           set savedocs = TRUE
      case -net:
           shift
           set host    = $1
           set srcmode = "net"
           breaksw
      case -src:
           set srcmode = "source"
           set keep    = TRUE
           breaksw
      case -tar:
           shift
           set tarf    = $1
           set srcmode = "tar"
           breaksw
      case -test:
           set test = FALSE
           breaksw
      case -extr:
           set srconly = TRUE
           breaksw
      case -vers:
           if (-e ../score/score.h) then
              set Vers = `grep "define VERSION" ../score/score.h`
              if ($#Vers > 0) then
                 echo "PACT Version:" $Vers[4]
              endif
           else
              echo "Version unknown"
           endif
           exit(0)
           breaksw
      case -vrb:
           set vrb = TRUE
           breaksw

# NOTE: database config should remove other config specs
# such as compilers or features
# but not instbase or debug/opt
      case -db:
           set cargs = ( $cargs $1 $2 )
           shift
           breaksw

      case -cc:
           set cargs = ( $cargs $1 $2 )
           shift
           breaksw

      default:
           set cargs = ( $cargs $1 )
   endsw
   shift
end

InitLog Log $base/Build.Log

Note $Log "Operation:  $opt "
Note $Log "Update PACT installation on $node"
Note $Log ""				 
Note $Log "Update Log		Host: $host running $os"
Note $Log "User: $USER		Date: `date`"
Note $Log ""				 
Note $Log ""				 

#--------------------------------------------------------------------------

#                                 OBTAIN SOURCES

#--------------------------------------------------------------------------

switch ($srcmode)

# sources are out and ready
   case source:
        breaksw

# repository based update
   case repo:
        breaksw

# anonymous ftp based update
   case net:
        NoteD $Log "Getting the PACT sources from $host"

# echo the FTP command into the log
        Note $Log ""
        Note $Log "FTP Commands for Update"
        Note $Log "   open $host"
        Note $Log "   user anonymous password $USER@$node"
        Note $Log "   prompt"
        Note $Log "   bin"
        Note $Log "   cd pub"
        Note $Log "   mget $pattern"
        Note $Log "   quit"
        Note $Log ""

# do the transfer
        (echo "open $host" ; \
         echo "user anonymous password $USER@$node" ; \
         echo "prompt" ; \
         echo "bin" ; \
         echo "cd pub" ; \
         echo "mget $pattern" ; \
         echo "quit" ) | ftp -n >>& $Log

        flog $Log pact-foo-doc.tar.gz
        if ($savedocs == TRUE) then
           foreach i (pact*-doc.tar.gz)
              if ($i == pact-foo-doc.tar.gz) then
                 flog $Log rm $i
              else
                 flog $Log gzip -d $i
              endif
           end
        else
           flog $Log rm -f pact*-doc.tar.gz
        endif

        set name = ""
        flog $Log touch pact-foo-src
        foreach i (pact*-src)
          if ($i != pact-foo-src) then
             flog $Log set name = $i
          else
             flog $Log rm $i
          endif
        end
        if ($name == "") then
           Note $Log "FTP failed to find PACT sources on $host"
           exit(1)
        endif

        if (-e pact/manager/.pact-date) then
           set OldDate = `cat pact/manager/.pact-date`
           set NewDate = $name
           flog $Log pact/manager/compare-date $NewDate $OldDate
           switch ($status)
              case 1:
                   NoteD $Log "Local PACT distribution is out of date"
                   breaksw
              case 0:
              case -1:
                   NoteD $Log "Local PACT distribution is up to date"
                   rm -f pact*.tar*
                   exit(0)
                   breaksw
           endsw
        endif

# self extraction update
   case self:

# check if grep supports -a option (-a: process binary files as well as text files, necessary on some Linux systems)
        set GrepArgs = '-a'
        flog $Log mkdir $tmpd
        flog $Log cd $tmpd
        echo "foo" > file.$tmpf
        flog $Log grep $GrepArgs foo file.$tmpf
        if ($status != 0) then
           set GrepArgs = ""
        endif
        flog $Log cd ..
        flog $Log rm -r $tmpd

# determine where pact.tar begins
# the >& /dev/null following is to throw away complaints from grep about line being too long
        (grep $GrepArgs -n  '\-----------------------\*\*\*   SEPARATOR   \*\*\*-----------------------' ./$name > ln_.$tmpf) >& /dev/null
        set nlines = `grep -v echo ln_.$tmpf | awk -F: '{print $1}'`
        rm ln_.$tmpf

# write the shell script to extract the compressed tar file
        set STDOUT = extr.$tmpf
        rm -f $STDOUT
        touch $STDOUT

        Note $STDOUT "#\!/bin/csh -f"
        Note $STDOUT "@ nlines = $nlines"
        Note $STDOUT "@ rlines = 0"
        Note $STDOUT 'while (1)'
        Note $STDOUT '   set Input = "$<"'
        Note $STDOUT '   @ rlines += 1' 
        Note $STDOUT '   if ("$rlines" == "$nlines") then'
        Note $STDOUT '      set File = "$<"'
        Note $STDOUT '      break'
        Note $STDOUT '   endif'
        Note $STDOUT 'end'
        Note $STDOUT 'if ($?File) then'
        Note $STDOUT '   set File = $File:t'
        Note $STDOUT '   echo $File'
        Note $STDOUT '   cat > $File'
        Note $STDOUT 'endif'
        Note $STDOUT 'exit($status)'

        flog $Log cat $STDOUT
        flog $Log chmod a+x $STDOUT

# extract the tar file
        Note $Log "cat ./$name | ./$STDOUT"
        set tarf = `cat ./$name | ./$STDOUT`
        flog $Log set tarf = $tarf:r
        flog $Log set srcmode = "tar"

        flog $Log rm -f $STDOUT
        breaksw

# error
   default:
        echo ""
        echo "I have no idea how to do an update without a tar file, a"
        echo "repository, or a network node."
        echo ""
        exit(1)
        breaksw
endsw

if ($lstcfg == TRUE) then
   tar tzvf $tarf.gz |& grep "std/auto-" |& awk '{ print "     " $6}' |& sed 's+pact/manager/std/auto-++'
   exit(1)
endif

#--------------------------------------------------------------------------

#                                 SETUP SOURCES

#--------------------------------------------------------------------------

if ($keep == "FALSE") then
   if (-d pact) then
      Note $Log "Removing old PACT files"
      flog $Log rm -r pact
   endif
endif

Note $Log ""
switch ($srcmode)
   case tar:
        NoteD $Log -n "   untar ............. "
        Note $Log ""

        flog $Log tar xzvmf $tarf.gz
        set xstatus = $status
        if ($xstatus == 0) then
           NoteD $Log "ok"
        else
           NoteD $Log "ng ($xstatus)"
           Note $Log ""
           Note $Log "  ERROR: TAR failed"
           Note $Log ""
           exit($xstatus)
        endif
        unset tarargs

        flog $Log cd pact

        breaksw

   case source:
        flog $Log cd pact
        breaksw

   default:
        NoteD $Log -n "   check out ......... "
        Note $Log ""

        set root = pactnew-read-only
        flog $Log svn co http://pactnew.googlecode.com/svn/trunk/ $root
        set xstatus = $status
        if ($xstatus == 0) then
           NoteD $Log "ok"
        else
           NoteD $Log "ng ($xstatus)"
           Note $Log ""
           Note $Log "  ERROR: Source Control System failed"
           Note $Log ""
           exit($xstatus)
        endif

# delete an unnecessary directory layer */
        flog $Log mv $root/source/{.?*,*} .
        flog $Log rm -r $root

# remove the source control sub-directories
        Note $Log "Removing Source Control Information"
        flog $Log scripts/scs-meta -d | xargs rm -r
        Note $Log "PACT sources checked out"
        breaksw
endsw

if ($srconly == TRUE) then
   exit(0)
endif

Note $Log "Current directory after source setup $cwd"

#--------------------------------------------------------------------------

#                              CONFIGURE DISTRIBUTION

#--------------------------------------------------------------------------

Note $Log "Changing to manager directory: $mngdir"
flog $Log cd $mngdir
flog $Log set base = $cwd:h

flog $Log unset System
flog $Log unsetenv System

./pre-check
if ($status > 1) then
   exit(1)
endif

setenv System `$base/scripts/cfgman -d $base/dev use`
Note $Log "System = $System"

set root   = $base/dev/$System
set etcdir = $root/etc
set scrdir = $base/scripts
set envf   = $etcdir/env-pact.csh
set versid = `cat ./.pact-version`
set TIMER  = $scrdir/timer

set bt = `$TIMER -r`

Note $Log ""
Note $Log "Building PACT version $versid ($System) with: $cargs"

NoteD $Log -n "   configure ......... "
set lt = `$TIMER -r`
if ($vrb == TRUE) then
   NoteD $Log ""
   ftee $Log ./dsys config $cargs
   set xstatus = $status
else
   Note $Log ""
   flog $Log ./dsys config $cargs
   set xstatus = $status
endif
set lt = `$TIMER -b $lt`
if ($xstatus == 0) then
   NoteD $Log "ok ($lt)"
else if ($xstatus == 2) then
   NoteD $Log "ng ($xstatus/$lt)"
   tail -n 12 $Log
   exit(2)
else if ($xstatus != 0) then
   NoteD $Log "ng"
   Note $Log ""
   Note $Log "  ERROR: DSYS CONFIG failed"
   Note $Log ""
   exit($xstatus)
endif

if ($cfgonly == TRUE) then
   exit($xstatus)
endif

Note $Log "Sourcing environment file $envf for $System"
if (-e $envf) then
   source $envf
   rehash
else
   Note $Log ""
   Note $Log "  ERROR: bad environment file"
   Note $Log ""
   exit(1)
endif

#--------------------------------------------------------------------------

#                               COMPILE DISTRIBUTION

#--------------------------------------------------------------------------

   set DName = `cat ./.pact-date`

   if ($test == TRUE) then
      if ($vrb == TRUE) then
         ./dsys update $force -v
         set xstatus = $status
      else
         ./dsys update $force
         set xstatus = $status
      endif
   else
      NoteD $Log -n "   compile ........... "

      set lt = `$TIMER -r`
      if ($vrb == TRUE) then
         NoteD $Log ""
         ftee $Log ./dsys build
         set xstatus = $status
      else
         Note $Log ""
         flog $Log ./dsys build
         set xstatus = $status
      endif
      set lt = `$TIMER -b $lt`
      if ($xstatus == 0) then
         NoteD $Log "ok ($lt)"
      else
         NoteD $Log "ng ($xstatus/$lt)"
      endif
   endif

   set et = `$TIMER -b $bt`
   if ($xstatus != 0) then
      NoteD $Log "PACT update failed ($xstatus/$et)"

   else
      NoteD $Log "PACT update succeeded ($et)"

      flog $Log cat $root/log/update

      flog $Log rm -f .pact-date
      echo $DName > .pact-date

   endif

   NoteD $Log ""
   NoteD $Log "Distribution: $DName"
   NoteD $Log "Host:         $host"
   NoteD $Log "Date:         `date`"

# move the log now
   set nLogDir = $cwd:h
   set nLogDir = $nLogDir:h
   mv $Log $nLogDir/$node.BUILD
   set Log = $nLogDir/$node.BUILD

   NoteD $Log ""
   NoteD $Log "For details see the log file $node.BUILD"
   NoteD $Log ""

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

flog $Log cd $base

exit($xstatus)
