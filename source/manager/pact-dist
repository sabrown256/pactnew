#!/bin/csh -f
#
# PACT-DIST - build a self-extracting compressed tar file
#           - of the last revision from the source repository
#           - repository for UNIX distribution
#  
# Source Version: 3.0
# Software Release #: LLNL-CODE-422942
#
# include "cpyright.h"
#

unalias *

if ($?psy_mngdir == 0) then
   set psy_mngdir = $cwd
   set psy_base   = $psy_mngdir:h
   set psy_scrdir = $psy_base/scripts
endif

source $psy_scrdir/functions-pact.csh
source $psy_scrdir/csh-subroutines
HAVE_SUBROUTINES

if ($?USER == 0) then
   if ($?LOGNAME == 0) then
      set USER = "anonymous"
   else
      set USER = $LOGNAME
   endif
endif

eval `$psy_scrdir/cfgsys`

set Manager       = manager
set Exe           = $psy_mngdir/$0
set DTag          = ( `./pact-get-tag -d` )
set DName         = "pact$DTag"
set SCSRepository = ( -d "`$PSY_ScrDir/scs-meta -r`" )
set SCSKind       = ( -k "`$PSY_ScrDir/scs-meta -k`" )
set SRCDate       = ( -D "`./pact-get-tag`" )
set WhoIAm        = $USER
set HeaderFile    = "../pact-update"
set VersionID     = `cat ./.pact-version`
set TarArgs       = cvf
set TmpFile       = tmp-file
set TmpDir        = tmp-dir
set OS            = `uname -s | tr "[A-Z]" "[a-z]"`

set LLNL             = FALSE
set KEEP             = FALSE
set Extn             = FALSE
set UseRepo          = TRUE
set RepositoryExport = FALSE

set MV    = "mv -f"
set RM    = "rm -f"
set RMDir = "rm -rf"

InitLog Log $psy_base/dev/$PSY_ID/log/dist

set Opt = "$Exe:t  $argv"

while ($#argv >= 1)
   switch ($1)
      case -c:
           shift
           set SCSRepository = "-d $1"
           breaksw
      case help:
      case -h*:
           echo "Usage: dsys dist [-c <repo>] [-h] [-s]"
           echo "                 [-v | +v | -T] [-l [-x]] [-r] [-k] [-Z]"
           echo "    -c    use the specified repository (default to current source repository)"
           echo "    -h    this help message"
           echo "    -s    use the current sources to make the distribution"
           echo "    -v    get the distribution as of the given date mm/dd/yy"
           echo "    +v    get the distribution as of the given date mm/dd/yy_hh:mm:ss"
           echo "    -T    get the distribution for revision Tag Tyy_mm_dd_hh_mm_ss"
           echo "          (for tag use 'dsys info -c' or 'dsys info -t')"
           echo "    -l    prepare a distribution for LLNL"
           echo "    -x    put the extensions in a separate tar file (with -l only)"
           echo "    -r    export to remote source repository"
           echo "    -k    keep the source directory"
           echo ""
           exit(1)
           breaksw
      case -k:
           set KEEP = TRUE
           breaksw
      case -l:
           set LLNL = TRUE
           breaksw
      case -r:
           set RepositoryExport = TRUE
           breaksw
      case -s:
           set UseRepo = FALSE
           breaksw
      case -v:
      case +v:
      case -T:
           shift
           set raw     = ( `date -d "$1" '+%Y_%m_%d %H:%M'` )
           set SRCDate = ( -D "$raw" )
           set DTag    = ( `echo $raw[1] | sed 's/^20//'` )
           set DName   = "pact$DTag"
           breaksw
      case -x:
           set Extn = TRUE
           breaksw
      default:
           echo " "
           echo ">>>>>>>>>>  Illegal option $1  <<<<<<<<<<"
           echo " "
           breaksw
   endsw
   shift
end

Note $Log "Source tag: $SRCDate[2]"

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# MAIN - start working here

   call INIT()

#   if ($UseRepo == TRUE) then
      call GET_REPO_SOURCE()
#   else
#      call GET_CURRENT_SOURCE()
#   endif

   call PREP_TREE()

# handle the extensions before later phases get rid of them
   if (($Extn == "TRUE") && ($LLNL == "TRUE")) then
      call SAVE_EXT()
   endif

# remove the local extensions directories
   if ($LLNL != "TRUE") then
      flog $Log pwd
      flog $Log (find . -type d -name extensions -exec $RMDir {} \;)
   endif

# for non export distributions
   if ($RepositoryExport == TRUE) then
      call EXPORT_DIST()

   else
      call UNIX_DIST()

# handle the LLNL specific material
      if ($LLNL != "TRUE") then
         call REMOVE_LOCAL()
      endif
   endif

   Separator $Log
   NoteD $Log "Archiving the distribution"
   flog $Log $RM pact.tar
   flog $Log tar $TarArgs pact.tar pact
   flog $Log pwd
   flog $Log ls -l pact.tar

   NoteD $Log "Compressing the distribution"
   flog $Log $RM pact.tar.gz
   flog $Log gzip pact.tar
   flog $Log ls -l pact.tar.gz

   call FINISH()

exit($status)

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# INIT - get ready to make a distribution

INIT:

   Separator $Log
   NoteD $Log " "

   if (!(-e $psy_mngdir/pact-scs)) then
      NoteD $Log "Can't find Source Control System Information in $psy_mngdir"
      NoteD $Log " "
      quit(25)
   endif

# Source Control System Variables
   source $psy_mngdir/pact-scs

   if (!(-d distribution)) then
      flog $Log mkdir distribution
   endif

   flog $Log cd distribution

   NoteD $Log "PACT Distribution for UNIX platforms"

   if ($LLNL == "TRUE") then
      NoteD $Log "   LLNL specific material included"
   endif

   if ($KEEP == "TRUE") then
      NoteD $Log "   The sources will be kept out"
   endif

   if (-d pact) then
      flog $Log $RMDir pact
   endif

   Note $Log "Distribution Log             Host: $HSY_Host running $OS"
   Note $Log "User: $WhoIAm                Date: `date`"
   Note $Log " " 
   Note $Log "Operation: $Opt " 
   Note $Log " " 

   flog $Log pwd

   return

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# GET_REPO_SOURCE - check out the source

GET_REPO_SOURCE:

   Separator $Log

# check if repository locked
   set lockst = ( `$PSY_ScrDir/scs-lock status` )
   if ("$lockst" != "unlocked") then
      NoteD $Log " *** REPOSITORY IS LOCKED ***"
      NoteD $Log ""
      $PSY_ScrDir/scs-lock cat
      NoteD $Log ""
      quit(26)
   endif

# lock repository
   $PSY_ScrDir/scs-lock lock
   Note $Lock "  pact-dist in progress - $USER  `date`"
   Note $Lock ""

   NoteD $Log "Getting out the sources for $DTag"
   Note $Lock "Getting out the sources"

   flog $Log pwd
   flog $Log mkdir pact
   flog $Log pushd pact
   flog $Log $PSY_ScrDir/scs-co $SCSOpt $SCSKind $SCSRepository pact
   set xstatus = $status
   Note $Log " " 

# release the lock
   flog $Log popd
   flog $Log $PSY_ScrDir/scs-lock unlock
   flog $Log $PSY_ScrDir/scs-lock status
   Note $Log " " 

   flog $Log pushd pact
   if ($xstatus == 0) then
      set mngd = ( `find . -type d -name manager` )
      set root = $mngd:h
      flog $Log mv $root/* $root/.[a-zA-Z].* .
      flog $Log $RMDir pact
      Note $Log "Sources checked out" 
      unset root
      unset mngd
   else
      NoteD $Log "Source check out failed" 
      Note $Log "SCSRepository = $SCSRepository"
      echo "See $Log"

      quit(27)
   endif
   Note $Log " " 

   if (-d auto) then
      flog $Log cd auto
      flog $Log $RMDir $SCSDir
      flog $Log mv * ..
      flog $Log cd ..
      flog $Log $RMDir auto
   endif

   flog $Log popd

   flog $Log ls -lR pact

   return

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# GET_CURRENT_SOURCE - check out the source

GET_CURRENT_SOURCE:

   Separator $Log
   NoteD $Log "Using the current sources"

   flog $Log pwd
   flog $Log mkdir pact
   flog $Log pushd pact
   flog $Log pwd
   flog $Log rsync -avC --exclude dev --exclude $PSY_Prefix'*' ../../../ .
   flog $Log ( find . -name "*.core" | xargs rm )

   flog $Log rm -rf dev
   Note $Log " " 

   Note $Log "Sources copied" 
   Note $Log " " 

   flog $Log popd
   flog $Log pwd

   flog $Log ls -lR pact

   return

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# SAVE_EXT - save the local extensions

SAVE_EXT:

   Separator $Log
   NoteD $Log "Copying PACT extensions"
   flog $Log mkdir foo
   foreach i (*/applications/extensions/*)
      cp $i foo
   end

   NoteD $Log "Archiving PACT extensions"
   flog $Log cd foo
   flog $Log tar $TarArgs ../pact-ext.tar *
   flog $Log cd ..
   flog $Log $RMDir foo

   NoteD $Log "Compressing PACT extensions using gzip"
   flog $Log gzip pact-ext.tar

   flog $Log $MV pact-ext.tar.gz ../$DName-ext.tar.gz

   return

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# PREP_TREE - prepare the source tree to be made into a distribution

PREP_TREE:

   Separator $Log
   flog $Log pwd

# remove the source control system sub-directories
   NoteD $Log "Cleaning up the sources"
   set inf = ( `$PSY_ScrDir/which-scs` )
   Note $Log "Repo metadata: $inf"
   unset inf

   if (-d pact) then
      flog $Log pushd pact
      flog $Log ( $PSY_ScrDir/scs-meta -d |& xargs rm -rf )

      flog $Log mkdir -p $cwd/$Manager
      flog $Log ( echo $DName > $Manager/.pact-date )

      Note $Log Current Directory: $cwd
      Note $Log Manager Directory: $Manager

# determine whether local tar supports o option
      Note $Log "Determining whether tar support o option"

      flog $Log mkdir $TmpDir
      flog $Log pushd $TmpDir
      flog $Log set lta = cvof
      echo "foo" > $TmpFile.file
      flog $Log tar $lta $TmpFile.tar $TmpFile.file
      if ($status == 0) then
         flog $Log set TarArgs = $lta
      endif
      flog $Log popd
      flog $Log $RMDir $TmpDir

      flog $Log popd
      Note $Log "done"
      Note $Log ""

# add read to permissions for debugging purposes
      flog $Log chmod -R a+r *
   else
      NoteD $Log "Prep tree failed - no sources available"
      echo "See $Log"
      quit(28)
   endif

   return

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# UNIX_DIST - make this a distribution for a UNIX box

UNIX_DIST:

   Separator $Log
   NoteD $Log "Setting up UNIX distribution"

   set NoGoDirs = ( "manager/mac" "scheme/runtime" )
   if ($LLNL != "TRUE") then
      flog $Log set NoGoDirs = ( $NoGoDirs manager/local manager/hosts )
   endif

   foreach dir ($NoGoDirs)
      flog $Log $RMDir $dir
   end

   flog $Log $RM ultra/ultra.ini.mac
   flog $Log $RM */*.tld

   return

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# REMOVE_LOCAL - remove local stuff from the distribution

REMOVE_LOCAL:

   Separator $Log
   NoteD $Log "Remove local facilities sources"

   return

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# EXPORT_DIST - make a distribution for export to another repository

EXPORT_DIST:

   Separator $Log
   NoteD $Log "Setting up Repository export"

   flog $Log $RMDir manager/local
   flog $Log $RMDir manager/hosts

   call REMOVE_LOCAL()

   return

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# FINISH - complete the details of the distribution

FINISH:

   Separator $Log
   Note $Log "Finishing up"

   if ($KEEP == "FALSE") then
      NoteD $Log "The sources will NOT be kept out"
      flog $Log $RMDir pact
   else
      NoteD $Log "The sources will be kept out"
   endif

   if ($RepositoryExport == "TRUE") then
      flog $Log $MV pact.tar.gz ../$DName.tar.gz

   else
      set Signature = "-----------------------***   SEPARATOR   ***-----------------------"

      flog $Log $RM pact-src
      flog $Log touch pact-src

      cat $HeaderFile >> pact-src
      echo "$Signature" >> pact-src
      echo "pact.tar.gz" >> pact-src
      cat pact.tar.gz >> pact-src

      flog $Log chmod a+x pact-src

      flog $Log $RM pact.tar.gz
      if ($LLNL == "TRUE") then
         flog $Log $MV pact-src ../$DName-llnl-src
      else
         flog $Log $MV pact-src ../$DName-src
      endif
   endif

   flog $Log touch $TmpFile
   flog $Log pwd
   if ($cwd =~ */manager/distribution) then
      flog $Log $RM $cwd/*
   endif

   NoteD $Log "Distribution for PACT version $VersionID made"
   NoteD $Log ""
   NoteD $Log "See the file $Log for more information"
   NoteD $Log ""

   return

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

