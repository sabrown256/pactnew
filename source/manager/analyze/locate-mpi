#!/bin/csh -f
#
# LOCATE-MPI - find the directory contains mpi.h
#
# Source Version: 3.0
# Software Release #: LLNL-CODE-422942
#
# include "cpyright.h"
#

if (-f ../scripts/functions-pact.csh) then
   set SrcDir = $cwd
else if (-f ../../scripts/functions-pact.csh) then
   set SrcDir = $cwd:h
endif
set ldir = $SrcDir:h/scripts
set path = ( $ldir $path )
source $ldir/functions-pact.csh
source $ldir/csh-subroutines
HAVE_SUBROUTINES

set ok      = FALSE
set HW      = ""
set SW      = ""
set Comp    = ""
set Verbose = FALSE

while ($#argv > 0)
   switch ($1)
      case -h:
           echo ""
           echo "Usage: locate-mpi [-h] [-v] <sw> <hw> <compiler>"
           echo "   h   this help message"
           echo "   v   run in verbose mode"
           echo "   <sw>        the MPI software (e.g. openmpi)"
           echo "   <hw>        the DP hardware (e.g. ib)"
           echo "   <compiler>  the compiler (e.g. gnu)"
           echo ""
           exit(1)
      case -v:
           set Verbose = TRUE
           breaksw
      default:
           if ("$SW" == "") then
              set SW = $1
           else if ("$HW" == "") then
              set HW = $1
           else if ("$Comp" == "") then
              set Comp = $1
           endif
   endsw
   shift
end

set vl = ""
set vl = ( $vl RPATH )
source $MngDir/write/import-db

setenv HAVE_OPENMPI FALSE
unsetenv DP_Inc
unsetenv DP_Lib
unsetenv DP_RPath
unsetenv DP_Path

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# DATABASE - if a database exists try to find an implementation
#          - accept the first match
#          - database consists of one or more stanzas
#          - lines beginning in '#' are comments
#          - blank lines are ignored
#          -
#          -   <stanza>     := Group '{' <spec> <link-line> '}'
#          -   <spec>       := <sw-line> | <hw-line> | <cmp-line> |
#          -                   <root-line> | <dir-lines>
#          -   <sw-line>    := 'SW' '=' <software implementation/vendor>
#          -   <hw-line>    := 'HW' '=' <switch hardware>
#          -   <cmp-line>   := 'Compiler' '=' <compiler> (defaults to 'any')
#          -   <link-line>  := 'Link' '=' [<archive> | <so>]+
#          -   <root-line>  := 'Root' '=' <path to bin lib and include directories>
#          -   <dir-lines>  := <bin-line> <lib-line> <inc-line>
#          -   <bin-line>   := 'Bin' '=' <path to MPI frontend - such as mpirun>
#          -   <lib-line>   := 'Lib' '=' <path to MPI libraries - such as libmpi.a>
#          -   <inc-line>   := 'Inc' '=' <path to MPI headers - particularly mpi.h>
#          -   <archive>    := use 'foo' for libfoo.a
#          -   <so>         := use 'foo' for libfoo.so
#

if (-f local/mpi-db) then
   set noglob

   set t = ( `wc -l local/mpi-db` )
   @ nl = $t[1]
   @ il = 0

   call RESET_STATE()

   if ($Verbose == TRUE) then
      echo "Seeking match for: $SW $HW $Comp"
      echo ""
   endif

   while ($il < $nl)
      @ il = $il + 1
      get_line line local/mpi-db $il

      if (("$line" =~ \#*) || ("$line" == "")) continue

      if ("$line" == "}") then

         set match = TRUE

# check for compiler mismatch
         if (("$Comp" != $lcmp) && ("$lcmp" != any)) then
            set match = FALSE
         endif

# check for implementation or HW mismatch
         if ((($limp != $SW) && ("$SW" != any)) || (($lhw != $HW) && ("$HW" != any))) then
            set match = FALSE
         endif

# check for imcomplete specifications
         if (("$lbin" == "") || ("$llib" == "")  || ("$linc" == "")  || ("$link" == "")) then
            set match = FALSE
         endif

         if ($match == TRUE) then
            if ($Verbose == TRUE) then
               echo "Check stanza ending on line ${il}:"
            endif
            call TRY($lbin, end, $llib, end, $linc, end, $link)
            if ($ok == TRUE) then
               if ($Verbose == TRUE) then
                  echo "Accepted: all components found"
                  echo ""
               endif
               break
            else
               if ($Verbose == TRUE) then
                  echo "Rejected: missing $missing"
                  echo ""
               endif
            endif
         endif
         call RESET_STATE()

      else
         switch ($line[1])
            case SW:
                 set limp = $line[3]
                 breaksw
            case Compiler:
                 set lcmp = $line[3]
                 breaksw
            case HW:
                 set lhw = $line[3]
                 breaksw
            case Bin:
                 set lbin = ( $line[3-] )
                 breaksw
            case Lib:
                 set llib = ( $line[3-] )
                 breaksw
            case Inc:
                 set linc = ( $line[3-] )
                 breaksw
            case Root:
                 set lbin = ""
                 set llib = ""
                 set linc = ""
                 foreach i ( $line[3-] )
                    set lbin = ( $lbin $line[3]/bin )
                    set llib = ( $llib $line[3]/lib )
                    set linc = ( $linc $line[3]/include )
                 end
                 breaksw
            case Link:
                 set link = ( $line[3-] )
                 breaksw
            case Group:
                 call RESET_STATE()
                 breaksw
         endsw
      endif
   end
   unset noglob

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# GUESS - try a guess because we have no database

else
   set lbin = /usr/bin
   set llib = $RootLib
   set linc = $RootInc
   set link = mpi
   call TRY($lbin, end, $llib, end, $linc, end, $link)
endif

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# FINISH - set the ultimate environment variables and prepare to export

if ($ok == TRUE) then
   set tinc = ""
   foreach i ( $linc )
      set tinc = ( $tinc -I$i )
   end
   setenv DP_Inc "$tinc"

   set libs = ""
   foreach i ( $link )
      set libs = ( $libs -l$i )
   end   
   setenv DP_Lib "$libs"

   setenv DP_RPath "$llib"
   setenv DP_Path  "$lbin"
endif

if ($SW == openmpi) then
   setenv HAVE_OPENMPI TRUE
else
   setenv HAVE_OPENMPI FALSE
endif

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# EXPORT - export the results

if ($?DP_Path == 1) then

# reverse DP_RPath so that RPATH gets built in correct order
   set rlib = ""
   foreach i ( $DP_RPath )
      set rlib = ( $i $rlib )
   end

   foreach i ( $rlib )
      fexvar /dev/null RPATH analyze/rpath -a $i -o echo
   end

   unset rlib

   dbmset /dev/null HAVE_OPENMPI = $HAVE_OPENMPI^  \
                    DP_Inc       = $DP_Inc^        \
                    DP_Lib       = $DP_Lib^        \
                    DP_RPath     = $DP_RPath^      \
                    DP_Path      = $DP_Path

else if ($Verbose == TRUE) then
   echo "No MPI found matching: $SW $HW $Comp"
endif

exit($status)

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# TRY - see if the specifications for bin, lib, include, and load libraries
#     - make any sense at all
#     - set ok to TRUE if so and FALSE if not

TRY:

   set larg = ( $args_ )

# get the bin list
   set tbin = ""
   while ($#larg > 0)
      set t = $larg[1]
      shift larg
      if ($t == end) then
         break
      else
         set tbin = ( $tbin $t )
      endif
   end

# get the lib list
   set tlib = ""
   while ($#larg > 0)
      set t = $larg[1]
      shift larg
      if ($t == end) then
         break
      else
         set tlib = ( $tlib $t )
      endif
   end

# get the inc list
   set tinc = ""
   while ($#larg > 0)
      set t = $larg[1]
      shift larg
      if ($t == end) then
         break
      else
         set tinc = ( $tinc $t )
      endif
   end

   set tlink = ( $larg )

   set ok      = FALSE
   set fbin    = FALSE
   set flib    = FALSE
   set finc    = FALSE
   set missing = ""

   @ i = 0

# test for the bin directory
   foreach e ( $tbin )
      if (-d $e) then
         @ i = $i + 1
         set fbin = TRUE
      endif
   end
   if ($fbin == FALSE) then
      set missing = ( $missing bin )
   endif

# test for the lib directory
   foreach e ( $tlib )
      if (-d $e) then
         @ i = $i + 1
         set flib = TRUE
      endif
   end
   if ($flib == FALSE) then
      set missing = ( $missing lib )
   endif

# test for the include directory
   foreach e ( $tinc )
      if (-d $e) then
         @ i = $i + 1

# test that mpi.h exists in the include directory
         if (-f $e/mpi.h) then
            @ i = $i + 1
            set finc = TRUE
         endif
      endif
   end
   if ($finc == FALSE) then
      set missing = ( $missing include )
   endif

   @ n = $#tbin + $#tlib + $#tinc + 1

# if everything is ok look for the load libraries
   if ($i == $n) then
      set ok = TRUE
      foreach i ($tlink)
         if ("$i" =~ *mpi*) then
            set found = FALSE
            foreach e ( $tlib )
               if ((-f $e/lib$i.a) || (-f $e/lib$i.so)) then
                  set found = TRUE
                  break
               endif
            end
            if ($found == FALSE) then
               set ok = FALSE
               break
            endif
         endif
      end
   endif

   if ($Verbose == TRUE) then
      if ($fbin == TRUE) then
         echo "      have bin ($tbin)"
      else
         echo "      no bin ($tbin)"
      endif
      if ($flib == TRUE) then
         echo "      have lib ($tlib)"
      else
         echo "      no lib ($tlib)"
      endif
      if ($finc == TRUE) then
         echo "      have inc ($tinc)"
      else
         echo "      no inc ($tinc)"
      endif
   endif

   return

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# RESET_STATE - (re)initialize the state variables

RESET_STATE:

   set lbin = ""
   set llib = ""
   set linc = ""
   set link = ""
   set limp = ""
   set lhw  = ""
   set lcmp = any

   return

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------
