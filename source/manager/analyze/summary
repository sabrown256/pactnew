#!/bin/csh -f
#
# SUMMARY - summarize important PACT configuration information
#
# Source Version: 3.0
# Software Release #: LLNL-CODE-422942
#
# include "cpyright.h"
#

set Me = $0
source $Me:h/common

dbmget $Log HAVE_FORTRAN^     \
            HAVE_PYTHON^      \
            HAVE_PY_NUMERIC^  \
            HAVE_PY_NUMPY^    \
            MAKE_Exe^         \
            MAKE_Shared_Libs^ \
            BaseDir^          \
            SYS_Root^         \
            SYS_ID^           \
            PY_Exe^           \
            PY_Ext^           \
            PY_DirPy^         \
            PY_DirSrc^        \
            PY_DirDst^        \
            CC_Exe^           \
            Cfe_CC_Exe^       \
            FC_Exe^           \
            FC_Flags^         \
            Cfe_FC_Exe^       \
            Cfe_FC_Flags^     \
            Yacc_Exe

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

    NoteD $Log "Configuration Summary for $SYS_ID"

    if (($?Cfe_CC_Exe == 0) || ("$Cfe_CC_Exe" == "none") || ("$Cfe_CC_Exe" == "")) then
       NoteD $Log "   ERROR: No C compiler available - check your system or your path"
       NoteD $Log ""
       exit(1)
    else
       set UCC = `$MngDir/pwhich $CC_Exe`
       NoteD $Log "   C Compiler used is $UCC"
    endif

    if ($HAVE_FORTRAN == FALSE) then
       if (($?Cfe_FC_Exe == 0) || ("$Cfe_FC_Exe" == "none")) then
          NoteD $Log "   No Fortran compiler found"
       else
          NoteD $Log "   Not building Fortran bindings"
       endif
    else if ("$Cfe_FC_Exe" == "") then
       NoteD $Log "   ERROR: No Fortran compiler available - check your system or your path"
       NoteD $Log ""
    else
       set UFC = `$MngDir/pwhich $FC_Exe`
       if (-x "$UFC") then
          NoteD $Log "   Fortran Compiler used is $UFC"
       else
          NoteD $Log "   Fortran Compiler requested is $Cfe_FC_Exe (not available)"
       endif
    endif

    if ("$Bits" != "") then
       NoteD $Log "   Building for $Bits bit pointers"
    endif

    if ($CROSS_COMPILE != "FALSE") then
       NoteD $Log "   Cross compiling for target $CROSS_COMPILE"
    endif

    if ($MAKE_Shared_Libs == TRUE) then
       NoteD $Log "   Building shared libraries"
    else
       NoteD $Log "   Building static libraries"
    endif

    Note $Log "   Cfg C Compiler used is $Cfe_CC_Exe"
    Note $Log "   Cfg Fortran Compiler used is $Cfe_FC_Exe"

    if ($AbsoluteDeb == TRUE) then
       NoteD $Log "   Building absolutely debuggable version"
       dbset BUILD_DEBUG TRUE
    endif

    if ($AbsoluteOpt == TRUE) then
       NoteD $Log "   Building absolutely optimized version"
       dbset BUILD_OPTIMIZE TRUE
    endif

    if ($Profile == TRUE) then
       NoteD $Log "   Building profiling version"
       dbset BUILD_PROFILE TRUE
    endif
       
# PY_Exe     the full path to the python executable
# PY_Ext     the extension/wrapper set name (e.g. 2.numpy)
# PY_Vers    the version of the python executable
# PY_Path    addition to path in order to find python executable
#            this comes from config files only
# PY_DirSrc  pact/dev/$SYS_ID/lib/pythond.d       (install to PY_DirDst and PY_DirPy)
# PY_DirDst  pact    lib/pythond.d                (install into)
# PY_DirPy   python  lib/pythond.d/site-packages  (install into)

    if (("$HAVE_PYTHON" =~ *TRUE*) && ($MAKE_Shared_Libs == TRUE)) then
       NoteD $Log "   Python bindings will be built in:"
       set lhave_python = ( $HAVE_PYTHON )
       set lpy_ext      = ( $PY_Ext )
       set lpy_dirpy    = ( $PY_DirPy )
       set lpy_dirsrc   = ( $PY_DirSrc )
       set lpy_dirdst   = ( $PY_DirDst )
  
       @ n = $#lhave_python
       @ i = 0
       while ($i < $n)
          @ i = $i + 1
          if ($lhave_python[$i] == TRUE) then
             set lex = $lpy_ext[$i]
             set ldp = $lpy_dirpy[$i]
             set ldd = $lpy_dirdst[$i]
             set lds = $lpy_dirsrc[$i]

             flog $ALog mkdir -p $ldp

             NoteD $Log "      $lex -> $lds"
             if ("$SYS_InstRoot" != none) then
                NoteD $Log "   Python bindings will be installed in:"
                NoteD $Log "      $ldd"
                if (-d $ldp) then
                   NoteD $Log "      $ldp"
                else
                   NoteD $Log "      $ldp (no permissions)"
                endif
             endif
          endif
       end
       unset ldp
       unset ldd
       unset lds
       unset lpy_dirpy
       unset lpy_dirsrc
       unset lpy_dirdst
       unset lhave_python

    else if ($MAKE_Shared_Libs == FALSE) then
       NoteD $Log "   Python bindings will not be built (need shared library option)"
    else if ("$PY_Exe" == "wrong-cc") then
       NoteD $Log "   Python bindings will not be built (wrong compiler)"
    else if ("$PY_Exe" == "no-numeric") then
       NoteD $Log "   Python bindings will not be built (no numeric extensions)"
    else if ("$PY_Exe" == "") then
       NoteD $Log "   Python bindings will not be built (no python)"
    endif

    if ("$Yacc_Exe" == "") then
       NoteD $Log "   Scheme syntax modes will not be built (no yacc or bison)"
    endif

    if ($UseTmpDir == TRUE) then
       NoteD $Log "   Doing fast builds using /tmp"
    endif

    NoteD $Log "   Building into $cwd:h/dev/$SYS_ID"

    NoteD $Log ""

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# PRE-INSTALL - do any installations that need to be done before
#             - writing generated files

# ensure that the PSH files are installed in $IncDir/shell
# before the write scripts are invoked
# some of them include these files

Note $Log "Install shell includes from psh"

flog $Log pushd $BaseDir/psh
flog $Log $MAKE_Exe IncDir=$SYS_Root/include -f pre-Make mkinstall
flog $Log popd

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

exit(0)

