#!/bin/csh -f
#
# OPENMP - analyze the handling of OpenMP
#
# Source Version: 3.0
# Software Release #: LLNL-CODE-422942
#
# include "cpyright.h"
#

set Me = $0
source $Me:h/common

Note $ALog "----- analyze/openmp -----"
Note $ALog "Analyze: OpenMP"
Note $ALog ""

dbmget $ALog PTHREAD_OMP =\? FALSE^ \
             Cfe_CC_Exe^            \
             Cfe_CC_Flags^          \
             Cfe_LD_Flags^          \
             Cfe_LD_Lib^            \
             Cfe_LD_RPath^          \
             PACT_CC_VERSION

setenv STD_OPENMP  unknown

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# check for OpenMP support

cat << EOF >! $Tmp.c
int main(int c, char **v)
{int np;
 extern int omp_get_num_procs(void);
 np = omp_get_num_procs();
 return(0);}
EOF

setenv HAVE_OPENMP FALSE

set opt = ""
set opt = ( $opt $Cfe_CC_Flags )
set opt = ( $opt $Cfe_LD_Flags $Cfe_LD_RPath )
set opt = ( $opt $Cfe_LD_Lib )

set msg = "no OpenMP"
flog $ALog $Cfe_CC_Exe $Tmp.c -o $Tmp $opt
if ($status == 0) then
   if ($PTHREAD_OMP == FALSE) then
      set msg = "$msg (by request)"
   else
      setenv HAVE_OPENMP TRUE
      set msg = "has OpenMP"
   endif
endif

flog $ALog rm -f $Tmp.c $Tmp

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# check for OpenMP standard level

if ($HAVE_OPENMP == TRUE) then

   if ("$STD_OPENMP" == unknown) then

      Note $ALog "Look for _OPENMP macro version"
      cat << EOF >! $Tmp.c
#include <omp.h>
#include <stdio.h>
int main(int c, char **v)
{int n;
 printf("%d\n", _OPENMP);
 return(0);}
EOF

      flog $ALog $Cfe_CC_Exe $Tmp.c -o $Tmp $opt
      if ($status == 0) then
         flog $ALog $Tmp
         if ($status == 0) then
            setenv STD_OPENMP `$Tmp`
         endif
      endif

      flog $ALog rm -f $Tmp.c $Tmp
   endif

   if ("$STD_OPENMP" == unknown) then

      Note $ALog "Look for OPENMP 4.0 features"

# version 4.0 adds omp_get_level
      cat << EOF >! $Tmp.c
#include <omp.h>
int main(int c, char **v)
{int n;
 extern int omp_get_level(void);
 n = omp_get_level();
 return(0);}
EOF

      flog $ALog $Cfe_CC_Exe $Tmp.c -o $Tmp $opt
      if ($status == 0) then
         setenv STD_OPENMP 4.0
         setenv STD_OPENMP 201211
      endif

      flog $ALog rm -f $Tmp.c $Tmp
   endif

   if ("$STD_OPENMP" == unknown) then

      Note $ALog "Look for OPENMP 3.0 features"

# version 3.0 adds omp_set_schedule and omp_get_schedule
      cat << EOF >! $Tmp.c
#include <omp.h>
int main(int c, char **v)
{int m;
 omp_sched_t k;
 extern void omp_get_schedule(omp_sched_t *kind, int *mod);
 omp_get_schedule(&k, &m);
 return(0);}
EOF

      flog $ALog $Cfe_CC_Exe $Tmp.c -o $Tmp $opt
      if ($status == 0) then
         setenv STD_OPENMP 3.0
         setenv STD_OPENMP 200805
      endif

      flog $ALog rm -f $Tmp.c $Tmp
   endif

   if ("$STD_OPENMP" == unknown) then

      Note $ALog "Look for OPENMP 2.5 features"

# version 2.5 adds omp_get_dynamic and omp_get_nested
      cat << EOF >! $Tmp.c
#include <omp.h>
int main(int c, char **v)
{int n;
 extern int omp_get_dynamic(void);
 n = omp_get_dynamic();
 return(0);}
EOF

      flog $ALog $Cfe_CC_Exe $Tmp.c -o $Tmp $opt
      if ($status == 0) then
         setenv STD_OPENMP 2.5
         setenv STD_OPENMP 200505
      endif

      flog $ALog rm -f $Tmp.c $Tmp
   endif

   if ("$STD_OPENMP" == unknown) then

      Note $ALog "Look for OPENMP 2.0 features"

# version 2.0 adds omp_get_wtick and omp_get_wtime
      cat << EOF >! $Tmp.c
#include <omp.h>
int main(int c, char **v)
{int np;
 extern int omp_get_wtick(void);
 np = omp_get_wtick();
 return(0);}
EOF

      flog $ALog $Cfe_CC_Exe $Tmp.c -o $Tmp $opt
      if ($status == 0) then
         setenv STD_OPENMP 2.0
         setenv STD_OPENMP 200203
      endif

      flog $ALog rm -f $Tmp.c $Tmp
   endif

# take it to be version 1.0
   if ("$STD_OPENMP" == unknown) then
       Note $ALog "Assumed OPENMP 1.0"
       setenv STD_OPENMP 1.0
   endif

   NoteD $ALog "      $msg ($STD_OPENMP)"
else
   NoteD $ALog "      $msg"
endif

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# export the results
dbmset $ALog HAVE_OPENMP = $HAVE_OPENMP^            \
             STD_OPENMP  = $STD_OPENMP

exit(0)

