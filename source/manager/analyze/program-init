#
# PROGRAM-INIT - define PACT wide variables and give them default values
#
# Source Version: 3.0
# Software Release #: LLNL-CODE-422942
#
# include "cpyright.h"
#

Note "Initializing configuration"

run analyze/default-bits

# include PACT libraries in RPATH for the memory manager interposers
run analyze/rpath -i init

# dynamically link dependent libraries by default
include features/dld

setenv ENV_VARS "Bits OS_Name \
                 CROSS_FE CROSS_COMPILE CROSS_REF \
                 DB_CFGMAN DB_HOST_SERVER \
                 DB_RUN_SIGNATURE DB_SITE_SIGNATURE DB_UPDATE_SYS \
                 DO_RUN_DBG DO_RUN_MPI DO_RUN_CROSS \
                 GLIBC_VERSION BFD_VERSION \
                 HDF_VERSION MYSQL_VERSION SQLITE3_VERSION \
                 PNG_VERSION JPEG_VERSION \
                 PACT_VERSION \
                 CC_Exe CC_Flags \
                 CC_Debug_Default CC_Optimize_Default \
                 Cfg_CC_Exe Cfg_CC_Flags Cfg_CC_Inc \
                 CXX_Exe CXX_Flags CXX_Linker \
                 FC_Exe FC_Flags \
                 FC_Debug_Default FC_Optimize_Default \
                 DP_FE DP_Inc DP_Lib DP_RPath DP_Path \
                 JOBS_System \
                 LIB LibM_Lib LibM_RPath \
                 MDG_Inc MDG_Lib MDG_RPath MDG_Path \
                 MAKE_Exe MAKE_SUFFIXES \
                 PACT_CC_FAMILY PACT_CC_VERSION PACT_CC_PATH PACT_CC_EXE \
                 PACT_FC_FAMILY PACT_FC_VERSION PACT_FC_PATH PACT_FC_EXE \
                 PY_Inc PY_Lib PY_RPath PY_Path PY_Vers PY_Ext \
                 HAVE_PYTHON HAVE_PY_NUMERIC HAVE_PY_NUMPY \
                 TEST_ADVISORY TRACKER_Exe HAVE_OPENMP \
                 HSY_RootInc HSY_RootLib \
                 PSY_FltDir \
                 PSY_Prefix PSY_CfgDir PSY_TmpDir PSY_Arch PSY_ID \
                 PSY_SITE PSY_TYPE PSY_Root PSY_AIRoot PSY_ASRoot"

LIB              = lib

#--------------------------------------------------------------------------

# initialize standard tools

Tool ACC {
}

Tool AFC {
}

Tool CC {
}

Tool CXX {
}

Tool DO_RUN {
   DBG   = none
   MPI   = none
   CROSS = none
}

Tool FC {
   MOD_FLAG = -I
}

Tool IMF {
}

Tool INSTALL {
   Exe = cp
}

Tool LD {
   SpokeDepLib =
}

Tool Lex {
}

Tool Yacc {
}

Tool GMAKE {
}

Tool HDF5 {
}

Tool JOBS {
   System = loner
}

Tool MAKE {
   Shared_Libs = FALSE
   SUFFIXES    = ".i"
}

Tool MYSQL {
}

Tool NM {
   Exe = nm
   Cmd = "$NM_Exe -g"
}

Tool OPENSSL {
}

# PY contains the specifics of the python versions
# to be used as derived from the specifications in
# the Python group

Tool PY {
}

Tool Ranlib {
}

Tool SQLITE3 {
}

Tool TRACKER {
}

#--------------------------------------------------------------------------

# initialize standard groups

# analyzed features - detected, defined, or computed - post analyze

Group AF {
   PATTERN_WARN     =
   PATTERN_ERR      =
}

Group BFD {
   Flags = 
   Inc   =
   Lib   = -lbfd
   RPath = 
   Path  = 
}

Group Cfg {
}

Group Cfe {
}

# cross compiling group
Group CROSS {
   COMPILE = FALSE
   REF     = ""
}

# database group
Group DB {
   CFGMAN         =
   HOST_SERVER    = 
   RUN_SIGNATURE  = 
   SITE_SIGNATURE =
   UPDATE_SYS     = 
}

# Distributed Parallel processing group
Group DP {
   Inc   = ""
   Lib   = ""
   RPath = /usr/lib
   Path  = /usr/bin
}

# specifications for FPE patching
Group FPE {
   Exe    = gcc
   Flags  = -g -Wall
   Flags += -fPIC
}

Group GSL {
}

Group GRAPHICS {
}

# the HAVE group contains features that have been requested, verified to
# exist, and ready to use
# these mostly imply that they will be used (see USE group)

Group HAVE {
}

Group HDF {
   Inc   = 
   Lib   = 
   RPath = 
   Path  = 
}

# Host SYstem information
#   HSY_Host      the system host name

Group HSY {
   Host     = ${HSY_Host}

# GOTCHA: this root may be different for CROSS_COMPILE
# need script to figure out root includes for given compiler
   RootInc  = /usr/include
   RootLib  = /usr/lib

}

Group HW {
}

Group LEH {
   TTY_ECHO  = TRUE
   TTY_CRNL  = TRUE
   TTY_VTIME = TRUE
}

# other machine dependent packages for PACT - e.g. RL
Group MD {
   Inc   = ""
   Lib   = ""
   Pck   = ""
}

# machine dependent graphics for PGS - e.g. X11
Group MDG {
   Inc   = ""
   Lib   = ""
   Pck   = ""
}

# machine dependent I/O for PDB - e.g. SQL
Group MDI {
   Inc   = ""
   Lib   = ""
   Pck   = ""
}

# machine dependent executable access - e.g. BFD
Group MDE {
   Inc   = ""
   Lib   = ""
   Pck   = ""
}

# Open MP group
Group OpenMP {
   SharedFnc = no
}

Group OS {
}

# PACT_CC_ refers to the Compiler Collection used to build PACT
# rather than COMPILER_ which is overloaded to the extreme

Group PACT {
   CFG_FILE   = ""
   CFG_ID     = ""
   CC_FAMILY  = generic
   CC_EXE     = `which cc`
   CC_VERSION = ""
   FC_FAMILY  = generic
   FC_VERSION = ""
}

# PACT System group
#   PSY_Arch         the system ID as defined by 'system-id'
#   PSY_Cfg          the system config file
#   PSY_CfgMan       full path to the cfgman utility
#   PSY_CONFIG_PATH  list of directories where config files may be found
#   PSY_ID           the system ID as defined by 'cfgman use'
#   PSY_Prefix       the temporary directory prefix, e.g. "z-"
#   PSY_TYPE         the system type as defined by 'site-signature'
#   PSY_SITE         the site of the system as defined by 'site-signature'
#
#   PSY_Base         the base directory containing sources
#   PSY_Root         the root dev directory for this PSY_ID
#   PSY_AIRoot       the architecture independent root directory
#   PSY_ASRoot       the architecture specific root directory
#   PSY_InstRoot     the root installation directory
#   PSY_PubInc       the public PACT installation include directory
#   PSY_PubLib       the public PACT installation lib directory
#
#   PSY_AnaDir       the manager/analyze directory
#   PSY_CfgDir       the temporary configuration directory
#   PSY_FltDir       the directory containing filter files
#   PSY_MngDir       the manager directory
#   PSY_ScrDir       the scripts directory
#   PSY_TmpDir       the temporary build/test directory

Group PSY {
   Arch        = ${PSY_Arch}
   Cfg         = ""
   CfgMan      = ${PSY_CfgMan}
   CONFIG_PATH = ${PSY_CONFIG_PATH}

   ID          = ${PSY_ID}
   Prefix      = "z-"
   TYPE        = ""
   SITE        = ""

   Base        = ${PSY_Base}
   Root        = ${PSY_Root}
   AIRoot      = ""
   ASRoot      = ""
   InstRoot    = ${PSY_InstRoot}
   PubInc      = ${PSY_PubInc}
   PubLib      = ${PSY_PubLib}

   AnaDir      = ${PSY_Base}/manager/analyze
   CfgDir      = cfg-${PSY_ID}
   FltDir      = ""
   MngDir      = ${PSY_Base}/manager
   ScrDir      = ${PSY_Base}/scripts
   TmpDir      = ${PSY_Prefix}${PSY_ID}
}

# requested features - pre-analyze
Group RF {
   SPOKES_C      =
   SPOKES_SCHEME = netcdf
}

Group RL {
}

Group Shared {
   CC_Flags =
   CC_Inc   =
   LD_RPath =
   LD_Flags =
   LD_Lib   =
}

Group SHELL {
}

Group SMP {
   OpenMP  = FALSE
   Pthread = FALSE
   LibExt  =
}

Group SQL {
}

Group SSL {
}

Group STD {
   C      = X99
   F      = F2003
   IPC    = POSIX
   POSIX  = 200112
   XOPEN  = 600
   MPI    = none
   OPENMP = none
}

Group TEST {
   ADVISORY = ""
}

# the USE group contains features that have been requested, verified to
# exist, ready to use, and chosen over other options
# there are a few things that we HAVE but choose not use USE
# this group clarifies the intention (see HAVE group)

Group USE {
   IMF = FALSE
   MPI = FALSE
}

#--------------------------------------------------------------------------

# functionally related groups

# graphics device groups
Group JPEG {
}

Group OGL {
}

Group PNG {
}

Group QD {
}

Group X11 {
}

Group Z {
}

# Math library
Group LibM {
}

Group BLAS {
}

Group LAPACK {
}

