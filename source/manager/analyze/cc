#!/bin/csh -f
#
# CC - analyze the platform C Compiler
#
# Source Version: 3.0
# Software Release #: LLNL-CODE-422942
#
# include "cpyright.h"
#

set Me = $0
source $Me:h/pre-common

Note $ALog "Analyze: cc"

Note $ALog "----- analyze/cc -----"
Note $ALog "Analyze: C compiler"
Note $ALog ""

if ($CROSS_COMPILE == "FALSE") then
   Note $ALog "Direct compiling C compiler analysis"
else
   Note $ALog "Cross compiling C compiler analysis"
endif

# NOTE: we cannot have nothing for CC_Exec
# if nothing is specified try cc

dbmget $ALog CC_Exe       =\? cc^      \
             CC_Flags     =\? ""^      \
             CC_Inc       =\? ""^      \
             CC_Debug     =\? -g^      \
             CC_Optimize  =\? -O^      \
             CC_Linker    =\? ""^      \
             CXX_Flags    =\? ""^      \
             CXX_Inc      =\? ""^      \
             CXX_Debug    =\? -g^      \
             CXX_Optimize =\? -O^      \
             CXX_Linker   =\? ""^      \
             DP_Inc       =\? ""^      \
             Cfg_CC_Inc^               \
             Cfg_CC_Flags^             \
             CROSS_FE^                 \
             DP_BE^                    \
             HSY_OS_Name^              \
             IBM_HW^                   \
             PACT_CC_FAMILY^           \
             PACT_CC_VERSION^          \
             PACT_CC_PATH^             \
             PACT_CC_EXE^              \
             PSY_MngDir^               \
             RF_STRICT^                \
             Ser_CC_Flags^             \
             USE_LDLibPath =\? ""


set UTime = `timer -r`

setenv AnsiCC     ""

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# PICK-COMPILER - remember the requested compiler or at least cc

flog $ALog setenv Save_CC $CC_Exe

set cclst = ""
if ($?CC_Exe == 1) then
   set cclst = ( $cclst $CC_Exe )
endif
if ($?Cfg_CC_Exe == 1) then
   set cclst = ( $cclst $Cfg_CC_Exe )
endif

set msg = "C Compiler:"

Note $ALog ""
Note $ALog "Candidate C compilers: $cclst"
Note $ALog ""

# find the available ANSI C compilers
set AnsiCC = ( `../analyze/cc-find $USE_LDLibPath $cclst` )

Note $ALog ""
Note $ALog "ANSI C compilers: $AnsiCC"
Note $ALog ""

if ("$AnsiCC" != "") then
   if ($#AnsiCC > 1) then
      set msg = "$msg $AnsiCC[1] (others $AnsiCC[2-])"
   else
      set msg = "$msg $AnsiCC"
   endif
else
   set msg = "$msg none"
   NoteD $ALog "   $msg"
   NoteD $ALog "      No ANSI C compiler found, PACT cannot be built without one"
   dbexp STOP
   exit(0)
endif
NoteD $ALog "   $msg"

# make sure we have a Cfg compiler defined
if ($?Cfg_CC_Exe == 0) then
   flog $ALog setenv Cfg_CC_Exe "$CC_Exe"
endif

# check requested compilers against the list of ANSI compilers
foreach cc ( $CC_Exe $Cfg_CC_Exe)
   set ok = FALSE
   foreach i ($AnsiCC)
      if ($cc == $i) then
         set ok = TRUE
      endif
   end
   if ($ok == FALSE) then
      NoteD $ALog " "
      NoteD $ALog "      Requested compiler $cc is not ANSI by default"
      NoteD $ALog " "
   endif
endif

if ($CROSS_COMPILE == "FALSE") then
   flog $ALog setenv Cfe_CC_Exe    $Cfg_CC_Exe
else
   flog $ALog setenv Cfe_CC_Exe    $CC_Exe
endif

# now lets look at this compiler
if ($Cfg_CC_Exe != "") then

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# VERIFY-FLAGS - verify each compiler flag
#              - man pages sometimes lie
#              - gcc flags are particularly volatile

   Note $ALog "Verify requested compiler flags"

# NOTE: properly this is done in analyze/ld but we need to bootstrap
# our way through compiler issues before getting to analyze/ld
# so set this temporary
   set lrpath = `../analyze/rpath -o rpath`

   cat << EOF >! $Tmp.c
#include <stdio.h>
int main(int c, char **v)
{if (sizeof(int) != sizeof(char *))
    printf("TRUE");
 else
    printf("FALSE");
 return(0);}
EOF

   flog $ALog cat $Tmp.c

# verify CC_Flags
   Note $ALog ""
   Note $ALog "Verifying '$CC_Flags' for $Cfg_CC_Exe"
   set flgs = ( `$PSY_MngDir/verify-flags -c $Cfg_CC_Exe -a "$lrpath $Tmp.c -o $Tmp" $CC_Flags` )

   flog $ALog setenv CC_Flags "$flgs"

# verify Cfg_CC_Flags
   Note $ALog ""
   if ($?Cfg_CC_Flags == 1) then
      Note $ALog "Verifying '$Cfg_CC_Flags' for $Cfg_CC_Exe"
      set flgs = ( `$PSY_MngDir/verify-flags -c $Cfg_CC_Exe -a "$lrpath $Tmp.c -o $Tmp" $Cfg_CC_Flags` )

      flog $ALog setenv Cfg_CC_Flags "$flgs"

# make sure we have flags for configuration compiler
   else
      Note $ALog "Initialize Cfg_CC_Flags to be $Cfg_CC_Flags"
      flog $ALog setenv Cfg_CC_Flags "$CC_Flags"
   endif

# verify Ser_CC_Flags
   Note $ALog ""
   if ($?Ser_CC_Flags == 1) then
      Note $ALog "Verifying '$Ser_CC_Flags' for $Cfg_CC_Exe"
      set flgs = ( `$PSY_MngDir/verify-flags -c $Cfg_CC_Exe -a "$lrpath $Tmp.c -o $Tmp" $Ser_CC_Flags` )

      flog $ALog setenv Ser_CC_Flags "$flgs"
   endif

   unset flgs
   unset lcc

   Note $ALog ""

# remember the requested flags and setup for configuration purposes
   flog $ALog setenv Save_CFLAGS "$CC_Flags"
   Note $ALog ""

   if ("$Cfg_CC_Inc" != "") then
      Note $ALog "Add config include flags to CC_Flags: $Cfg_CC_Inc"
      flog $ALog setenv CC_Flags "$CC_Flags $Cfg_CC_Inc"
      Note $ALog ""
   endif

# temporarily add debug flags to compiler flags for config
   if ($?Cfg_CC_Debug == 1) then
      Note $ALog "Add config debug flags to CC_Flags: $CC_Debug"
      flog $ALog setenv CC_Flags "$CC_Flags $CC_Debug"
      flog $ALog setenv Cfg_CC_Flags "$Cfg_CC_Flags $Cfg_CC_Debug"
      Note $ALog ""
   endif

   if ($CROSS_COMPILE == "FALSE") then
      flog $ALog setenv Cfe_CC_Flags  "$Cfg_CC_Flags"
      flog $ALog setenv Cfe_CC_Inc    "$Cfg_CC_Inc"
   else
      flog $ALog setenv Cfe_CC_Flags  "$CC_Flags"
      flog $ALog setenv Cfe_CC_Inc    "$CC_Inc"
   endif

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# CANONICAL-INVOCATION - set canonical compiler invocation
#                      - for characterizing compiler
#                      - NOTE: lCC is used in the cc-xxx scripts
#                      - which are executed below

   set lcc = `which $Cfe_CC_Exe`
   if ("$lcc" =~ $PSY_AIRoot/pact/scripts/*) then
      setenv lCC   `echo $Cfe_CC_Exe -cwvrb $Cfe_CC_Flags $lrpath | sed 's|\"||g'`
   else
      setenv lCC   `echo $Cfe_CC_Exe $Cfe_CC_Flags $lrpath | sed 's|\"||g'`
   endif
   Note $ALog "lCC = $lCC"
   unset lcc

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# COMPILER-VERSION - check the compiler version

   Note $ALog ""
   Note $ALog "Check the version of the C compiler"
   Note $ALog "   PATH   = $PATH"
   Note $ALog "   FAMILY = $PACT_CC_FAMILY"
   flog $ALog which $Cfe_CC_Exe

   if ($HSY_OS_Name == SunOS) then
      flog $ALog $Cfg_CC_Exe $CC_Version
      flog $ALog set CmpVers = any
      set xstatus = $status
   else if ($PACT_CC_FAMILY == CLANG) then
      flog $ALog gexec $Cfg_CC_Exe $CC_Version @b grep $PACT_CC_VERSION
      flog $ALog set CmpVers = $PACT_CC_VERSION
      set xstatus = $status
   else if ($PACT_CC_FAMILY == GNU) then
      flog $ALog gexec $Cfg_CC_Exe $CC_Version @b grep $PACT_CC_VERSION
      flog $ALog set CmpVers = $PACT_CC_VERSION
      set xstatus = $status
   else if ($PACT_CC_FAMILY == PGI) then
      flog $ALog gexec $Cfg_CC_Exe $CC_Version @b grep $PACT_CC_VERSION
      flog $ALog set CmpVers = $PACT_CC_VERSION
      set xstatus = $status
   else if ($PACT_CC_FAMILY == INTEL) then
      flog $ALog gexec $Cfg_CC_Exe $CC_Version @b grep $PACT_CC_VERSION
      flog $ALog set CmpVers = $PACT_CC_VERSION
      set xstatus = $status
   else if ($PACT_CC_FAMILY == PATHSCALE) then
      flog $ALog gexec $Cfg_CC_Exe $CC_Version @b grep $PACT_CC_VERSION
      flog $ALog set CmpVers = $PACT_CC_VERSION
      set xstatus = $status
   else
      fexvars $ALog t $Cfg_CC_Exe $CC_Version @b grep version
      Note $ALog "Compiler version = $t"

      fexvars $ALog t echo $t @o sed 's/gcc version//'
      Note $ALog "GCC version      = $t"
      if ("$t" =~ 3.*) then
         fexvars $ALog Cfg_CC_Flags echo "$Cfg_CC_Flags" @o sed "s| -fsignaling-nans||"
         fexvars $ALog Save_CFLAGS  echo "$Save_CFLAGS" @o sed "s| -fsignaling-nans||"
         fexvars $ALog CC_Flags     echo "$CC_Flags" @o sed "s| -fsignaling-nans||"
      endif
      flog $ALog $Cfg_CC_Exe $CC_Version
      flog $ALog set CmpVers = any
      set xstatus = $status
      unset t
   endif

   if ($xstatus == 0) then
      NoteD $ALog "      requested version $CmpVers"
   else if (("$CmpVers" != any) && ($RF_STRICT> 0)) then
      NoteD $ALog "      requested version $CmpVers (not found)"
      dbexp STOP
      exit(0)
   else
      NoteD $ALog "      requested version $CmpVers (not found)"
   endif
   Note $ALog ""

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# FORTRAN-INTEGER - check the relative size of Fortran integer and pointer

   Note $ALog "Determine whether a FORTRAN integer can hold a pointer"

   setenv FC_INT_PTR_DIFFER FALSE

   flog $ALog $lCC $Tmp.c -o $Tmp
   if ($status == 0) then

      flog $ALog $CROSS_FE $Tmp $DP_BE
      fexvar $ALog FC_INT_PTR_DIFFER $CROSS_FE $Tmp $DP_BE
      if ("$FC_INT_PTR_DIFFER" == TRUE) then
         NoteD $ALog "      pointer size differs from Fortran INTEGER size"
      endif

   else
      Note $ALog ""
      Note $ALog "--Compilation failed--"
      Note $ALog "/* $lCC $Tmp.c -o $Tmp */"
      cat $Tmp.c >>& $ALog
      Note $ALog ""
   endif
   Note $ALog ""

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# SIZEOF-LONG - look at size of long

   Note $ALog "Determine whether long is 64 bits"
   cat << EOF >! $Tmp.c
#include <stdio.h>
int main(int c, char **v)
{if (sizeof(long) == 8)
    printf("AF_LONG8");
 return(0);}
EOF

   flog $ALog cat $Tmp.c
   flog $ALog $lCC $Tmp.c -o $Tmp
   if ($status == 0) then
      set AF_LONG8 = `$CROSS_FE $Tmp $DP_BE`
   else
      NoteD $ALog " "
      NoteD $ALog " "
      NoteD $ALog "One or more flags from:"
      NoteD $ALog "   $Cfe_CC_Flags"
      NoteD $ALog "are incorrect for $Cfe_CC_Exe - failed"
      dbexp STOP
      exit(0)
   endif
   Note $ALog ""

   flog $ALog rm -f $Tmp.c $Tmp $Tmp.o

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# SIZEOF-SIZE_T - look at size of size_t

   Note $ALog "Determine whether size_t is 64 bits"
   cat << EOF >! $Tmp.c
#include <stdio.h>
int main(int c, char **v)
{if (sizeof(size_t) != 8)
    printf("TRUE");
 return(0);}
EOF

   flog $ALog cat $Tmp.c
   flog $ALog $lCC $Tmp.c -o $Tmp
   if ($status == 0) then
      set af_alt_large_file = `$CROSS_FE $Tmp $DP_BE`
   else
      NoteD $ALog " "
      NoteD $ALog " "
      NoteD $ALog "One or more flags from:"
      NoteD $ALog "   $Cfe_CC_Flags"
      NoteD $ALog "are incorrect for $Cfe_CC_Exe - failed"
      dbexp STOP
      exit(0)
   endif
   Note $ALog ""

   flog $ALog rm -f $Tmp.c $Tmp $Tmp.o

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# OSX-ARCH - check for -arch flag

   if ("$HSY_OS_Name" == Darwin) then

      Note $ALog "Determine whether -arch flag is needed on GCC/OSX"
      cat << EOF >! $Tmp.c
#include <stdio.h>
int main(int c, char **v)
{int rv;
#ifdef __GNUC__
 printf("ok\n");
 rv = 0;
#else
 printf("ng\n");
 rv = 1;
#endif
 return(rv);}
EOF

      set hw = `uname -m`
      flog $ALog which $Cfe_CC_Exe
      flog $ALog cat $Tmp.c
      flog $ALog $lCC -arch $hw $Tmp.c -o $Tmp
      if ($status == 0) then
         flog $ALog $Tmp
         if ($status == 0) then
#            setenv CC_Flags     "$CC_Flags -arch $hw"               
#            setenv Cfg_CC_Flags "$Cfg_CC_Flags -arch $hw"               
#            setenv Cfe_CC_Flags "$Cfe_CC_Flags -arch $hw"               
            NoteD $ALog "      adding -arch $hw"
         endif
      endif
      unset hw
      Note $ALog ""

      flog $ALog rm -f $Tmp.c $Tmp $Tmp.o
   endif

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

   set ETime = `timer -b $UTime`

   setenv AF_CList "$AnsiCC"

   Note $ALog ""
   Note $ALog "Results of C compiler analysis ($ETime)"
   Note $ALog "   AnsiCC             = |$AnsiCC|"
   Note $ALog "   CC_Exe             = |$CC_Exe|"
   Note $ALog "   Cfg_CC_Exe         = |$Cfg_CC_Exe|"
   Note $ALog "   FC_INT_PTR_DIFFER  = |$FC_INT_PTR_DIFFER|"
   Note $ALog "   AF_LONG8           = |$AF_LONG8|"
   Note $ALog ""

endif

if ("$CC_Linker" == "") then
   flog $ALog setenv CC_Linker "$CC_Exe"
endif

if ("$CXX_Linker" == "") then
   flog $ALog setenv CXX_Linker "$CXX_Exe"
endif

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# export the results

dbmset $ALog CC_Exe              = $CC_Exe^              \
             CC_Flags            = $CC_Flags^            \
             CC_Inc              = $CC_Inc^              \
             CC_Debug            = $CC_Debug^            \
             CC_Optimize         = $CC_Optimize^         \
             CC_Linker           = $CC_Linker^           \
             CXX_Exe             = $CXX_Exe^             \
             CXX_Flags           = $CXX_Flags^           \
             CXX_Inc             = $CXX_Inc^             \
             CXX_Debug           = $CXX_Debug^           \
             CXX_Optimize        = $CXX_Optimize^        \
             CXX_Linker          = $CXX_Linker^          \
             Cfg_CC_Exe          = $Cfg_CC_Exe^          \
             Cfg_CC_Flags        = $Cfg_CC_Flags^        \
             Cfg_CC_Inc          = $Cfg_CC_Inc^          \
             Cfe_CC_Exe          = $Cfe_CC_Exe^          \
             Cfe_CC_Flags        = $Cfe_CC_Flags^        \
             Cfe_CC_Inc          = $Cfe_CC_Inc^          \
             Save_CC             = $Save_CC^             \
             Save_CFLAGS         = $Save_CFLAGS^         \
             Ser_CC_Flags        = $Ser_CC_Flags^        \
             AF_CList            = $AF_CList^            \
             AF_LONG8            = $AF_LONG8^            \
             AF_ALT_LARGE_FILE   = $af_alt_large_file^   \
             DP_Inc              = $DP_Inc^              \
             FC_INT_PTR_DIFFER   = $FC_INT_PTR_DIFFER

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

ftee $ALog gexec $PSY_AnaDir/cc-line       @ \
                 $PSY_AnaDir/cc-pragma     @ \
                 $PSY_AnaDir/cc-inline     @ \
                 $PSY_AnaDir/cc-noreturn   @ \
                 $PSY_AnaDir/cc-valist     @ \
                 $PSY_AnaDir/cc-float16    @ \
                 $PSY_AnaDir/cc-func       @ \
                 $PSY_AnaDir/cc-complex    @ \
                 $PSY_AnaDir/cc-headers    @ \
                 $PSY_AnaDir/cc-glibc      @ \
                 $PSY_AnaDir/cc-size

source $Me:h/post-common

exit(0)

