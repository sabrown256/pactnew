#
# XLC-LNX - define IBM XLC compiler for BG/X front ends
#
# Source Version: 3.0
# Software Release #: LLNL-CODE-422942
#
# include "cpyright.h"
#

Group OCV {
   CC      = xlc
   CC_Warn = -qsuppress=1500-010:1500-029:1506-1300:1506-1298:1506-273 
   CC_SMP  = xlc_r
   CXX     = xlC
   FC      = xlf90
   FC_SMP  = xlf90_r
   FC_Cfg  = gfortran
   LX_Warn = -qsuppress=1500-010:1506-1300:1506-1298
   LD_Bits = 
   LD_Lib  = -lc
   LD_Ext  = [ _env_ = HOSTOS ;
               Linux = -rdynamic ]
   LD_Ext += [ _env_ = HOSTOS ;
               Linux = -Wl,--disable-new-dtags ] # save us from RUN_PATH
   LD_Ext += [ _cmd_ = -p ;                      # profiling
	       on    = -pg ]
   LD_Ext += [ _cmd_ = -cov ;                    # coverage analysis
	       on    = -lgcov ]
   OMP     = -qsmp=omp:noauto
   Long16  = -qldbl128                     # 16 byte long double
   RPath   = -Wl,-rpath,@
   XArch   = 
}

run analyze/rpath -a /usr/${LIB}

include compilers/xlc
include os/lnx
include cpp-rule

define GETSOCKNAME_LONG

# NOTE: despite debug flags no symbol info so undebuggable
Group TEST {
   ADVISORY = ${TEST_ADVISORY}:pdb_fd:sx_intp3
}

#--------------------------------------------------------------------------

# NOTE: can Std, Cfg, and Shared go?

Group Std {
   CC_Flags = ${CC_Flags}
   FC_Flags = ${FC_Flags}
   LD_Flags = ${LD_Flags}
}

Group Cfg {
   Use = Std
}

Group Shared {
   LD_Exe    = ${OCV_CC}
   LD_Flags  = -G
   LD_Flags += [ _env_ = Bits ;             # address bit size
                 *     = -q* ]
}

#--------------------------------------------------------------------------
