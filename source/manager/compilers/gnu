#
# GNU - define GNU compiler
#
# Source Version: 3.0
# Software Release #: LLNL-CODE-422942
#
# include "cpyright.h"
#

Tool CC {
   Exe       = gcc
   Flags     = -ffloat-store
   Flags    += [ _env_ = STD_C ;                # C standard flags
                 C89   = -std=c89 ;
                 C99   = -std=c99 ;
                 C11   = -std=c11 ;
                 X89   = -std=gnu89 ;           # gcc default
                 X99   = -std=gnu99 ;
                 X11   = -std=gnu11 ]
   Flags    += [ _env_ = PACT_CC_VERSION ;      # compiler version flags
                 4.*   = -fsignaling-nans ]
   Flags    += [ _env_ = PACT_CC_VERSION ;      # pragma warning flags
                 4.*  >= -Wno-unknown-pragmas ]
   Flags    += [ _env_ = PACT_CC_VERSION ;      # stack checking
                 4.2.* >= -fstack-protector ]
   Flags    += [ _env_ = PACT_CC_VERSION ;      # unused return value
                 4.4.* > -Wunused-result ]
#   Flags    += [ _env_ = PACT_CC_VERSION ;      # memory checks
#                 4.8.* >= -fsanitize=address ]
#   Flags    += [ _env_ = PACT_CC_VERSION ;      # thread checks
#                 4.8.* >= -fsanitize=thread -pie ]
   Flags    += ${OCV_Bits}
   Flags    += ${OCV_PIC}
   Flags    += [ _cmd_ = -p ;                   # profiling
	         on    = $CC_Profile ]
   Flags    += [ _cmd_ = -cov ;                 # coverage analysis
	         on    = -fprofile-arcs -ftest-coverage ]
   Debug     = -g -O0 -Wall
#   Debug    += -Wno-unused-function -Wno-missing-declarations -Wno-inline
   Optimize  = [ _env_ = PACT_CC_VERSION ;      # optimization level
                 4.1.2 = -g -O0 -Wall ;         # 4.1.2 crashes on mlcfnc.c with -O
                 *.*   = -g -O -Wunused ]
   Optimize += [ _cmd_ = -tune @ ;              # optimization tuning
                 *     = -mtune=* ]
   Profile   = -pg
   Version   = -v
}

Tool FC {
   Exe       = gfortran
   Flags     = -ffloat-store -ffree-form
   Flags    += [ _env_ = PACT_CC_VERSION ;      # compiler version flags
                 4.*   = -fsignaling-nans ;
                 4.6.* >= -fsignaling-nans -Wno-unused-dummy-argument ]
   Flags    += ${OCV_Bits}
   Flags    += ${OCV_PIC}
   Flags    += [ _cmd_ = -p ;                   # profiling
	         on    = $FC_Profile ]
   Flags    += [ _cmd_ = -cov ;                 # coverage analysis
	         on    = -fprofile-arcs -ftest-coverage ]
   Debug     = -g -O0 -Wall
   Optimize  = -g -O -Wunused
   Profile   = -pg
   Version   = -v
}

Tool CXX {
   Exe       = g++
   Flags     = 
   Debug     = -g -O0 -Wall
   Optimize  = -g -O -Wunused
   Version   = -v
}

Tool LD {
   RPath    = ${OCV_RPath}
   Flags   += ${OCV_LD}
#   Flags   += [ _env_ = PACT_CC_VERSION ;         # memory and thread checks
#                4.8.* >= -pie ]
   Flags   += [ _cmd_ = -p ;                      # profiling
	        on    = -pg ]
   Flags   += [ _cmd_ = -cov ;                    # coverage analysis
	        on    = -lgcov ]
   Lib      = -lc
}

Tool Lex {
   Flags  = -w
   Flags += ${OCV_Bits}
   Flags += ${OCV_PIC}
}

Group AF {
   PATTERN_WARN = ":+sp+warning:"
   PATTERN_ERR  = ":+sp+error:"
}

Group Std {
   CC_Flags = ${CC_Flags}
   FC_Flags = ${FC_Flags}
   LD_Flags = ${LD_Flags}
}

Group Cfg {
   Use    = Std
   CC_Exe = gcc
}

Group Shared {
   LD_Exe   = gcc
   CC_Flags = -fPIC
   LD_Flags = ${OCV_Sh}
   LD_Lib   = ${OCV_ShLb}
}

Group PThread {
   LD_Lib = -lpthread 
}

Group OpenMP {
   CC_Flags  = -fopenmp
   LD_Flags  = -fopenmp
   LD_Lib    = -lgomp
   SharedFnc = [ _env_ = PACT_CC_VERSION ;      # compiler version flags
                4.6.0  <  yes ;
                4.6.0  >= no ]
}

Group Python {
   CC_Exe      = gcc
   CC_Debug    = -g
   CC_Optimize = -g -O -Wunused
}

include cpp-rule
include serial

