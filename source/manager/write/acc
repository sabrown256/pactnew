#!/bin/csh -f
#
# ACC - abstract C compiler wrapper
#     - thicker wrapper than manager/ccomp
#     - rationale:
#     -   1) manage abstract compilation options
#     -      -ag    all debug options
#     -      -aO    all optimize options
#     -      -aprf  all profiling options
#     -      -apre  all pre-processing options
#     -   2) better solution for environment variables + binary exe
#     -      e.g. 'module' system users
#     -   3) may use special knowledge of buggy compilers
#     -      e.g. pgcc _Pragma handling problem
#
# include "cpyright.h"
#

set Me = $0
source $Me:h/pre-common

Note $WLog "----- write/acc -----"
Note $WLog "Write: acc"
Note $WLog ""

HAVE_SUBROUTINES

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

Separator $WLog

NoteD $WLog "   Abstract C compiler wrapper - acc"
Note $WLog ""

dbmget $WLog AR_Exe^             \
             AR_IFlag^           \
             CC_Debug^           \
             CC_Optimize^        \
             CC_Profile^         \
             LD_Exe^             \
             Lex_Exe^            \
             PACT_CC_FAMILY^     \
             PACT_CC_VERSION^    \
             PACT_CC_PATH^       \
             PACT_CC_EXE^        \
             PSY_Arch^           \
             PSY_Root^           \
             PSY_ScrDir^         \
             PSY_TmpDir^         \
             RPATH^              \
             Yacc_Exe^           \
             Yacc_Flags
            
setenv BinDir  $PSY_Root/bin
setenv EtcDir  $PSY_Root/etc
             
flog $WLog set exe  = $PACT_CC_EXE
flog $WLog set vers = $PACT_CC_VERSION
flog $WLog set comp = $exe:t
flog $WLog set outf = $BinDir/acc
flog $WLog $RM $outf
flog $WLog touch $outf

flog $WLog cp $PSY_ScrDir/file-time $BinDir

# dbmget chokes getting this one
set CPP = ( `$BinDir/perdb -f $EtcDir/cfg IRules_CCP` )

# typical value for CPP is '${CC} -E $< > $*.i'
set lcpp = ( `echo "$CPP" | sed 's|$<|$fi|' | sed 's|$\*.i|+out+|'` )

Note $WLog "CPP  = |$CPP|"
Note $WLog "lcpp = |$lcpp|"

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

Note $outf '#\!/bin/csh -f'
Note $outf '#'
Note $outf "# ACC - abstract compiler wrapper for $PACT_CC_EXE"
Note $outf '#'
Note $outf '# include "cpyright.h"'
Note $outf '#'
Note $outf ''

Note $outf 'unalias *'
Note $outf ''

Note $outf '@ err = 0'
Note $outf ''

Note $outf "source $EtcDir/env-pact.csh"
Note $outf ''

Note $outf '@ vrb = 0'
Note $outf ''

Note $outf "set fdbg = ( $CC_Debug )"
Note $outf "set fopt = ( $CC_Optimize )"
Note $outf "set fprf = ( $CC_Profile )"

Note $outf "set exe  = $exe"
Note $outf 'set co   = FALSE'
Note $outf 'set dbg  = FALSE'
Note $outf 'set opt  = FALSE'
Note $outf 'set arc  = ""'
Note $outf 'set lib  = ""'
Note $outf 'set prf  = FALSE'
Note $outf 'set inf  = ""'
Note $outf 'set pref = ""'
Note $outf 'set outf = ""'
Note $outf 'set args = ""'
Note $outf ''

Note $outf 'while ($#argv > 0)'
Note $outf '   switch ("$1")'
Note $outf '      case -a:'
Note $outf '           shift'
Note $outf '           set arc = $1'
Note $outf '           breaksw'
Note $outf '      case -ag:'
Note $outf '           set dbg = TRUE'
Note $outf '           set opt = FALSE'
Note $outf '           breaksw'
Note $outf '      case -ahelp:'
Note $outf '           echo ""'
Note $outf '           echo "Usage: acc [-ag] [-ahelp] [-aO] [-apre <file>] [-aprf] [-avrb]* -ao <outf> <args>*"'
Note $outf '           echo "   ag      compile debuggable"'
Note $outf '           echo "   ahelp   this help message"'
Note $outf '           echo "   aO      compile optimized"'
Note $outf '           echo "   apre    preprocess <file> only"'
Note $outf '           echo "   aprf    compile for profiling"'
Note $outf '           echo "   avrb    verbosity level"'
Note $outf '           echo ""'
Note $outf '           exit(1)'
Note $outf '           breaksw'
Note $outf '      case -aO:'
Note $outf '           set dbg = FALSE'
Note $outf '           set opt = TRUE'
Note $outf '           breaksw'
Note $outf '      case -o:'
Note $outf '      case -ao:'
Note $outf '           shift'
Note $outf '           set outf = $1'
Note $outf '           breaksw'
Note $outf '      case -aprf:'
Note $outf '           set prf = TRUE'
Note $outf '           breaksw'
Note $outf '      case -apre:'
Note $outf '           shift'
Note $outf '           set pref = $1'
Note $outf '           breaksw'
Note $outf '      case -avrb:'
Note $outf '           @ vrb = $vrb + 1'
Note $outf '           breaksw'
Note $outf '      case -c:'
Note $outf '           set co = TRUE'
Note $outf '           breaksw'
Note $outf '      case -l*:'
Note $outf '           set lib = ( $lib "$1" )'
Note $outf '           breaksw'
Note $outf '      default:'

# literal foo.a, foo.so, or foo.so.2 goes into lib
Note $outf '           if (("$1" =~ *.a) || ("$1" =~ *.so*)) then'
Note $outf '              set lib = ( $lib "$1" )'

# arguments which are existing C files go into inf
Note $outf '           else if (("$1" =~ *.[clyh]) && (-f "$1")) then'
Note $outf '              set inf = ( $inf "$1" )'

# everything goes into lib once lib has anything
# otherwise it goes into args
Note $outf '           else'
Note $outf '              if ("$lib" != "") then'
Note $outf '                 set lib = ( $lib "$1" )'
Note $outf '              else'
Note $outf '                 set args = ( $args `echo "$1" | sed '"'"'s|\"|+++|g'"'"'` )'
Note $outf '              endif'
Note $outf '           endif'

Note $outf '           breaksw'
Note $outf '   endsw'
Note $outf '   shift'
Note $outf 'end'
Note $outf ''

Note $outf 'if ("$inf" == "") then'
Note $outf '   echo "No input file specified - exiting"'
Note $outf '   exit(1)'
Note $outf 'endif'
Note $outf ''

Note $outf 'if (("$outf" == "") && ("$pref" == "") && ($co == FALSE)) then'
Note $outf '   echo "No output file specified - exiting"'
Note $outf '   exit(1)'
Note $outf 'endif'
Note $outf ''

Note $outf 'set CI   = ( $exe $args )'
Note $outf "set LEX  = ( $Lex_Exe )"
Note $outf "set YACC = ( $Yacc_Exe $Yacc_Flags )"
Note $outf ''

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# check the compilers database for needed environment variables
# such as license file, directory paths
# NOTE: the compilers database is a hand written database
# and distributions builds do not have this

set wexe = `which $comp`
if (-x "$wexe") then
   set compilers = $wexe:h/compilers
else
   set compilers = no.file
endif
if (-f $compilers) then

   set linf = ( `awk '($2 == "'$comp'") && ($1 == "'$PSY_Arch'") && ($3 == "'$vers'") {print}' $compilers` )
   if ($#linf < 4) then
      set linf = ( `awk '($2 == "'$comp'") && ($1 == "'$PSY_Arch'") {print}' $compilers | tail -n 1` )
   endif

   if ($#linf > 4) then
      shift linf
      shift linf
      shift linf
      shift linf

# get other key,value pairs
# useful for setting compiler license variables
      while ($#linf > 1)
         set var = $linf[1]
         set val = $linf[2]
         shift linf
         shift linf
         Note $outf 'if ($vrb > 1) then'
         Note $outf '   echo "   setenv '$var $val'"'
         Note $outf 'endif'
         Note $outf "setenv $var $val"
      end
   endif

   unset linf
   unset sys
endif
unset wexe
unset compilers

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# add to LD_LIBRARY PATH
# NOTE: at config time we know RPATH and it may have dirs needed
# in LD_LIBRARY_PATH at compile time
# for example, recent poorly built GNU compilers which will not
# run without LD_LIBRARY_PATH being set

if ("$RPATH" != "") then
   Note $outf 'if ($?LD_LIBRARY_PATH == 1) then'
   Note $outf '   setenv LD_LIBRARY_PATH '$RPATH':$LD_LIBRARY_PATH'
   Note $outf 'else'
   Note $outf '   setenv LD_LIBRARY_PATH '$RPATH
   Note $outf 'endif'
   Note $outf ''
endif

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

Note $outf 'set path   = ( '$BinDir' $path )'
Note $outf 'set action = ""'

Note $outf 'if ($?SC_EXEC_N_ATTEMPTS == 1) then'
Note $outf '   @ na = $SC_EXEC_N_ATTEMPTS'
Note $outf 'else'
Note $outf '   @ na = 1'
Note $outf 'endif'
Note $outf ''

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# check abstract options

Note $outf 'if ("$pref" != "") then'
Note $outf '   foreach fi ($inf)'
Note $outf "      set cpp = $lcpp"
Note $outf '      set CPP = ( `echo "$cpp" | sed "s|+out+|$pref|" | sed '"'"'s|+++|\"|g'"'"'` )'
Note $outf '      if ($vrb > 0) then'
Note $outf '         echo "   Preprocess: $CPP"'
Note $outf '      endif'
Note $outf '      rm -f $pref'
Note $outf '      eval $CPP'
Note $outf '   end'
Note $outf '   exit($status)'
Note $outf 'endif'
Note $outf ''

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

switch ($comp)

# NOTE: newest GNU compilers require this to run because
# for some reason they were not built with -rpath
# this is not for the compiled executables but the compiler
   case gcc:
   case g++:
   case gfortran:
        Note $outf 'set root = $exe:h'
        Note $outf 'set root = $root:h'
        Note $outf 'if ($?LD_LIBRARY_PATH == 1) then'
        Note $outf '   setenv LD_LIBRARY_PATH  $root/lib64:$root/lib:${LD_LIBRARY_PATH}'
        Note $outf 'else'
        Note $outf '   setenv LD_LIBRARY_PATH  $root/lib64:$root/lib'
        Note $outf 'endif'

        Note $outf 'unset root'
        breaksw

   case pathcc:
   case pathCC:
   case pathf90:
        Note $outf 'set root  = $exe:h'
        Note $outf 'set root  = $root:h'
        Note $outf 'set lvers = `ls $root/lib`'
        Note $outf 'if ($?LD_LIBRARY_PATH == 1) then'
        Note $outf '   setenv LD_LIBRARY_PATH  $root/lib/${lvers}:$root/lib/${lvers}/32:${LD_LIBRARY_PATH}'
        Note $outf 'else'
        Note $outf '   setenv LD_LIBRARY_PATH  $root/lib/${lvers}:$root/lib/${lvers}/32'
        Note $outf 'endif'

        Note $outf 'unset root'
        Note $outf 'unset lvers'
        breaksw

   case pgcc:
        Note $outf 'if ("$inf" !~ *.o) then'
        Note $outf '   set pref = $inf:r.int.c'
        Note $outf '   set CPP  = ( `echo "$cpp" | sed "s|+out+|$pref|" | sed '"'"'s|+++|\"|g'"'"'` )'
        Note $outf '   if ($vrb == TRUE) then'
        Note $outf '      echo "   Preprocess: $CPP"'
        Note $outf '   endif'

# try preprocessing until the preprocessed file is at least as big
# as the unpreprocessed file and the exit status is 0
# GOTCHA: fix this for multiple input files!!!
        Note $outf '   @ lerr = 1'
        Note $outf '   @ dt  = 0'
        Note $outf '   @ ia  = 0'
        Note $outf '   @ nli = `cat $inf | wc -l`'
        Note $outf '   while ($ia < $na)'
        Note $outf '      @ ia = $ia + 1'
        Note $outf '      rm -f $pref'
        Note $outf '      eval $CPP'
        Note $outf '      set xstatus = $status'
        Note $outf '      if (-f $pref) then'
        Note $outf '         @ nlp = `cat $pref | wc -l`'
        Note $outf '         if (($xstatus == 0) && ($nli <= $nlp)) then'
        Note $outf '            @ lerr = 0'
        Note $outf '            break'
        Note $outf '         endif'
        Note $outf '      endif'
        Note $outf '      echo "***> preprocessing '"'"'$inf'"'"' failed on attempt $ia - retrying"'
        Note $outf '      @ dt = $dt + 1'
        Note $outf '      sleep $dt'
        Note $outf '   end'
        Note $outf '   if ($lerr == 1) then'
        Note $outf '      echo "***> preprocessing '"'"'$inf'"'"' failed after $na attempts - exiting"'
        Note $outf '      exit(1)'
        Note $outf '   else if ($ia > 1) then'
        Note $outf '      echo "***> preprocessing '"'"'$inf'"'"' succeeded"'
        Note $outf '   endif'

        Note $outf '   set inf    = $pref'
        Note $outf '   set action = ( rm -f $inf )'
        Note $outf 'endif'

        breaksw
endsw
Note $outf ''

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

cat write/acbe >>& $outf

Note $outf 'exit($err)'

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

flog $WLog chmod a+x $outf

source $Me:h/post-common

exit(0)

