#!/bin/csh -f
#
# AFC - abstract Fortran compiler wrapper
#     - thicker wrapper than manager/ccomp
#     - rationale:
#     -   1) manage abstract compilation options
#     -      -ag    all debug options
#     -      -aO    all optimize options
#     -      -aprf  all profiling options
#     -      -apre  all pre-processing options
#     -   2) better solution for environment variables + binary exe
#     -      e.g. 'module' system users
#     -   3) may use special knowledge of buggy compilers
#
# include "cpyright.h"
#

set Me = $0
source $Me:h/pre-common

Note $WLog "----- write/afc -----"
Note $WLog "Write: afc"
Note $WLog ""

HAVE_SUBROUTINES

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

Separator $WLog

NoteD $WLog "   Abstract Fortran compiler wrapper - afc"
Note $WLog ""

dbmget $WLog FC_Debug^           \
             FC_Optimize^        \
             FC_Profile^         \
             PACT_FC_FAMILY^     \
             PACT_FC_VERSION^    \
             PACT_FC_PATH^       \
             PACT_FC_EXE^        \
             PSY_Arch^           \
             PSY_Root
            
setenv BinDir  $PSY_Root/bin
setenv EtcDir  $PSY_Root/etc
             
flog $WLog set exe    = $PACT_FC_EXE
flog $WLog set vers   = $PACT_FC_VERSION
flog $WLog set comp   = $exe:t
flog $WLog set STDOUT = $BinDir/afc
flog $WLog $RM $STDOUT
flog $WLog touch $STDOUT

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

Note $STDOUT '#\!/bin/csh -f'
Note $STDOUT '#'
Note $STDOUT "# AFC - abstract compiler wrapper for $PACT_FC_EXE"
Note $STDOUT '#'
Note $STDOUT '# include "cpyright.h"'
Note $STDOUT '#'
Note $STDOUT ""

Note $STDOUT 'unalias *'
Note $STDOUT ""

Note $STDOUT '@ err = 0'
Note $STDOUT ""

Note $STDOUT "source $EtcDir/env-pact.csh"
Note $STDOUT ""

Note $STDOUT "set exe  = $exe"
Note $STDOUT 'set dbg  = FALSE'
Note $STDOUT 'set opt  = FALSE'
Note $STDOUT 'set lib  = ""'
Note $STDOUT 'set prf  = FALSE'
Note $STDOUT 'set vrb  = FALSE'
Note $STDOUT 'set inf  = ""'
Note $STDOUT 'set pref = ""'
Note $STDOUT 'set outf = ""'

Note $STDOUT 'set args = ""'
Note $STDOUT 'while ($#argv > 0)'
Note $STDOUT '   switch ("$1")'
Note $STDOUT '      case -ag:'
Note $STDOUT '           set dbg = TRUE'
Note $STDOUT '           set opt = FALSE'
Note $STDOUT '           breaksw'
Note $STDOUT '      case -ahelp:'
Note $STDOUT '           echo ""'
Note $STDOUT '           echo "Usage: afc [-ag] [-ahelp] [-aO] [-apre <file>] [-aprf] [-avrb] -ao <outf> <args>*"'
Note $STDOUT '           echo "   ag      compile debuggable"'
Note $STDOUT '           echo "   ahelp   this help message"'
Note $STDOUT '           echo "   aO      compile optimized"'
Note $STDOUT '           echo "   apre    preprocess <file> only"'
Note $STDOUT '           echo "   aprf    compile for profiling"'
Note $STDOUT '           echo "   avrb    verbose mode"'
Note $STDOUT '           echo ""'
Note $STDOUT '           exit(1)'
Note $STDOUT '           breaksw'
Note $STDOUT '      case -aO:'
Note $STDOUT '           set dbg = FALSE'
Note $STDOUT '           set opt = TRUE'
Note $STDOUT '           breaksw'
Note $STDOUT '      case -o:'
Note $STDOUT '      case -ao:'
Note $STDOUT '           shift'
Note $STDOUT '           set outf = $1'
Note $STDOUT '           breaksw'
Note $STDOUT '      case -aprf:'
Note $STDOUT '           set prf = TRUE'
Note $STDOUT '           breaksw'
Note $STDOUT '      case -apre:'
Note $STDOUT '           shift'
Note $STDOUT '           set pref = $1'
Note $STDOUT '           breaksw'
Note $STDOUT '      case -avrb:'
Note $STDOUT '           set vrb = TRUE'
Note $STDOUT '           breaksw'
Note $STDOUT '      case -l*:'
Note $STDOUT '           set lib = ( $lib "$1" )'
Note $STDOUT '           breaksw'
Note $STDOUT '      default:'

# literal foo.a, foo.so, or foo.so.2 goes into lib
Note $STDOUT '           if (("$1" =~ *.a) || ("$1" =~ *.so*)) then'
Note $STDOUT '              set lib = ( $lib "$1" )'

# the first argument which is an existing file goes into inf
Note $STDOUT '           else if (("$inf" == "") && (-f "$1")) then'
Note $STDOUT '              set inf = ( $inf "$1" )'

# everything goes into lib once lib has anything
# otherwise it goes into args
Note $STDOUT '           else'
Note $STDOUT '              if ("$lib" != "") then'
Note $STDOUT '                 set lib = ( $lib "$1" )'
Note $STDOUT '              else'
Note $STDOUT '                 set args = ( $args "$1" )'
Note $STDOUT '              endif'
Note $STDOUT '           endif'
Note $STDOUT '           breaksw'
Note $STDOUT '   endsw'
Note $STDOUT '   shift'
Note $STDOUT 'end'
Note $STDOUT ""

Note $STDOUT 'if ("$inf" == "") then'
Note $STDOUT '   echo "No input file specified - exiting"'
Note $STDOUT '   exit(1)'
Note $STDOUT 'endif'
Note $STDOUT ""

Note $STDOUT 'if (("$outf" == "") && ("$pref" == "")) then'
Note $STDOUT '   echo "No output file specified - exiting"'
Note $STDOUT '   exit(1)'
Note $STDOUT 'endif'
Note $STDOUT ""

Note $STDOUT 'set FC  = ( $exe $args )'
Note $STDOUT ""

#--------------------------------------------------------------------------'
#--------------------------------------------------------------------------'

# check the compilers database for needed environment variables
# such as license file, directory paths

   set wexe = `which $comp`
   if (-x "$wexe") then
      set compilers = $wexe:h/compilers
   else
      set compilers = no.file
   endif
   if (-f $compilers) then

      set linf = ( `awk '($2 == "'$comp'") && ($1 == "'$PSY_Arch'") && ($3 == "'$vers'") {print}' $compilers` )
      if ($#linf < 4) then
         set linf = ( `awk '($2 == "'$comp'") && ($1 == "'$PSY_Arch'") {print}' $compilers | tail -n 1` )
      endif

      if ($#linf > 4) then
         shift linf
         shift linf
         shift linf
         shift linf

# get other key,value pairs
# useful for setting compiler license variables
         while ($#linf > 1)
            set var = $linf[1]
            set val = $linf[2]
            shift linf
            shift linf
            Note $STDOUT 'if ($vrb == TRUE) then'
            Note $STDOUT '   echo "   setenv '$var $val'"'
            Note $STDOUT 'endif'
            Note $STDOUT "setenv $var $val"
         end
      endif

      unset linf
      unset sys
   endif
   unset wexe
   unset compilers

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

Note $STDOUT 'set path   = ( '$BinDir' $path )'
Note $STDOUT 'set action = ""'

Note $STDOUT 'if ($?SC_EXEC_N_ATTEMPTS == 1) then'
Note $STDOUT '   @ na = $SC_EXEC_N_ATTEMPTS'
Note $STDOUT 'else'
Note $STDOUT '   @ na = 1'
Note $STDOUT 'endif'
Note $STDOUT ""

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# check abstract options

Note $STDOUT 'if ($dbg == TRUE) then'
Note $STDOUT '   set args = ( '$FC_Debug' $args )'
Note $STDOUT 'else if ($opt == TRUE) then'
Note $STDOUT '   set args = ( '$FC_Optimize' $args )'
Note $STDOUT 'endif'
Note $STDOUT ""

Note $STDOUT 'if ($prf == TRUE) then'
Note $STDOUT '   set args = ( '$FC_Profile' $args )'
Note $STDOUT 'endif'
Note $STDOUT 'unset linf'
Note $STDOUT ""

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

switch ($comp)

# NOTE: newest GNU compilers require this to run because
# for some reason they were not built with -rpath
# this is not for the compiled executables but the compiler
   case gfortran:
        Note $STDOUT 'set root = $exe:h'
        Note $STDOUT 'set root = $root:h'
        Note $STDOUT 'if ($?LD_LIBRARY_PATH == 1) then'
        Note $STDOUT '   setenv LD_LIBRARY_PATH  $root/lib64:$root/lib:${LD_LIBRARY_PATH}'
        Note $STDOUT 'else'
        Note $STDOUT '   setenv LD_LIBRARY_PATH  $root/lib64:$root/lib'
        Note $STDOUT 'endif'

        Note $STDOUT 'unset root'
        breaksw

   case pathf90:
        Note $STDOUT 'set root  = $exe:h'
        Note $STDOUT 'set root  = $root:h'
        Note $STDOUT 'set lvers = `ls $root/lib`'
        Note $STDOUT 'if ($?LD_LIBRARY_PATH == 1) then'
        Note $STDOUT '   setenv LD_LIBRARY_PATH  $root/lib/${lvers}:$root/lib/${lvers}/32:${LD_LIBRARY_PATH}'
        Note $STDOUT 'else'
        Note $STDOUT '   setenv LD_LIBRARY_PATH  $root/lib/${lvers}:$root/lib/${lvers}/32'
        Note $STDOUT 'endif'

        Note $STDOUT 'unset root'
        breaksw

   case pgf90:
        breaksw
endsw
Note $STDOUT ""

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# these are variables which may be used elsewhere
# we are done with them - so unset them
Note $STDOUT 'unsetenv PACT_FC_FAMILY'
Note $STDOUT 'unsetenv PACT_FC_VERSION'
Note $STDOUT 'unsetenv PACT_FC_PATH'
Note $STDOUT ""

Note $STDOUT 'rm -f $outf'
Note $STDOUT 'set cmd = ( $FC -o $outf $inf $lib )'

# verbose mode diagnostic for debugging
Note $STDOUT 'if ($vrb == TRUE) then'
Note $STDOUT '   echo "   Compile: $cmd"'
Note $STDOUT 'endif'
Note $STDOUT ""

Note $STDOUT 'if ("$action" == "") then'
Note $STDOUT '   exec $cmd'
Note $STDOUT 'else'
Note $STDOUT '   $cmd'
Note $STDOUT '   @ err = $status'
Note $STDOUT '   $action'
Note $STDOUT 'endif'
Note $STDOUT ""

Note $STDOUT 'exit($err)'

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

flog $WLog chmod a+x $STDOUT

source $Me:h/post-common

exit(0)

