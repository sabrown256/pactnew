#!/bin/csh -f
#
# AFC - abstract Fortran compiler wrapper
#     - thicker wrapper than manager/ccomp
#     - rationale:
#     -   1) manage abstract compilation options
#     -      -ag    all debug options
#     -      -aO    all optimize options
#     -      -aprf  all profiling options
#     -      -apre  all pre-processing options
#     -   2) better solution for environment variables + binary exe
#     -      e.g. 'module' system users
#     -   3) may use special knowledge of buggy compilers
#
# include "cpyright.h"
#

set Me = $0
source $Me:h/pre-common

Note $WLog "----- write/afc -----"
Note $WLog "Write: afc"
Note $WLog ""

HAVE_SUBROUTINES

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

Separator $WLog

NoteD $WLog "   Abstract Fortran compiler wrapper - afc"
Note $WLog ""

dbmget $WLog AR_Exe^             \
             AR_IFlag^           \
             FC_Debug^           \
             FC_Optimize^        \
             FC_Profile^         \
             LD_Exe^             \
             PACT_FC_FAMILY^     \
             PACT_FC_VERSION^    \
             PACT_FC_PATH^       \
             PACT_FC_EXE^        \
             PSY_Arch^           \
             PSY_Root^           \
             RPATH
            
setenv BinDir  $PSY_Root/bin
setenv EtcDir  $PSY_Root/etc
             
flog $WLog set exe    = $PACT_FC_EXE
flog $WLog set vers   = $PACT_FC_VERSION
flog $WLog set comp   = $exe:t
if ("$comp" == "") then
   flog $WLog set comp = f90
endif

flog $WLog set outf = $BinDir/afc
flog $WLog $RM $outf
flog $WLog touch $outf

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

Note $outf '#\!/bin/csh -f'
Note $outf '#'
Note $outf "# AFC - abstract compiler wrapper for $PACT_FC_EXE"
Note $outf '#'
Note $outf '# include "cpyright.h"'
Note $outf '#'
Note $outf ""

Note $outf 'unalias *'
Note $outf ""

Note $outf '@ err = 0'
Note $outf ""

set wexe = `which $comp`
if (-x "$wexe") then

   Note $outf "source $EtcDir/env-pact.csh"
   Note $outf ""

   Note $outf '@ vrb = 0'
   Note $outf ''

   Note $outf "set exe  = $exe"
   Note $outf 'set co   = FALSE'
   Note $outf 'set dbg  = FALSE'
   Note $outf 'set opt  = FALSE'
   Note $outf 'set arc  = ""'
   Note $outf 'set lib  = ""'
   Note $outf 'set prf  = FALSE'
   Note $outf 'set inf  = ""'
   Note $outf 'set pref = ""'
   Note $outf 'set outf = ""'

   Note $outf 'set args = ""'
   Note $outf 'while ($#argv > 0)'
   Note $outf '   switch ("$1")'
   Note $outf '      case -a:'
   Note $outf '           shift'
   Note $outf '           set arc = $1'
   Note $outf '           breaksw'
   Note $outf '      case -ag:'
   Note $outf '           set dbg = TRUE'
   Note $outf '           set opt = FALSE'
   Note $outf '           breaksw'
   Note $outf '      case -ahelp:'
   Note $outf '           echo ""'
   Note $outf '           echo "Usage: afc [-ag] [-ahelp] [-aO] [-apre <file>] [-aprf] [-avrb]* -ao <outf> <args>*"'
   Note $outf '           echo "   ag      compile debuggable"'
   Note $outf '           echo "   ahelp   this help message"'
   Note $outf '           echo "   aO      compile optimized"'
   Note $outf '           echo "   apre    preprocess <file> only"'
   Note $outf '           echo "   aprf    compile for profiling"'
   Note $outf '           echo "   avrb    verbosity level"'
   Note $outf '           echo ""'
   Note $outf '           exit(1)'
   Note $outf '           breaksw'
   Note $outf '      case -aO:'
   Note $outf '           set dbg = FALSE'
   Note $outf '           set opt = TRUE'
   Note $outf '           breaksw'
   Note $outf '      case -o:'
   Note $outf '      case -ao:'
   Note $outf '           shift'
   Note $outf '           set outf = $1'
   Note $outf '           breaksw'
   Note $outf '      case -aprf:'
   Note $outf '           set prf = TRUE'
   Note $outf '           breaksw'
   Note $outf '      case -apre:'
   Note $outf '           shift'
   Note $outf '           set pref = $1'
   Note $outf '           breaksw'
   Note $outf '      case -avrb:'
   Note $outf '           @ vrb = $vrb + 1'
   Note $outf '           breaksw'
   Note $outf '      case -c:'
   Note $outf '           set co = TRUE'
   Note $outf '           breaksw'
   Note $outf '      case -l*:'
   Note $outf '           set lib = ( $lib "$1" )'
   Note $outf '           breaksw'
   Note $outf '      default:'

# literal foo.a, foo.so, or foo.so.2 goes into lib
   Note $outf '           if (("$1" =~ *.a) || ("$1" =~ *.so*)) then'
   Note $outf '              set lib = ( $lib "$1" )'

# arguments which are existing Fortran files go into inf
   Note $outf '           else if ((("$1" =~ *.f) || ("$1" =~ *.f90)) && (-f "$1")) then'
   Note $outf '              set inf = ( $inf "$1" )'

# everything goes into lib once lib has anything
# otherwise it goes into args
   Note $outf '           else'
   Note $outf '              if ("$lib" != "") then'
   Note $outf '                 set lib = ( $lib "$1" )'
   Note $outf '              else'
   Note $outf '                 set args = ( $args "$1" )'
   Note $outf '              endif'
   Note $outf '           endif'
   Note $outf '           breaksw'
   Note $outf '   endsw'
   Note $outf '   shift'
   Note $outf 'end'
   Note $outf ""

   Note $outf 'if ($vrb > 2) then'
   Note $outf '   echo "inf  = |$inf|"'
   Note $outf '   echo "outf = |$outf|"'
   Note $outf '   echo "co   = |$co|"'
   Note $outf '   echo "arc  = |$arc|"'
   Note $outf '   echo "args = |$args|"'
   Note $outf '   echo "lib  = |$lib|"'
   Note $outf 'endif'
   Note $outf ''

   Note $outf 'if ("$inf" == "") then'
   Note $outf '   echo "No input file specified - exiting"'
   Note $outf '   exit(1)'
   Note $outf 'endif'
   Note $outf ""

   Note $outf 'if (("$outf" == "") && ("$pref" == "") && ($co == FALSE)) then'
   Note $outf '   echo "No output file specified - exiting"'
   Note $outf '   exit(1)'
   Note $outf 'endif'
   Note $outf ""

   Note $outf 'set FC  = ( $exe $args )'
   Note $outf ""

#--------------------------------------------------------------------------'
#--------------------------------------------------------------------------'

# check the compilers database for needed environment variables
# such as license file, directory paths
# NOTE: the compilers database is a hand written database
# and distributions builds do not have this

   if (-x "$wexe") then
      set compilers = $wexe:h/compilers
   else
      set compilers = no.file
   endif
   if (-f $compilers) then

      set linf = ( `awk '($2 == "'$comp'") && ($1 == "'$PSY_Arch'") && ($3 == "'$vers'") {print}' $compilers` )
      if ($#linf < 4) then
         set linf = ( `awk '($2 == "'$comp'") && ($1 == "'$PSY_Arch'") {print}' $compilers | tail -n 1` )
      endif

      if ($#linf > 4) then
         shift linf
         shift linf
         shift linf
         shift linf

# get other key,value pairs
# useful for setting compiler license variables
         while ($#linf > 1)
            set var = $linf[1]
            set val = $linf[2]
            shift linf
            shift linf
            Note $outf 'if ($vrb > 0) then'
            Note $outf '   echo "   setenv '$var $val'"'
            Note $outf 'endif'
            Note $outf "setenv $var $val"
         end
      endif

      unset linf
      unset sys
   endif
   unset wexe
   unset compilers

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# add to LD_LIBRARY PATH
# NOTE: at config time we know RPATH and it may have dirs needed
# in LD_LIBRARY_PATH at compile time
# for example, recent poorly built GNU compilers which will not
# run without LD_LIBRARY_PATH being set

   if ("$RPATH" != "") then
      Note $outf 'if ($?LD_LIBRARY_PATH == 1) then'
      Note $outf '   setenv LD_LIBRARY_PATH '$RPATH':$LD_LIBRARY_PATH'
      Note $outf 'else'
      Note $outf '   setenv LD_LIBRARY_PATH '$RPATH
      Note $outf 'endif'
      Note $outf ""
   endif

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

   Note $outf 'set path   = ( '$BinDir' $path )'
   Note $outf 'set action = ""'

   Note $outf 'if ($?SC_EXEC_N_ATTEMPTS == 1) then'
   Note $outf '   @ na = $SC_EXEC_N_ATTEMPTS'
   Note $outf 'else'
   Note $outf '   @ na = 1'
   Note $outf 'endif'
   Note $outf ""

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# check abstract options

   Note $outf 'if ($dbg == TRUE) then'
   Note $outf '   set args = ( '$FC_Debug' $args )'
   Note $outf 'else if ($opt == TRUE) then'
   Note $outf '   set args = ( '$FC_Optimize' $args )'
   Note $outf 'endif'
   Note $outf ""

   Note $outf 'if ($prf == TRUE) then'
   Note $outf '   set args = ( '$FC_Profile' $args )'
   Note $outf 'endif'
   Note $outf ""

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

   switch ($comp)

# NOTE: newest GNU compilers require this to run because
# for some reason they were not built with -rpath
# this is not for the compiled executables but the compiler
      case gfortran:
           Note $outf 'set root = $exe:h'
           Note $outf 'set root = $root:h'
           Note $outf 'if ($?LD_LIBRARY_PATH == 1) then'
           Note $outf '   setenv LD_LIBRARY_PATH  $root/lib64:$root/lib:${LD_LIBRARY_PATH}'
           Note $outf 'else'
           Note $outf '   setenv LD_LIBRARY_PATH  $root/lib64:$root/lib'
           Note $outf 'endif'

           Note $outf 'unset root'
           breaksw

      case pathf90:
           Note $outf 'set root  = $exe:h'
           Note $outf 'set root  = $root:h'
           Note $outf 'set lvers = `ls $root/lib`'
           Note $outf 'if ($?LD_LIBRARY_PATH == 1) then'
           Note $outf '   setenv LD_LIBRARY_PATH  $root/lib/${lvers}:$root/lib/${lvers}/32:${LD_LIBRARY_PATH}'
           Note $outf 'else'
           Note $outf '   setenv LD_LIBRARY_PATH  $root/lib/${lvers}:$root/lib/${lvers}/32'
           Note $outf 'endif'

           Note $outf 'unset root'
           breaksw

      case pgf90:
           breaksw
   endsw
   Note $outf ""

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# these are variables which may be used elsewhere
# we are done with them - so unset them
   Note $outf 'unsetenv PACT_FC_FAMILY'
   Note $outf 'unsetenv PACT_FC_VERSION'
   Note $outf 'unsetenv PACT_FC_PATH'
   Note $outf ""

   Note $outf 'if ("$arc" != "") then'
   Note $outf '   set atl = ( file-time $arc )'
   Note $outf '   set stl = ( file-time $inf )'
   Note $outf 'endif'
   Note $outf ''

#   Note $outf 'rm -f $outf'
#   Note $outf 'set cmd = ( $FC -o $outf $inf $lib )'

   Note $outf '@ nc = $#inf'
   Note $outf 'set lfo = ""'
   Note $outf ''

   Note $outf 'foreach fi ($inf)'
   Note $outf '   if ($nc > 1) then'
   Note $outf '      set ft  = $fi:t'
   Note $outf '      set fo  = $ft:r.o'
   Note $outf '      set lfo = ( $lfo $fo )'
   Note $outf '      set co  = TRUE'
   Note $outf '   else'
   Note $outf '      set fo = $outf'
   Note $outf '   endif'
   Note $outf '   rm -f $fo'
   Note $outf '   if ($co == TRUE) then'
   Note $outf '      set cmd = ( `echo "$FC -o $fo -c $fi $lib" | sed '"'"'s|+++|\"|g'"'"'` )'
   Note $outf '      if ($vrb > 1) then'
   Note $outf '         echo "   $cmd"'
   Note $outf '      else if ($vrb > 0) then'
   Note $outf '         echo "   $exe:t -o $fo -c $fi:t $lib"'
   Note $outf '      endif'
   Note $outf '   else'
   Note $outf '      set cmd = ( `echo "$FC -o $fo $fi $lib" | sed '"'"'s|+++|\"|g'"'"'` )'
   Note $outf '      if ($vrb > 1) then'
   Note $outf '         echo "   $cmd"'
   Note $outf '      else if ($vrb > 0) then'
   Note $outf '         echo "   $exe:t -o $fo $fi:t $lib"'
   Note $outf '      endif'
   Note $outf '   endif'
   Note $outf '   $cmd'
   Note $outf '   @ err = $err + $status'
   Note $outf '   $action'
   Note $outf 'end'
   Note $outf ''

   Note $outf ''
   Note $outf 'if ($err == 0) then'
   Note $outf '   if ("$arc" != "") then'
   Note $outf '      set cmd = ( '$AR_Exe $AR_IFlag' $arc $lfo )'
   Note $outf '      if ($vrb > 0) then'
   Note $outf '         echo "   '$AR_Exe $AR_IFlag' $arc"'
   Note $outf '      endif'
   Note $outf '      $cmd'
   Note $outf '      @ xstatus = $status'
   Note $outf '      if ($xstatus == 0) then'
   Note $outf '         rm -f $lfo'
   Note $outf '      else'
   Note $outf '         @ err = $err + $xstatus'
   Note $outf '      endif'
   Note $outf '   else if (("$outf" != "") && ("$lfo" != "")) then'
   Note $outf '      set cmd = ( '$LD_Exe' $args -o $outf $lfo $lib)'
   Note $outf '      if ($vrb > 1) then'
   Note $outf '         echo "   $cmd"'
   Note $outf '      else if ($vrb > 0) then'
   Note $outf '         echo "   '$LD_Exe:t' -o $outf $lib"'
   Note $outf '      endif'
   Note $outf '      $cmd'
   Note $outf '      @ xstatus = $status'
   Note $outf '      if ($xstatus == 0) then'
   Note $outf '         rm -f $lfo'
   Note $outf '      else'
   Note $outf '         @ err = $err + $xstatus'
   Note $outf '      endif'
   Note $outf '   endif'
   Note $outf 'endif'
   Note $outf ''

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

else

   Note $outf 'echo "No native fortran compiler - exiting"'
   Note $outf '@ err = 1'

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

endif

Note $outf ""

Note $outf 'exit($err)'

flog $WLog chmod a+x $outf

source $Me:h/post-common

exit(0)

