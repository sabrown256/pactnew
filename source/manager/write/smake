#!/bin/csh -f
#
# SMAKE - compile the smake program
#
# Source Version: 3.0
# Software Release #: LLNL-CODE-422942
#
# include "cpyright.h"
#

unalias *

# put these in shell variables since
# prune-env will remove them as environment variables
set Log    = $1
set ScrDir = $2

eval `$ScrDir/prune-env pact`
set path = ( $ScrDir $path )
source $ScrDir/env-csh

dbget InstBase
dbget CfgDir
dbget System
dbget GnuMakeOpt
dbget IncDir
dbget EtcDir
dbget BinDir
dbget MngDir
dbget Cfg_CC_Flags
dbget Cfg_Lex_Flags
dbget Cfg_LD_Flags
dbget Cfg_LD_RPath
dbget Cfg_CC_Exe
dbget UseTmpDir

set lpactver = `cat $MngDir/.pact-version`

Separator $Log
Note $Log "   lpactver      = |$lpactver|"
Note $Log "   InstBase      = $InstBase"
Note $Log "   CfgDir        = $CfgDir"
Note $Log "   System        = $System"
Note $Log "   GnuMakeOpt    = $GnuMakeOpt"
Note $Log "   IncDir        = $IncDir"
Note $Log "   EtcDir        = $EtcDir"
Note $Log "   BinDir        = $BinDir"
Note $Log "   MngDir        = $MngDir"
Note $Log "   Cfg_CC_Flags  = $Cfg_CC_Flags"
Note $Log "   Cfg_Lex_Flags = $Cfg_Lex_Flags"
Note $Log "   Cfg_LD_Flags  = $Cfg_LD_Flags"
Note $Log "   Cfg_LD_RPath  = $Cfg_LD_RPath"
Note $Log "   Cfg_CC_Exe    = $Cfg_CC_Exe"
Note $Log "   UseTmpDir     = |$UseTmpDir|"

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

    NoteD $Log -n "   System make wrapper - smake"
    Note $Log " "

    flog $Log pushd $CfgDir

    set InstOld = instold

    set Tmp    = tmp-$System
    set TPACTX = pactx.$Tmp
    set TMAKEF = mk.$Tmp

# backup the public files
    if ($InstBase != "none") then
       if (-d $InstOld) then
          flog $Log $RMDir $InstOld
       endif
       flog $Log mkdir $InstOld

       if (-e $InstBase/bin/pact) then
          flog $Log cp $InstBase/bin/pact $InstOld
       endif
       if (-e $InstBase/etc/make-def) then
          flog $Log cp $InstBase/etc/make-def $InstOld
       endif
       if (-e $InstBase/etc/make-macros) then
          flog $Log cp $InstBase/etc/make-macros $InstOld
       endif

       if (-d $InstBase/include) then
          sed "s|$SysDir|$InstBase|" $EtcDir/make-def > $InstBase/etc/make-def
          flog $Log cp $EtcDir/make-macros $InstBase/etc/make-macros
       endif
    endif

# write a test Makefile
    flog $Log $RM $TMAKEF
    flog $Log touch $TMAKEF pre-Make

cat << EOF >! $TMAKEF
b:
	@csh -c "echo OK"

a:
	@$BinDir/smake -f $TMAKEF b

EOF

    flog $Log cat $TMAKEF

# build the small version of the PACT program (call it smake)
    set MakeOpt = ""
    set MakeOpt = ( $MakeOpt -g )

    set MakeOpt = ( $MakeOpt -DSYSTEM_ID=\"${System}\" )
    set MakeOpt = ( $MakeOpt -DPACT_VERSION=\"${lpactver}\" )
    set MakeOpt = ( $MakeOpt $GnuMakeOpt )
    set MakeOpt = ( $MakeOpt -I${IncDir} )

    set RootOpt = ( $MakeOpt )
    if ($UseTmpDir == TRUE) then
       set RootOpt = ( $RootOpt -DUSE_TMP_DIR )
    endif

    flog $Log set direct = FALSE

    set ok = FALSE
    foreach n ( 1 2 )
       Note $Log "--------  Pass $n ---------"
       flog $Log ${RM} $BinDir/smake

       if ($n == 2) then
          set RootOpt = ( $RootOpt -DSTUPID_MAKE )
       endif

       if ($direct == TRUE) then
          set opt = ""
          set opt = ( $opt $RootOpt $Cfg_CC_Flags $Cfg_Lex_Flags )
          set opt = ( $opt $Cfg_LD_Flags $Cfg_LD_RPath )

          flog $Log $Cfg_CC_Exe $opt ../../psh/smake.c -o $BinDir/smake
       else

# put path to compiler at the head of the path variable for ccw
          source $EtcDir/env-pact.csh

          flog $Log pushd ../../psh
          flog $Log ./ccw "$RootOpt" smake.c -o $BinDir/smake
          flog $Log popd
       endif

       flog $Log ls -l $BinDir/smake
       flog $Log $BinDir/smake -f $TMAKEF a
       if ($status == 0) then
          if ($n == 1) then
             NoteD $Log " (Does use PATH)"
          else
             NoteD $Log " (Does NOT use PATH)"
          endif
          set ok = TRUE
          break
       endif
    end
    Note $Log "--------  Pass $n ---------"

    if ($ok == FALSE) then
       flog $Log ${RM} $BinDir/smake
       NoteD $Log " "
       NoteD $Log " "
       NoteD $Log "ERROR: SERIOUS MAKE PROBLEM ON THIS PLATFORM"
       NoteD $Log " "
       exit(1)
    endif

    unset opt
    unset ok

    flog $Log $RMDir z-*
    flog $Log $RM `ls`
    flog $Log popd

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

unset lpactver

exit(0)

