#!/bin/csh -f
#
# INSTALL-PACT - write the install-pact script
#
# Source Version: 3.0
# Software Release #: LLNL-CODE-422942
#
# include "cpyright.h"
#

set Me = $0
source $Me:h/common

Note $Log "----- write/install-pact -----"
Note $Log "Write: install-pact"
Note $Log ""

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

Separator $Log

NoteD $Log "   PACT Installer Script - install-pact"
Note $Log ""

dbmget $Log InstBase^     \
            UPDATE^       \
            BinDir^       \
            CfgMan^       \
            ScmDir^       \
            Man1Dir^      \
            Man3Dir^      \
            HAVE_PYTHON^  \
            PY_Vers^      \
            PY_DirPy^     \
            PY_DirDst^    \
            PY_DirSrc^    \
            SYS_Arch

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

    Note $Log "Installation base: |$InstBase|"

    set STDOUT = $BinDir/install-pact

    flog $Log $RM $STDOUT
    flog $Log touch $STDOUT

    Note $STDOUT "#\!/bin/csh -f"
    Note $STDOUT "#"
    Note $STDOUT "# INSTALL-PACT - script for installation of PACT directory files"
    Note $STDOUT "#              - in designated directories; returns error messages"
    Note $STDOUT "#              - with names of errant files in case of failures"
    Note $STDOUT "#              - rewritten from Carolyn Sharp's original"
    Note $STDOUT ""

    Note $STDOUT "@ err = 0"
    Note $STDOUT ""

    if ("$InstBase" == "none") then

       Note $STDOUT 'echo ""'
       Note $STDOUT 'echo " ** By request PACT is NOT being installed **"'
       Note $STDOUT 'echo ""'
       Note $STDOUT ""

    else

       Note $STDOUT "set Owner     = $USER"
       Note $STDOUT "set Group     = "'`'"groups | awk '{print "'$1'"}'"'`'
       Note $STDOUT 'set sys_id    = `'$CfgMan' use`'

# NOTE: this can only be successfully run from the manager directory
       if ($cwd !~ */manager) then
          echo "install-pact can only be run from the manager - exiting"
          exit(1)
       endif

       Note $STDOUT 'set lbase     = $cwd'
       Note $STDOUT 'set lbasedir  = $lbase:h'
       Note $STDOUT 'set lsysdir   = $lbasedir/dev/$sys_id'
       Note $STDOUT 'set ldocdir   = $lbasedir/doc'
       Note $STDOUT 'unset lbase'
       Note $STDOUT ""

       Note $STDOUT "set InstDir   = $InstBase"
       Note $STDOUT 'set SchemeDir = $InstDir/'$ScmDir
       Note $STDOUT 'set Man1Dir   = $InstDir/'$Man1Dir
       Note $STDOUT 'set Man3Dir   = $InstDir/'$Man3Dir
       Note $STDOUT ""

       Note $STDOUT 'set Bins = ( '`awk '$1 == "bin"    {for (i = 2; i <= NF; i++) {printf("%s ", $i);};}' pact.manifest`' )' 
       Note $STDOUT 'set Libs = ( '`awk '$1 == "lib"    {for (i = 2; i <= NF; i++) {printf("%s ", $i);};}' pact.manifest`' )' 
       Note $STDOUT 'set Incs = ( '`awk '$1 == "inc"    {for (i = 2; i <= NF; i++) {printf("%s ", $i);};}' pact.manifest`' )' 
       Note $STDOUT 'set Etcs = ( '`awk '$1 == "etc"    {for (i = 2; i <= NF; i++) {printf("%s ", $i);};}' pact.manifest`' )' 
       Note $STDOUT 'set Mods = ( '`awk '$1 == "f90"    {for (i = 2; i <= NF; i++) {printf("%s ", $i);};}' pact.manifest`' )' 
       Note $STDOUT 'set Scms = ( '`awk '$1 == "scm"    {for (i = 2; i <= NF; i++) {printf("%s ", $i);};}' pact.manifest`' )' 
       Note $STDOUT 'set Scrs = ( '`awk '$1 == "script" {for (i = 2; i <= NF; i++) {printf("%s ", $i);};}' pact.manifest`' )' 
       Note $STDOUT ""

       Note $STDOUT 'set path = ( $lsysdir/bin $path )'
       Note $STDOUT ""

       Note $STDOUT "set RM = ( $RM )"
       Note $STDOUT ""

       Note $STDOUT 'echo ""'
       Note $STDOUT 'echo "INSTALLING PACT ..."'
       Note $STDOUT ""

       Note $STDOUT 'chdir $lsysdir'
       Note $STDOUT 'set DestDir = $InstDir/bin'
       Note $STDOUT ""

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# BIN - bin installs

       Note $STDOUT "# install executable files with 775"
       Note $STDOUT 'pushd bin >& /dev/null'
       Note $STDOUT 'echo ""'
       Note $STDOUT 'echo "Installing scripts in $InstDir/bin"'
       Note $STDOUT 'foreach file ($Scrs)'
       Note $STDOUT '   if (-f $file) then'
       Note $STDOUT '      touch $DestDir/.lock'
       Note $STDOUT '      sinstall -p 775 $file $DestDir'
       Note $STDOUT '      if ($status != 0) then'
       Note $STDOUT '         echo "   FAILED ($status) $file"'
       Note $STDOUT '      else'
       Note $STDOUT '         echo "   $file"'
       Note $STDOUT '      endif'
       Note $STDOUT '   endif'
       Note $STDOUT 'end'
       Note $STDOUT ""

       Note $STDOUT 'echo ""'
       Note $STDOUT 'echo "Installing binary executables in $InstDir/bin"'
       Note $STDOUT 'foreach file ($Bins)'
       Note $STDOUT '   if (-x $file) then'
       Note $STDOUT '      touch $DestDir/.lock'
       Note $STDOUT '      sinstall -p 775 $file $DestDir'
       Note $STDOUT '      if ($status != 0) then'
       Note $STDOUT '         echo "   FAILED ($status) $file"'
       Note $STDOUT '      else'
       Note $STDOUT '         echo "   $file"'
       Note $STDOUT '      endif'
       Note $STDOUT '   endif'
       Note $STDOUT 'end'
       Note $STDOUT ""

       Note $STDOUT 'echo ""'
       Note $STDOUT 'echo "Installing pact utility in $InstDir/bin"'
       Note $STDOUT 'set file = pact'
       Note $STDOUT 'set base = $file:t'
       Note $STDOUT 'if (-x "$file") then'
       Note $STDOUT '   touch $DestDir/.lock'
       Note $STDOUT '   sinstall -p 775 $file $DestDir/$base'
       Note $STDOUT '   if ($status != 0) then'
       Note $STDOUT '      echo "   FAILED ($status) $base"'
       Note $STDOUT '   else'
       Note $STDOUT '      echo "   $base"'
       Note $STDOUT '   endif'
       Note $STDOUT 'endif'
       Note $STDOUT 'unset base'
       Note $STDOUT ""

       Note $STDOUT 'popd >& /dev/null'
       Note $STDOUT ""

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# ETC - etc installs

       Note $STDOUT "# install etc with 664"
       Note $STDOUT 'pushd etc >& /dev/null'
       Note $STDOUT 'echo ""'
       Note $STDOUT 'echo "Installing config/info in $InstDir/etc"'
       Note $STDOUT 'set DestDir = $InstDir/etc'
       Note $STDOUT 'foreach file ($Etcs)'
       Note $STDOUT '   if (-f $file) then'
       Note $STDOUT '      touch $DestDir/.lock'
       Note $STDOUT '      sinstall -p 664 $file $DestDir'
       Note $STDOUT '      if ($status != 0) then'
       Note $STDOUT '         echo "   FAILED ($status) $file"'
       Note $STDOUT '      else'
       Note $STDOUT '         echo "   $file"'
       Note $STDOUT '      endif'
       Note $STDOUT '   endif'
       Note $STDOUT 'end'
       Note $STDOUT ''

# substitute $InstDir for the build directory
# something like /usr/local/apps for ..../dev/$sys_id
# difference between $cwd and pwd makes the original path unpredictable
# so find what actually appeared in the generated files
       Note $STDOUT 'set inf     = ( `grep SCHEME env-pact.csh | tail -n 1` )'
       Note $STDOUT 'set lblddir = $inf[3]:h'
       Note $STDOUT 'unset inf'
       Note $STDOUT ''

       Note $STDOUT 'foreach file (env-pact.csh env-pact.sh env-pact.dk env-pact.mod functions-pact.csh csh-subroutines)'
       Note $STDOUT '   if (-f $file) then'
       Note $STDOUT '      touch $DestDir/.lock'
#       Note $STDOUT '      sinstall -p 664 $file $DestDir'
       Note $STDOUT '      $RM $DestDir/$file'
       Note $STDOUT "      sed 's|'"'$lblddir'"'|'"'$InstDir'"'|' "'$file >! $DestDir/$file'
       Note $STDOUT '      if ($status != 0) then'
       Note $STDOUT '         echo "   FAILED ($status) $file"'
       Note $STDOUT '      else'
       Note $STDOUT '         chmod 664 $DestDir/$file >& /dev/null'
       Note $STDOUT '         echo "   $file"'
       Note $STDOUT '      endif'
       Note $STDOUT '   endif'
       Note $STDOUT 'end'
       Note $STDOUT ''

       Note $STDOUT 'unset lblddir'
       Note $STDOUT 'popd >& /dev/null'
       Note $STDOUT ""

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# INCLUDE - include installs

       Note $STDOUT "# install include with 664"
       Note $STDOUT 'pushd include >& /dev/null'
       Note $STDOUT 'echo ""'
       Note $STDOUT 'echo "Installing includes in $InstDir/include"'
       Note $STDOUT 'set DestDir = $InstDir/include'
       Note $STDOUT 'foreach file ($Incs)'
       Note $STDOUT '   if (-f $file) then'
       Note $STDOUT '      touch $DestDir/.lock'
       Note $STDOUT '      sinstall -p 664 $file $DestDir'
       Note $STDOUT '      if ($status != 0) then'
       Note $STDOUT '         echo "   FAILED ($status) $file"'
       Note $STDOUT '      else'
       Note $STDOUT '         echo "   $file"'
       Note $STDOUT '      endif'
       Note $STDOUT '   endif'
       Note $STDOUT 'end'
       Note $STDOUT ""

       Note $STDOUT "# install include/shell with 664"
       Note $STDOUT 'pushd shell >& /dev/null'
       Note $STDOUT 'echo ""'
       Note $STDOUT 'echo "Installing shell includes in $InstDir/include/shell"'
       Note $STDOUT 'set DestDir = $InstDir/include/shell'
       Note $STDOUT 'foreach file (*.[ch])'
       Note $STDOUT '   if (-f $file) then'
       Note $STDOUT '      touch $DestDir/.lock'
       Note $STDOUT '      sinstall -p 664 $file $DestDir'
       Note $STDOUT '      if ($status != 0) then'
       Note $STDOUT '         echo "   FAILED ($status) $file"'
       Note $STDOUT '      else'
       Note $STDOUT '         echo "   $file"'
       Note $STDOUT '      endif'
       Note $STDOUT '   endif'
       Note $STDOUT 'end'
       Note $STDOUT 'popd >& /dev/null'
       Note $STDOUT ""

       Note $STDOUT 'echo ""'
       Note $STDOUT 'echo "Installing Fortran modules in $InstDir/include"'
       Note $STDOUT 'set DestDir = $InstDir/include'
       Note $STDOUT 'foreach file ($Mods)'
       Note $STDOUT '   if (-f $file) then'
       Note $STDOUT '      touch $DestDir/.lock'
       Note $STDOUT '      sinstall -p 664 $file $DestDir'
       Note $STDOUT '      if ($status != 0) then'
       Note $STDOUT '         echo "   FAILED ($status) $file"'
       Note $STDOUT '      else'
       Note $STDOUT '         echo "   $file"'
       Note $STDOUT '      endif'
       Note $STDOUT '   endif'
       Note $STDOUT ""

# handle PathScale and its FOO.mod convention
       Note $STDOUT '   set FILE = `echo $file:r | tr "[a-z]" "[a-z]"`.mod'
       Note $STDOUT '   if (-f $FILE) then'
       Note $STDOUT '      touch $DestDir/.lock'
       Note $STDOUT '      sinstall -p 664 $FILE $DestDir'
       Note $STDOUT '      if ($status != 0) then'
       Note $STDOUT '         echo "   FAILED ($status) $FILE"'
       Note $STDOUT '      else'
       Note $STDOUT '         echo "   $FILE"'
       Note $STDOUT '      endif'
       Note $STDOUT '   endif'
       Note $STDOUT 'end'
       Note $STDOUT 'popd >& /dev/null'
       Note $STDOUT ""

# NOTE: temporarily link to certain etc files
# this can go after about 12/2012
       Note $STDOUT 'pushd $DestDir >& /dev/null'
       Note $STDOUT 'foreach file (env-pact.csh env-pact.sh env-pact.dk env-pact.mod functions-pact.csh csh-subroutines cfg.db)'
       Note $STDOUT '   rm -f $file'
       Note $STDOUT '   ln -s ../etc/$file $file'
       Note $STDOUT 'end'
       Note $STDOUT 'popd >& /dev/null'
       Note $STDOUT ""

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# LIB - lib installs

       Note $STDOUT "# install lib with 664"
       Note $STDOUT 'pushd lib >& /dev/null'
       Note $STDOUT 'echo ""'
       Note $STDOUT 'echo "Installing libs in $InstDir/lib"'
       Note $STDOUT 'set DestDir = $InstDir/lib'
       Note $STDOUT 'foreach f ($Libs)'
       Note $STDOUT '   set file = $f'
       Note $STDOUT '   if (-f $file) then'
       Note $STDOUT '      touch $DestDir/.lock'
       Note $STDOUT '      sinstall -p 664 $file $DestDir'
       Note $STDOUT '      if ($status != 0) then'
       Note $STDOUT '         echo "   FAILED ($status) $file"'
       Note $STDOUT '      else'
       if ("$UPDATE" != "touch") then
          Note $STDOUT "         $UPDATE "'$DestDir/$file >& /dev/null'
       endif
       Note $STDOUT '         echo "   $file"'
       Note $STDOUT '      endif'
       Note $STDOUT '   endif'
       Note $STDOUT 'end'

       if ("$HAVE_PYTHON" =~ *TRUE*) then
          Note $STDOUT 'py-install $InstDir'
       endif

       Note $STDOUT 'popd >& /dev/null'
       Note $STDOUT ""

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# SCHEME - scheme installs

       Note $STDOUT "# install SCHEME files with 664"
       Note $STDOUT 'pushd scheme >& /dev/null'
       Note $STDOUT 'echo ""'
       Note $STDOUT 'echo "Installing SCHEME files in $SchemeDir"'
       Note $STDOUT 'set DestDir = $SchemeDir'
       Note $STDOUT 'foreach file ($Scms)'
       Note $STDOUT '   if (-f $file) then'
       Note $STDOUT '      if (!(-d $file)) then'
       Note $STDOUT '         touch $DestDir/.lock'
       Note $STDOUT '         sinstall -p 664 $file $DestDir'
       Note $STDOUT '         if ($status != 0) then'
       Note $STDOUT '            echo "   FAILED ($status) $file"'
       Note $STDOUT '         else'
       Note $STDOUT '            echo "   $file"'
       Note $STDOUT '         endif'
       Note $STDOUT '      endif'
       Note $STDOUT '   endif'
       Note $STDOUT 'end'
       Note $STDOUT ""

       Note $STDOUT 'set DestDir = $SchemeDir/extensions'
       Note $STDOUT 'if (-d extensions) then'
       Note $STDOUT '   if (!(-d $DestDir)) then'
       Note $STDOUT '      mkdir $DestDir'
       Note $STDOUT '   endif'
       Note $STDOUT '   set LSFiles = `ls extensions`'
       Note $STDOUT '   if ("$LSFiles" != "") then'
       Note $STDOUT '      echo ""'
       Note $STDOUT '      echo "Installing SCHEME EXTENSIONS in $SchemeDir/extensions"'
       Note $STDOUT '      chdir extensions'
       Note $STDOUT '      foreach file (*)'
       Note $STDOUT '         if (!(-d $file)) then'
       Note $STDOUT '            touch $DestDir/.lock'
       Note $STDOUT '            sinstall -p 664 $file $DestDir'
       Note $STDOUT '            if ($status != 0) then'
       Note $STDOUT '               echo "   FAILED ($status) $file"'
       Note $STDOUT '            else'
       Note $STDOUT '               echo "   $file"'
       Note $STDOUT '            endif'
       Note $STDOUT '         endif'
       Note $STDOUT '      end'
       Note $STDOUT '   endif'
       Note $STDOUT 'endif'
       Note $STDOUT 'popd >& /dev/null'
       Note $STDOUT ""

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# MAN - man installs

       Note $STDOUT "# install MAN files with 664"
       Note $STDOUT 'pushd $ldocdir >& /dev/null'
       Note $STDOUT 'echo ""'
       Note $STDOUT 'echo "Installing MAN files in $Man1Dir"'
       Note $STDOUT 'set DestDir = $Man1Dir'
       Note $STDOUT 'foreach file (*.1)'
       Note $STDOUT '   if (-f $file) then'
       Note $STDOUT '      if (!(-d $file)) then'
       Note $STDOUT '         touch $DestDir/.lock'
       Note $STDOUT '         sinstall -p 664 $file $DestDir'
       Note $STDOUT '         if ($status != 0) then'
       Note $STDOUT '            echo "   FAILED ($status) $file"'
       Note $STDOUT '         else'
       Note $STDOUT '            echo "   $file"'
       Note $STDOUT '         endif'
       Note $STDOUT '      endif'
       Note $STDOUT '   endif'
       Note $STDOUT 'end'
       Note $STDOUT 'popd >& /dev/null'
       Note $STDOUT ""

       Note $STDOUT 'pushd man/man3 >& /dev/null'
       Note $STDOUT 'set DestDir = $Man3Dir'
       Note $STDOUT 'foreach file (*.3)'
       Note $STDOUT '   if (-f $file) then'
       Note $STDOUT '      if (!(-d $file)) then'
       Note $STDOUT '         touch $DestDir/.lock'
       Note $STDOUT '         sinstall -p 664 $file $DestDir'
       Note $STDOUT '         if ($status != 0) then'
       Note $STDOUT '            echo "   FAILED ($status) $file"'
       Note $STDOUT '         else'
       Note $STDOUT '            echo "   $file"'
       Note $STDOUT '         endif'
       Note $STDOUT '      endif'
       Note $STDOUT '   endif'
       Note $STDOUT 'end'
       Note $STDOUT 'popd >& /dev/null'
       Note $STDOUT ""

       Note $STDOUT 'echo ""'
       Note $STDOUT 'echo "... PACT INSTALLATION COMPLETE"'
       Note $STDOUT 'echo ""'
       Note $STDOUT ""

       Note $STDOUT 'exit($err)'

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

    endif

    flog $Log chmod a+x $STDOUT

exit(0)

