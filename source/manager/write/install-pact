#!/bin/csh -f
#
# INSTALL-PACT - write the install-pact script
#
# Source Version: 3.0
# Software Release #: LLNL-CODE-422942
#
# include "cpyright.h"
#

unalias *

if (-f ../scripts/env-csh) then
   set SrcDir = $cwd
else if (-f ../../scripts/env-csh) then
   set SrcDir = $cwd:h
endif
set ldir = $SrcDir:h/scripts
set path = ( $ldir $path )
source $ldir/env-csh

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

    Separator $Log
    NoteD $Log "   PACT Installer Script - install-pact"
    Note $Log "Installation base: |$InstBase|"

    set STDOUT = $BinDir/install-pact

    flog $Log $RM $STDOUT
    flog $Log touch $STDOUT

    Note $STDOUT "#\!/bin/csh -f"
    Note $STDOUT "#"
    Note $STDOUT "# INSTALL-PACT - script for installation of PACT directory files"
    Note $STDOUT "#              - in designated directories; returns error messages"
    Note $STDOUT "#              - with names of errant files in case of failures"
    Note $STDOUT "#              - rewritten from Carolyn Sharp's original"
    Note $STDOUT ""

    if ("$InstBase" == "none") then

       Note $STDOUT 'echo ""'
       Note $STDOUT 'echo " ** By request PACT is NOT being installed **"'
       Note $STDOUT 'echo ""'
       Note $STDOUT ""

    else

       Note $STDOUT "set Owner     = $USER"
       Note $STDOUT "set Group     = "'`'"groups | awk '{print "'$1'"}'"'`'
       Note $STDOUT 'set Arch      = `'$CfgMan' use`'
       Note $STDOUT 'set Base      = $cwd'
       Note $STDOUT 'set LRoot     = $Base:h'
       Note $STDOUT 'set PactDir   = $LRoot/dev/$Arch'
       Note $STDOUT 'set DocDir    = $LRoot/doc'
       Note $STDOUT "set InstDir   = $InstBase"
       Note $STDOUT 'set SchemeDir = $InstDir/'$ScmDir
       Note $STDOUT 'set ManDir    = $InstDir/'$ManDir
       Note $STDOUT ""

       if ($HavePython == TRUE) then
          Note $STDOUT "set PyVers    = $PyVers"
          Note $STDOUT "set PyDirPy   = $PyDirPy"       # python destination
          Note $STDOUT "set PyDirDst  = $PyDirDst"      # pact destination
          Note $STDOUT "set PyDirSrc  = $PyDirSrc"      # install source
          Note $STDOUT ""
       endif

       Note $STDOUT 'set Bins = ( '`awk '$1 == "bin"    {for (i = 2; i <= NF; i++) {printf("%s ", $i);};}' pact.manifest`' )' 
       Note $STDOUT 'set Libs = ( '`awk '$1 == "lib"    {for (i = 2; i <= NF; i++) {printf("%s ", $i);};}' pact.manifest`' )' 
       Note $STDOUT 'set Incs = ( '`awk '$1 == "inc"    {for (i = 2; i <= NF; i++) {printf("%s ", $i);};}' pact.manifest`' )' 
       Note $STDOUT 'set Mods = ( '`awk '$1 == "f90"    {for (i = 2; i <= NF; i++) {printf("%s ", $i);};}' pact.manifest`' )' 
       Note $STDOUT 'set Scms = ( '`awk '$1 == "scm"    {for (i = 2; i <= NF; i++) {printf("%s ", $i);};}' pact.manifest`' )' 
       Note $STDOUT 'set Scrs = ( '`awk '$1 == "script" {for (i = 2; i <= NF; i++) {printf("%s ", $i);};}' pact.manifest`' )' 
       Note $STDOUT ""

       Note $STDOUT 'set path = ( $PactDir/bin $path )'
       Note $STDOUT ""

       Note $STDOUT "set RM = ( $RM )"
       Note $STDOUT ""

       Note $STDOUT 'echo ""'
       Note $STDOUT 'echo "INSTALLING PACT ..."'
       Note $STDOUT ""

       Note $STDOUT 'chdir $PactDir'
       Note $STDOUT 'set DestDir = $InstDir/bin'
       Note $STDOUT ""

       Note $STDOUT "# install executable files with 775"
       Note $STDOUT 'pushd bin >& /dev/null'
       Note $STDOUT 'echo ""'
       Note $STDOUT 'echo "Installing scripts in $InstDir/bin"'
       Note $STDOUT 'foreach file ($Scrs)'
       Note $STDOUT '   if (-f $file) then'
       Note $STDOUT '      sinstall -p 775 $file $DestDir'
       Note $STDOUT '      if ($status != 0) then'
       Note $STDOUT '         echo "   FAILED ($status) $file"'
       Note $STDOUT '      else'
       Note $STDOUT '         echo "   $file"'
       Note $STDOUT '      endif'
       Note $STDOUT '   endif'
       Note $STDOUT 'end'
       Note $STDOUT ""

       Note $STDOUT 'echo ""'
       Note $STDOUT 'echo "Installing binary executables in $InstDir/bin"'
       Note $STDOUT 'foreach file ($Bins)'
       Note $STDOUT '   if (-x $file) then'
       Note $STDOUT '      sinstall -p 775 $file $DestDir'
       Note $STDOUT '      if ($status != 0) then'
       Note $STDOUT '         echo "   FAILED ($status) $file"'
       Note $STDOUT '      else'
       Note $STDOUT '         echo "   $file"'
       Note $STDOUT '      endif'
       Note $STDOUT '   endif'
       Note $STDOUT 'end'
       Note $STDOUT ""

       Note $STDOUT 'echo ""'
       Note $STDOUT 'echo "Installing pact utility in $InstDir/bin"'
       Note $STDOUT 'set file = pact'
       Note $STDOUT 'set base = $file:t'
       Note $STDOUT 'if (-x "$file") then'
       Note $STDOUT '   sinstall -p 775 $file $DestDir/$base'
       Note $STDOUT '   if ($status != 0) then'
       Note $STDOUT '      echo "   FAILED ($status) $base"'
       Note $STDOUT '   else'
       Note $STDOUT '      echo "   $base"'
       Note $STDOUT '   endif'
       Note $STDOUT 'endif'
       Note $STDOUT ""

       Note $STDOUT 'popd >& /dev/null'
       Note $STDOUT ""

       Note $STDOUT "# install include with 664"
       Note $STDOUT 'pushd include >& /dev/null'
       Note $STDOUT 'echo ""'
       Note $STDOUT 'echo "Installing includes in $InstDir/include"'
       Note $STDOUT 'set DestDir = $InstDir/include'
       Note $STDOUT 'foreach file ($Incs)'
       Note $STDOUT '   if (-f $file) then'
       Note $STDOUT '      sinstall -p 664 $file $DestDir'
       Note $STDOUT '      if ($status != 0) then'
       Note $STDOUT '         echo "   FAILED ($status) $file"'
       Note $STDOUT '      else'
       Note $STDOUT '         echo "   $file"'
       Note $STDOUT '      endif'
       Note $STDOUT '   endif'
       Note $STDOUT 'end'

       Note $STDOUT "# install include/shell with 664"
       Note $STDOUT 'pushd shell >& /dev/null'
       Note $STDOUT 'echo ""'
       Note $STDOUT 'echo "Installing shell includes in $InstDir/include/shell"'
       Note $STDOUT 'set DestDir = $InstDir/include/shell'
       Note $STDOUT 'foreach file (*.[ch])'
       Note $STDOUT '   if (-f $file) then'
       Note $STDOUT '      sinstall -p 664 $file $DestDir'
       Note $STDOUT '      if ($status != 0) then'
       Note $STDOUT '         echo "   FAILED ($status) $file"'
       Note $STDOUT '      else'
       Note $STDOUT '         echo "   $file"'
       Note $STDOUT '      endif'
       Note $STDOUT '   endif'
       Note $STDOUT 'end'
       Note $STDOUT 'popd >& /dev/null'

       Note $STDOUT 'echo ""'
       Note $STDOUT 'echo "Installing F90 modules in $InstDir/include"'
       Note $STDOUT 'set DestDir = $InstDir/include'
       Note $STDOUT 'foreach file ($Mods)'
       Note $STDOUT '   if (-f $file) then'
       Note $STDOUT '      sinstall -p 664 $file $DestDir'
       Note $STDOUT '      if ($status != 0) then'
       Note $STDOUT '         echo "   FAILED ($status) $file"'
       Note $STDOUT '      else'
       Note $STDOUT '         echo "   $file"'
       Note $STDOUT '      endif'
       Note $STDOUT '   endif'
       Note $STDOUT 'end'
       Note $STDOUT 'popd >& /dev/null'
       Note $STDOUT ""

       Note $STDOUT "# install shell environment files with 664"
       Note $STDOUT 'pushd include >& /dev/null'
       Note $STDOUT 'echo ""'
       Note $STDOUT 'echo "Installing shell environment files in $InstDir/include"'
       Note $STDOUT 'set DestDir = $InstDir/include'
       Note $STDOUT 'foreach file (env-pact.csh env-pact.sh env-pact.dk env-pact.mod env-mio env-csh csh-subroutines)'
       Note $STDOUT '   if (-f $file) then'
#       Note $STDOUT '      sinstall -p 664 $file $DestDir'
       Note $STDOUT '      $RM $DestDir/$file'
       Note $STDOUT "      sed 's|'"'$PactDir'"'|'"'$InstDir'"'|' "'$file >! $DestDir/$file'
       Note $STDOUT '      if ($status != 0) then'
       Note $STDOUT '         echo "   FAILED ($status) $file"'
       Note $STDOUT '      else'
       Note $STDOUT '         chmod 664 $DestDir/$file >& /dev/null'
       Note $STDOUT '         echo "   $file"'
       Note $STDOUT '      endif'
       Note $STDOUT '   endif'
       Note $STDOUT 'end'
       Note $STDOUT 'popd >& /dev/null'
       Note $STDOUT ""

       Note $STDOUT "# install lib with 664"
       Note $STDOUT 'pushd lib >& /dev/null'
       Note $STDOUT 'echo ""'
       Note $STDOUT 'echo "Installing libs in $InstDir/lib"'
       Note $STDOUT 'set DestDir = $InstDir/lib'
       Note $STDOUT 'foreach f ($Libs)'
       Note $STDOUT '   set file = $f'
       Note $STDOUT '   if (-f $file) then'
       Note $STDOUT '      sinstall -p 664 $file $DestDir'
       Note $STDOUT '      if ($status != 0) then'
       Note $STDOUT '         echo "   FAILED ($status) $file"'
       Note $STDOUT '      else'
       if ("$UPDATE" != "touch") then
          Note $STDOUT "         $UPDATE "'$DestDir/$file >& /dev/null'
       endif
       Note $STDOUT '         echo "   $file"'
       Note $STDOUT '      endif'
       Note $STDOUT '   endif'
       Note $STDOUT 'end'

       if ($HavePython == TRUE) then
          Note $STDOUT 'foreach dst ($PyDirDst)'
          Note $STDOUT '   mkdir -p $dst >& /dev/null'
          Note $STDOUT '   if (-d $dst) then'
          Note $STDOUT '      pushd $PyDirSrc >& /dev/null'
          Note $STDOUT '      echo ""'
          Note $STDOUT '      echo "Installing python shared objects in $dst"'
          Note $STDOUT '      foreach f (libpy*.so.1 *.py *.pyc)'
          Note $STDOUT '         set file = $f'
          Note $STDOUT '         if (-f $file) then'
          Note $STDOUT '            sinstall -p 664 $file $dst'
          Note $STDOUT '            if ($status != 0) then'
          Note $STDOUT '               echo "   FAILED ($status) $file"'
          Note $STDOUT '            else'
          Note $STDOUT '               echo "   $file"'
          Note $STDOUT '            endif'
          Note $STDOUT '         endif'
          Note $STDOUT '      end'
          Note $STDOUT '      popd >& /dev/null'
          Note $STDOUT '      pushd $dst >& /dev/null'
          Note $STDOUT '      foreach f (libpy*.so.1)'
          Note $STDOUT '         if (-f $f) then'
          Note $STDOUT '            set nstatus = 0'
          Note $STDOUT '            set fb = `expr "$f" : '"'libpy\(.*\)\.so.1'"'`'
          Note $STDOUT '            set fo = $f:r'
          Note $STDOUT '            $RM $fo _$fb.so'
          Note $STDOUT '            ln -s $f $fo'
          Note $STDOUT '            ln -s $f _$fb.so'
          Note $STDOUT '            set nstatus = $status'
          Note $STDOUT '            if ($nstatus != 0) then'
          Note $STDOUT '               echo "   $f LINK FAILED ($status)"'
          Note $STDOUT '            else'
          Note $STDOUT '               chmod 664 $fo _$fb.so >& /dev/null'
          Note $STDOUT '               echo "   $fo -> $f"'
          Note $STDOUT '               echo "   _$fb.so -> $f"'
          Note $STDOUT '            endif'
          Note $STDOUT '         endif'
          Note $STDOUT '      end'
          Note $STDOUT '      popd >& /dev/null'
          Note $STDOUT '   endif'
          Note $STDOUT 'end'
       endif

       Note $STDOUT 'popd >& /dev/null'
       Note $STDOUT ""

       Note $STDOUT "# install SCHEME files with 664"
       Note $STDOUT 'pushd scheme >& /dev/null'
       Note $STDOUT 'echo ""'
       Note $STDOUT 'echo "Installing SCHEME files in $SchemeDir"'
       Note $STDOUT 'set DestDir = $SchemeDir'
       Note $STDOUT 'foreach file ($Scms)'
       Note $STDOUT '   if (-f $file) then'
       Note $STDOUT '      if (!(-d $file)) then'
       Note $STDOUT '         sinstall -p 664 $file $DestDir'
       Note $STDOUT '         if ($status != 0) then'
       Note $STDOUT '            echo "   FAILED ($status) $file"'
       Note $STDOUT '         else'
       Note $STDOUT '            echo "   $file"'
       Note $STDOUT '         endif'
       Note $STDOUT '      endif'
       Note $STDOUT '   endif'
       Note $STDOUT 'end'
       Note $STDOUT ""

       Note $STDOUT 'set DestDir = $SchemeDir/extensions'
       Note $STDOUT 'if (-d extensions) then'
       Note $STDOUT '   if (!(-d $DestDir)) then'
       Note $STDOUT '      mkdir $DestDir'
       Note $STDOUT '   endif'
       Note $STDOUT '   set LSFiles = `ls extensions`'
       Note $STDOUT '   if ("$LSFiles" != "") then'
       Note $STDOUT '      echo ""'
       Note $STDOUT '      echo "Installing SCHEME EXTENSIONS in $SchemeDir/extensions"'
       Note $STDOUT '      chdir extensions'
       Note $STDOUT '      foreach file (*)'
       Note $STDOUT '         if (!(-d $file)) then'
       Note $STDOUT '            sinstall -p 664 $file $DestDir'
       Note $STDOUT '            if ($status != 0) then'
       Note $STDOUT '               echo "   FAILED ($status) $file"'
       Note $STDOUT '            else'
       Note $STDOUT '               echo "   $file"'
       Note $STDOUT '            endif'
       Note $STDOUT '         endif'
       Note $STDOUT '      end'
       Note $STDOUT '   endif'
       Note $STDOUT 'endif'
       Note $STDOUT 'popd >& /dev/null'
       Note $STDOUT ""

       Note $STDOUT "# install MAN files with 664"
       Note $STDOUT 'pushd $DocDir >& /dev/null'
       Note $STDOUT 'echo ""'
       Note $STDOUT 'echo "Installing MAN files in $ManDir"'
       Note $STDOUT 'set DestDir = $ManDir'
       Note $STDOUT 'foreach file (*.1)'
       Note $STDOUT '   if (-f $file) then'
       Note $STDOUT '      if (!(-d $file)) then'
       Note $STDOUT '         sinstall -p 664 $file $DestDir'
       Note $STDOUT '         if ($status != 0) then'
       Note $STDOUT '            echo "   FAILED ($status) $file"'
       Note $STDOUT '         else'
       Note $STDOUT '            echo "   $file"'
       Note $STDOUT '         endif'
       Note $STDOUT '      endif'
       Note $STDOUT '   endif'
       Note $STDOUT 'end'
       Note $STDOUT 'popd >& /dev/null'
       Note $STDOUT ""

       Note $STDOUT 'echo ""'
       Note $STDOUT 'echo "... PACT INSTALLATION COMPLETE"'
       Note $STDOUT 'echo ""'

    endif

    flog $Log chmod a+x $STDOUT

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

exit(0)

