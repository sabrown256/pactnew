#!/bin/csh -f
#
# ENV-MIO - write the ENV-MIO file
#
# Source Version: 3.0
# Software Release #: LLNL-CODE-422942
#
# include "cpyright.h"
#

unalias *

if (-f ../scripts/env-csh) then
   set SrcDir = $cwd
else if (-f ../../scripts/env-csh) then
   set SrcDir = $cwd:h
endif
set ldir = $SrcDir:h/scripts
set path = ( $ldir $path )
source $ldir/env-csh
source $ScrDir/csh-subroutines
HAVE_SUBROUTINES

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

    Separator $Log
    NoteD $Log "   MIO specifications - env-mio"

    set FOUT = $IncDir/env-mio

    flog $Log $RM $FOUT
    flog $Log touch $FOUT

    Note $FOUT "#"
    Note $FOUT "# ENV-MIO - installation dependent specifications for MIO"
    Note $FOUT "#         - configuration defined by $Sys"
    Note $FOUT "#"
    Note $FOUT ""

    set lccexe = `pwhich $Cfe_CC_Exe`
    if (-x "$lccexe") then
       set CCBin = $lccexe:h
    else
       set CCBin = none
    endif

    set lfcexe = `pwhich $Cfe_FC_Exe`
    if (-x "$lfcexe") then
       set FCBin = $lfcexe:h
    else
       set FCBin = none
    endif

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# SITE - generate the site definition info

    Note $FOUT '# SITE specifications'
    Note $FOUT ""

# site signature variables
    Note $FOUT "SYS_SITE = $SYS_SITE"
    Note $FOUT "SYS_TYPE = $SYS_TYPE"
    Note $FOUT "DAI_ROOT = $DAI_ROOT"
    Note $FOUT "DAS_ROOT = $DAS_ROOT"
    Note $FOUT ""

    Note $FOUT "VMake += DAI_ROOT DAS_ROOT"
    Note $FOUT "VEnv  += DAI_ROOT DAS_ROOT"
    Note $FOUT "VCDef += DAI_ROOT DAS_ROOT"
    Note $FOUT "VMDef += DAI_ROOT DAS_ROOT"
    Note $FOUT ""

# database variables
    if ($?HOST_SERVER_DB == 1) then
       Note $FOUT "HOST_SERVER_DB    = $HOST_SERVER_DB"
    endif
    if ($?RUN_SIGNATURE_DB == 1) then
       Note $FOUT "RUN_SIGNATURE_DB  = $RUN_SIGNATURE_DB"
    endif
    if ($?SITE_SIGNATURE_DB == 1) then
       Note $FOUT "SITE_SIGNATURE_DB = $SITE_SIGNATURE_DB"
    endif
    if ($?UPDATE_SYS_DB == 1) then
       Note $FOUT "UPDATE_SYS_DB     = $UPDATE_SYS_DB"
    endif
    Note $FOUT ""

    Note $FOUT "VMake += HOST_SERVER_DB RUN_SIGNATURE_DB SITE_SIGNATURE_DB UPDATE_SYS_DB"
    Note $FOUT "VEnv  += HOST_SERVER_DB RUN_SIGNATURE_DB SITE_SIGNATURE_DB UPDATE_SYS_DB"
    Note $FOUT ""

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# COMPILER - generate the compiler info

    Note $FOUT '# COMPILER specifications'
    Note $FOUT ''

    set cmplib = ""
    set lnuma  = ""

    set lbits = $Bits
    if ($CPU == ia64) then
       set lbits = ""
    endif

    Note $FOUT 'VMake += PACT_CC_FAMILY PACT_CC_VERSION PACT_CC_PATH $@'
    Note $FOUT 'VEnv  += PACT_CC_FAMILY PACT_CC_VERSION PACT_CC_PATH $@'
    Note $FOUT ""
    Note $FOUT "PACT_CC_FAMILY  = $PACT_CC_FAMILY"
    Note $FOUT "PACT_CC_VERSION = $PACT_CC_VERSION"
    Note $FOUT "PACT_CC_PATH    = $PACT_CC_PATH"
    Note $FOUT ""

    Note $FOUT 'VMake += PACT_FC_FAMILY PACT_FC_VERSION PACT_FC_PATH $@'
    Note $FOUT 'VEnv  += PACT_FC_FAMILY PACT_FC_VERSION PACT_FC_PATH $@'
    Note $FOUT ""
    Note $FOUT "PACT_FC_FAMILY  = $PACT_FC_FAMILY"
    Note $FOUT "PACT_FC_VERSION = $PACT_FC_VERSION"
    Note $FOUT "PACT_FC_PATH    = $PACT_FC_PATH"
    Note $FOUT ""

    if ($PACT_CC_FAMILY == GNU) then
       set CmpBin = $PACT_CC_PATH/bin
       set cmplib = $PACT_CC_PATH/$LIB

    else if ($PACT_CC_FAMILY == PGI) then
       set cmplib = $PACT_CC_PATH/lib
       set lnuma  = $NUMA
       Note $FOUT ""
       Note $FOUT 'VMake += NUMA'

    else if ($PACT_CC_FAMILY == INTEL) then
       set cmplib = $PACT_CC_PATH/lib

    else if ($PACT_CC_FAMILY == PATHSCALE) then
       if ("$Bits" == 32) then
          set cmplib = ${PACT_CC_PATH}:${PACT_CC_PATH}/32
       else
          set cmplib = $PACT_CC_PATH
       endif
    endif

    if (!(-d "$cmplib")) then
       set cmplib = ""
    endif
    if ($?CROSS_COMPILE == 1) then
       set cmplib = ""
    endif

    Note $FOUT "Path += $CCBin"
    Note $FOUT ""

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# SYSTEM - generate the System group

    Note $FOUT '# PACT SYSTEM specifications'
    Note $FOUT ""

    if ($InstBase == none) then
       set proot = $RootDir
    else
       set proot = $InstBase
    endif
    set pvers = `cat .pact-version`

    if ($OpenMP_SharedFnc == yes) then
       Note $FOUT "define(NEED_OMP_SHARED_FUNCTION)"
       Note $FOUT ""
    endif

    Note $FOUT "CFE           = $CFE"
    Note $FOUT "PFE           = $PFE"
    Note $FOUT "CROSS_COMPILE = $CROSS_COMPILE"
    Note $FOUT 'VMake        += CFE PFE CROSS_COMPILE'

# NOTE: PathScale/Intel build of Basis/MPPL requires this
    if ("$cmplib" != "") then
       Note $FOUT "RPATH = $cmplib" '$@'
    endif
    Note $FOUT ""

    Note $FOUT "System/pact {"
    Note $FOUT "  PACT          = $proot"
    Note $FOUT "  PACTRoot      = $proot"
    Note $FOUT "  PACTVersion   = $pvers"
    Note $FOUT "  PACTLibs      = -lpdb -lpml -lscore ${LD_Lib}"
    Note $FOUT "  PACTMDEL      = ${MDE_Lib}"
    Note $FOUT "  PACTMDGL      = ${MDG_Lib}"
    Note $FOUT "  PACTMDL       = ${LD_Lib} ${LibM_Lib}"
    Note $FOUT "  VMake         = PACT PACTRoot PACTVersion PACTMDGL PACTMDL PACTLibs"
    Note $FOUT "  VEnv          = PACT"
    Note $FOUT "}"
    Note $FOUT ""

    Note $FOUT "Tool/config_pact {"
    Note $FOUT "  AddressSize = $lbits"
    Note $FOUT "}"
    Note $FOUT ""

    set llibs = ""
    set llibs = ( $llibs $cmplib )
    set llibs = ( $llibs `echo $RPATH | sed 's/:/ /g'` )
    set llibs = ( `../scripts/simplify-list $llibs` )

    if ($CCBin != none) then
       Note $FOUT "Tool/cc_pact {"
       Note $FOUT "  ToolClass    = CGroup"
       Note $FOUT "  BinDir       = $CCBin"
       Note $FOUT "  LibDir       = $llibs"
       Note $FOUT "  Exe          = $Cfe_CC_Exe"
       Note $FOUT "  Flags        = $Cfe_CC_Flags"
       Note $FOUT "  AddressSize  = $lbits"
       Note $FOUT "  Numa         = $lnuma"
       Note $FOUT "}"
       Note $FOUT ""
    endif

    if ($FCBin != none) then
       Note $FOUT "Tool/fc_pact {"
       Note $FOUT "  ToolClass    = FGroup"
       Note $FOUT "  BinDir       = $FCBin"
       Note $FOUT "  LibDir       = $llibs"
       Note $FOUT "  Exe          = $Cfe_FC_Exe"
       Note $FOUT "  Flags        = $Cfe_FC_Flags"
       Note $FOUT "  AddressSize  = $lbits"
       Note $FOUT "  Numa         = $lnuma"
       Note $FOUT "}"
       Note $FOUT ""
    endif

    Note $FOUT "Tool/lib_pact {"
    Note $FOUT "  ToolClass   = LibGroup"
    Note $FOUT "  LibFlags    = -r"
    Note $FOUT "  ARFlags     = $AR_Flags $AR_IFlag"
    Note $FOUT "  AddressSize = $lbits"
    Note $FOUT "}"
    Note $FOUT ""

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# emit the PACT Library
    set lrpath = ""
    if ($?PACT_CC_PATH == 1) then
       if (-d ${PACT_CC_PATH}/lib$Bits) then
          set lrpath = ${PACT_CC_PATH}/lib$Bits
       else if (-d ${PACT_CC_PATH}/lib) then
          set lrpath = ${PACT_CC_PATH}/lib
       endif
    endif

# FPACT Library
    Note $FOUT "Library/fpact {"
    Note $FOUT "  Archives  = fpact"
    Note $FOUT "  Libraries = pact"
    Note $FOUT "}"
    Note $FOUT ""

# PACT Library
    Note $FOUT "Library/pact {"
    Note $FOUT "  Libraries = pgs pdb pml score"
    Note $FOUT "}"
    Note $FOUT ""

# SCORE Library
    set llibs = ""
    foreach p ($MD_Pck)
       if ($p != DP) then
          set lp = `echo $p | tr "[A-Z]" "[a-z]"`
          set llibs = ( $llibs $lp )
       endif
    end

    Note $FOUT "Library/score {"
    Note $FOUT "  Archives  = score"
    Note $FOUT "  IncPaths  = $proot/include"
    Note $FOUT "  LibPaths  = $proot/lib"
    Note $FOUT "  RPaths    = $lrpath"
    Note $FOUT "  LDFlags   = $LD_Lib"
    Note $FOUT "  Libraries = $llibs"
    Note $FOUT "}"
    Note $FOUT ""
    unset llibs

# PML Library
    Note $FOUT "Library/pml {"
    Note $FOUT "  Archives  = pml"
    Note $FOUT "  Libraries = score"
    Note $FOUT "}"
    Note $FOUT ""

# PDB Library
    set llibs = ""
    foreach p ($MDI_Pck)
       set lp = `echo $p | tr "[A-Z]" "[a-z]"`
       set llibs = ( $llibs $lp )
    end
    set llibs = ( $llibs dp )

    Note $FOUT "Library/pdb {"
    Note $FOUT "  Archives  = pdb"
    Note $FOUT "  Libraries = pml $llibs"
    Note $FOUT "}"
    Note $FOUT ""
    unset llibs

# PGS Library
    set llibs = ""
    foreach p ($MDG_Pck)
       set lp = `echo $p | tr "[A-Z]" "[a-z]"`
       set llibs = ( $llibs $lp )
    end

    Note $FOUT "Library/pgs {"
    Note $FOUT "  Archives  = pgs ppc"
    Note $FOUT "  Libraries = pml $llibs"
    Note $FOUT "}"
    Note $FOUT ""

    unset llibs

    if ($HAVE_READLINE == TRUE) then
       Note $FOUT 'PkgRL = RL*'
       Note $FOUT ""
    endif

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# PACKAGES - generate configuration info packages

    foreach p ($MDG_Pck $MDI_Pck $MD_Pck)
       Note $FOUT "# $p package"
       Note $FOUT ""

       set lp    = `echo $p | tr "[A-Z]" "[a-z]"`
       set lar   = ( `printenv ${p}_Lib | sed 's|-l||g'` )
       set linc  = ( `printenv ${p}_Inc | sed 's|-I||g'` )
       set lrpth = `printenv ${p}_RPath`

# emit the package only if at least one element is non-empty
       if (("$lar" != "") || ("$linc" != "") || ("$lrpth" != "")) then
          Note $FOUT "Library/$lp {"
          Note $FOUT "  Archives = $lar"
          Note $FOUT "  IncPaths = $linc"
          Note $FOUT "  LibPaths = $lrpth"
          Note $FOUT "  RPaths   = $lrpth"
          Note $FOUT "}"
          Note $FOUT ""
       endif
    end

# see if any package has additions to the PATH
    set lpth = ""
    foreach p ($MDG_Pck $MDI_Pck $MD_Pck)
       set lval = ( `printenv ${p}_Path` )
       if ("$lval" != "") then
          set lpth = ( $lpth $lval )
       endif
    end
    if ("$lpth" != "") then
       Note $FOUT "Path = $lpth" '$@'
       Note $FOUT ""
    endif

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

exit(0)

