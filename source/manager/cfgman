#!/bin/csh -f
#
# CFGMAN - manage PACT code configurations
#        - With this facility it will be possible to have
#        - multiple versions of the codes configured from a
#        - single source on a single platform.
#        - This represents an improvement over the previous
#        - scheme which permitted only a single configuration
#        - per architecture
#
#        - Configuration management is achieved by the following
#        - operations:
#        -
#        -   add    - add a configuration to the managed database
#        -   delete - remove a configuration to the managed database
#        -   use    - return the effective config designation for builds
#        -   list   - return all configurations  for the current architecture
#
# Source Version: 3.0
# Software Release #: LLNL-CODE-422942
#
# include "cpyright.h"
#

set Cmnd = $0
if ("$Cmnd" == "") then
   echo "CFGMAN: bad invocation"
   exit(110)
endif

unalias *

set SGN   = .pc
set ret   = 0
set Tgt   = ""
set LockT = 300
while ($#argv > 0)
   switch ($1)
      case -h:
           echo ""
           echo "Usage: cfgman [-h] [-to <#sec>]"
           echo "              add <cfg> | delete <cfg> | list | reconst <host> [<arch>] | use"
           echo ""
           echo "  h    this help message"
           echo "  to   number of seconds to wait for requisite locks (default 300)"
           echo ""
           echo "  add      add a configuration to the data base"
           echo "  delete   remove a configuration from the data base"
           echo "  list     list the available configurations for the"
           echo "           current real architecture"
           echo "  reconst  reconstitute the database from a host file"
           echo "           takes host file and architecture"
           echo "  use      return the effective architecture name derived"
           echo "           from the current selected configuration"
           echo ""
           exit(1)
           breaksw
      case -to:
           shift
           set LockT = $1
           breaksw
      default:
           set Tgt = $1
           shift
           break
           breaksw
   endsw
   shift
end

@ count = 1
while (1)
   set ExeRoot = `dirname $Cmnd`
   if ("$ExeRoot" != "") break
   if ($count >= 10) then
      echo "CFGMAN: dirname returned null"
      exit(111)
   endif
   @ count = $count + 1
   sleep 1
end

pushd $ExeRoot >& /dev/null
set path = ( $ExeRoot $path )

set root   = $cwd:h
set MngDir = $root/manager
set ScrDir = $root/scripts
set PLOCK  = $root/scripts/plock
set Arch   = `$ScrDir/system-id`

if (-d $MngDir) then
   set dev = $root/dev
else
   echo "CFGMAN: Bad $MngDir"
   exit(112)
endif

popd >& /dev/null

set DB      = $dev/$SGN-$Arch
set LockDir = $DB.lock

if (!(-d $dev)) then
   mkdir -p $dev
endif

if (!(-d $DB)) then
   mkdir -p $DB
   chmod 2770 $DB >& /dev/null
endif

# make the most common usage as fast as possible
# also if SESSION_CONFIG is set do NOT change the database at all
# this will virtually eliminate corruption of the database as
# well as speeding things up
# if you need to change the database you MUST unset SESSION_CONFIG

if ($?PACT_CONFIG == 1) then
   if ("$PACT_CONFIG" == "") then
      echo "CFGMAN: PACT_CONFIG is null"
      exit(113)
   else
      if ($Tgt == add) then
         set i = $DB/$PACT_CONFIG
         touch $i
         chmod 660 $i >& /dev/null
      endif
      echo $PACT_CONFIG
      exit(0)
   endif
endif

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# READ_DB - read the existing database

onintr INTERRUPT

# lock the DB
   $PLOCK lock -d $LockDir -t $LockT >& /dev/null

# all subsequent work to be done in database directory
   pushd $DB >& /dev/null

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

switch ($Tgt)

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# ADD - add the specified config or make it first on the current host
#     - the following two cases must work:
#     -   1) cfgman add <alias>
#     -      add alias

   case add:
        set ent = $1

# check everybody on the current list
        foreach i (`ls -1`)
           if ($i == current) continue

           set sid = $i

           if (("$i" == "$ent") || ("$sid" == "$ent")) then
              touch $i
              chmod 660 $i >& /dev/null
              rm -f current
              ln -s $i current
              break
           endif
        end
        unset sid
        unset ent

        goto USE
        breaksw

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# DELETE - remove the specified config on the current host

   case delete:
        set ent = $1
        if ($ent != all) then

# check everybody on the current list
           foreach i (`ls -1`)
              if ($i == current) continue

              set sid = $i

              if (("$ent" == "$i") || ("$ent" == "$sid")) then
                 rm -f $i >& /dev/null
              endif
           end
           unset sid
        endif
        unset ent

        breaksw

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# LIST - list all configs for the current host

   case list:
        ls -1 |& grep -v current | awk '{printf("   %s\n", $0);}'
        breaksw

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# RECONST - reconstitute the database from a host file

   case reconst:
        set hf = $1
        if ($#argv > 1) then
           set arch = $2
        else
           set arch = `system-id`
        endif

# remove old entries
        rm -f * >& /dev/null

# find the proper entries in the host file
	set lst = ( `grep $arch $hf | grep host | awk '{print $6}'` )
        foreach i ($lst)
           touch $i
           chmod 660 $i >& /dev/null
        end

# first entry is defined to be current
        ln -s $lst[1] current

        breaksw

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# USE - return the correct name for the current config on the current host

   case use:
        goto USE

        breaksw

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# HELP - describe cfgman

   case -h:
   case help:
        echo " "
        echo "Usage: cfgman <tgt> [<opt>]"
        echo " "
        echo " Targets:"
        echo "    add     - add the specified configuration (and optionally alias)"
        echo "    delete  - delete the specified configuration"
        echo "    help    - this help message"
        echo "    list    - list all configurations"
        echo "    reconst - reconstitute databse from host file"
        echo "    use     - return the name or alias of the current configuration"
        echo " "
        breaksw

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

   default:
        echo "CFGMAN: Unknown operation $1"
        set ret = 1
        breaksw
endsw

INTERRUPT:

# unlock the DB
$PLOCK unlock -d $LockDir >& /dev/null

exit($ret)

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# USE - report the current configuration

USE:
   if ($?PACT_CONFIG == 1) then
      set use = $PACT_CONFIG
   else
      set use = "$Arch"
      if (-e current) then
         set inf = ( `ls -l current` )
         if ("$inf" != "") then
            set use = "$inf[$#inf]"
         endif
         unset inf
      endif
   endif
   echo "$use"
   unset use

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# unlock the DB
$PLOCK unlock -d $LockDir >& /dev/null

exit($ret)

