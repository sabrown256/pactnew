/*
 * GC_TYPE_H.H - type handling routines
 *  NOTE: this file was automatically generated by template
 *  any manual changes will not be effective
 *
 */

#ifndef PCK_GC_TYPE_H

#define PCK_GC_TYPE_H

#include "cpyright.h"

#define REAL double
#define HUGE_REAL 1.0e100

#ifndef HAVE_FIXED_WIDTH_FLOAT
typedef float       float32_t;
typedef double      float64_t;
typedef long double float128_t;
#endif

/*--------------------------------------------------------------------------*/

/*                           DEFINED CONSTANTS                              */

/*--------------------------------------------------------------------------*/

#define N_PRIMITIVE_CHAR  2
#define N_PRIMITIVE_FIX   5
#define N_PRIMITIVE_FP    3
#define N_PRIMITIVE_CPX   3
#define N_PRIMITIVE_QUT   1
#define N_SPECIAL_ENUM    2
#define N_SPECIAL_STRUCT  2
#define N_SPECIAL_UNION   0

#define N_PRIMITIVES     16
#define N_TYPES          70

#undef DEF_FUNCTION_PTR
#ifdef __cplusplus
# define DEF_FUNCTION_PTR(_t, _n) typedef _t (*PF##_n)(...)
#else
# define DEF_FUNCTION_PTR(_t, _n) typedef _t (*PF##_n)(void)
#endif

#define _SC_DEF_STATIC_TYPE_LIST_ {                                             \
   {    0,   -1, "unknown", "unknown", "unknown", "unknown", "unk", NULL, 0, TK_META, KIND_OTHER, NULL, NULL, NULL, NULL, NULL, "unknown", "G_UNKNOWN_I", "G_UNKNOWN_S", NULL, NULL, NULL }, 	\
   {    1,   -1, "bit", "bit", "bit", "bit", "bit", NULL, 0, TK_META, KIND_OTHER, NULL, NULL, NULL, NULL, NULL, "bit", "G_BIT_I", "G_BIT_S", NULL, NULL, NULL }, 	\
   {    2,   -1, "struct", "struct", "struct", "struct", "strct", NULL, 0, TK_META, KIND_OTHER, NULL, NULL, NULL, NULL, NULL, "struct", "G_STRUCT_I", "G_STRUCT_S", NULL, NULL, NULL }, 	\
   {    3,   -1, "void", "void", "void", "void", "any", NULL, 1, TK_META, KIND_OTHER, NULL, NULL, "NULL", "void", NULL, "void", "G_VOID_I", "G_VOID_S", NULL, NULL, NULL }, 	\
   {    4,    8, "void *", "void *", "void *", "void", "ptr", NULL, 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "C_PTR-A", NULL, "void", "G_POINTER_I", "G_POINTER_S", NULL, NULL, NULL }, 	\
   {    5, sizeof(bool), "bool", "bool", "bool", "bool", "bool", NULL, 1, TK_PRIMITIVE, KIND_BOOL, "BOOL_MIN", "BOOL_MAX", "FALSE", "logical", "int", "bool", "G_BOOL_I", "G_BOOL_S", NULL, NULL, NULL }, 	\
   {    6,    8, "bool *", "bool *", "bool *", "bool", "ptr", NULL, 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "logical-A", "int", "bool", "G_BOOL_P_I", "G_BOOL_P_S", NULL, NULL, NULL }, 	\
   {    7, sizeof(char), "char", "signed char", "unsigned char", "char", "chr", NULL, 1, TK_PRIMITIVE, KIND_CHAR, "SCHAR_MIN", "SCHAR_MAX", "'\0'", "character", "int", "char", "G_CHAR_I", "G_CHAR_S", NULL, NULL, NULL }, 	\
   {    8,    8, "char *", "char *", "char *", "char", "ptr", NULL, 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "character-A", "int", "char", "G_STRING_I", "G_STRING_S", NULL, NULL, NULL }, 	\
   {    9, sizeof(wchar_t), "wchar_t", "wchar_t", "wchar_t", "wchar_t", "wchr", NULL, 1, TK_PRIMITIVE, KIND_CHAR, "WCHAR_MIN", "WCHAR_MAX", "0", NULL, "int", "wchar_t", "G_WCHAR_I", "G_WCHAR_S", NULL, NULL, NULL }, 	\
   {   10,    8, "wchar_t *", "wchar_t *", "wchar_t *", "wchar_t", "ptr", NULL, 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "C_PTR-A", "int", "wchar_t", "G_WCHAR_P_I", "G_WCHAR_P_S", NULL, NULL, NULL }, 	\
   {   11, sizeof(int8_t), "int8_t", "int8_t", "u_int8_t", "int8_t", "int8", NULL, 1, TK_PRIMITIVE, KIND_INT, "INT8_MIN", "INT8_MAX", "0", "integer(1)", "int", "int8_t", "G_INT8_I", "G_INT8_S", NULL, NULL, NULL }, 	\
   {   12,    8, "int8_t *", "int8_t *", "int8_t *", "int8_t", "ptr", NULL, 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "integer(1)-A", "int", "int8_t", "G_INT8_P_I", "G_INT8_P_S", NULL, NULL, NULL }, 	\
   {   13, sizeof(short), "short", "signed short", "unsigned short", "short", "shrt", NULL, 1, TK_PRIMITIVE, KIND_INT, "SHRT_MIN", "SHRT_MAX", "0", "integer(2)", "int", "short", "G_SHORT_I", "G_SHORT_S", NULL, NULL, NULL }, 	\
   {   14,    8, "short *", "short *", "short *", "short", "ptr", NULL, 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "integer(2)-A", "int", "short", "G_SHORT_P_I", "G_SHORT_P_S", NULL, NULL, NULL }, 	\
   {   15, sizeof(int), "int", "signed int", "unsigned int", "int", "int", NULL, 1, TK_PRIMITIVE, KIND_INT, "INT_MIN", "INT_MAX", "0", "integer", NULL, "int", "G_INT_I", "G_INT_S", NULL, NULL, NULL }, 	\
   {   16,    8, "int *", "int *", "int *", "int", "ptr", NULL, 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "integer-A", NULL, "int", "G_INT_P_I", "G_INT_P_S", NULL, NULL, NULL }, 	\
   {   17, sizeof(long), "long", "signed long", "unsigned long", "long", "lng", NULL, 1, TK_PRIMITIVE, KIND_INT, "LONG_MIN", "LONG_MAX", "0L", "integer(8)", NULL, "long", "G_LONG_I", "G_LONG_S", NULL, NULL, NULL }, 	\
   {   18,    8, "long *", "long *", "long *", "long", "ptr", NULL, 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "integer(8)-A", NULL, "long", "G_LONG_P_I", "G_LONG_P_S", NULL, NULL, NULL }, 	\
   {   19, sizeof(long long), "long long", "signed long long", "unsigned long long", "long_long", "ll", NULL, 1, TK_PRIMITIVE, KIND_INT, "LLONG_MIN", "LLONG_MAX", "0LL", "integer(8)", NULL, "long long", "G_LONG_LONG_I", "G_LONG_LONG_S", NULL, NULL, NULL }, 	\
   {   20,    8, "long long *", "long long *", "long long *", "long_long", "ptr", NULL, 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "integer(8)-A", NULL, "long long", "G_LONG_LONG_P_I", "G_LONG_LONG_P_S", NULL, NULL, NULL }, 	\
   {   21, sizeof(float), "float", "float", "float", "float", "flt", NULL, 1, TK_PRIMITIVE, KIND_FLOAT, "-FLT_MAX", "FLT_MAX", "0.0", "real(4)", "double", "float", "G_FLOAT_I", "G_FLOAT_S", NULL, NULL, NULL }, 	\
   {   22,    8, "float *", "float *", "float *", "float", "ptr", NULL, 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "real(4)-A", "double", "float", "G_FLOAT_P_I", "G_FLOAT_P_S", NULL, NULL, NULL }, 	\
   {   23, sizeof(double), "double", "double", "double", "double", "dbl", NULL, 1, TK_PRIMITIVE, KIND_FLOAT, "-DBL_MAX", "DBL_MAX", "0.0", "real(8)", NULL, "double", "G_DOUBLE_I", "G_DOUBLE_S", NULL, NULL, NULL }, 	\
   {   24,    8, "double *", "double *", "double *", "double", "ptr", NULL, 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "real(8)-A", NULL, "double", "G_DOUBLE_P_I", "G_DOUBLE_P_S", NULL, NULL, NULL }, 	\
   {   25, sizeof(long double), "long double", "long double", "long double", "long_double", "ldbl", NULL, 1, TK_PRIMITIVE, KIND_FLOAT, "-LDBL_MAX", "LDBL_MAX", "0.0", "real(16)", NULL, "long double", "G_LONG_DOUBLE_I", "G_LONG_DOUBLE_S", NULL, NULL, NULL }, 	\
   {   26,    8, "long double *", "long double *", "long double *", "long_double", "ptr", NULL, 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "real(16)-A", NULL, "long double", "G_LONG_DOUBLE_P_I", "G_LONG_DOUBLE_P_S", NULL, NULL, NULL }, 	\
   {   27, sizeof(float _Complex), "float _Complex", "float _Complex", "float _Complex", "float_complex", "fcx", NULL, 1, TK_PRIMITIVE, KIND_COMPLEX, "-FLT_MAX", "FLT_MAX", "0.0", "complex(4)", NULL, "float", "G_FLOAT_COMPLEX_I", "G_FLOAT_COMPLEX_S", NULL, NULL, NULL }, 	\
   {   28,    8, "float _Complex *", "float _Complex *", "float _Complex *", "float_complex", "ptr", NULL, 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "complex(4)-A", NULL, "float", "G_FLOAT_COMPLEX_P_I", "G_FLOAT_COMPLEX_P_S", NULL, NULL, NULL }, 	\
   {   29, sizeof(double _Complex), "double _Complex", "double _Complex", "double _Complex", "double_complex", "dcx", NULL, 1, TK_PRIMITIVE, KIND_COMPLEX, "-DBL_MAX", "DBL_MAX", "0.0", "complex(8)", NULL, "double", "G_DOUBLE_COMPLEX_I", "G_DOUBLE_COMPLEX_S", NULL, NULL, NULL }, 	\
   {   30,    8, "double _Complex *", "double _Complex *", "double _Complex *", "double_complex", "ptr", NULL, 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "complex(8)-A", NULL, "double", "G_DOUBLE_COMPLEX_P_I", "G_DOUBLE_COMPLEX_P_S", NULL, NULL, NULL }, 	\
   {   31, sizeof(long double _Complex), "long double _Complex", "long double _Complex", "long double _Complex", "long_double_complex", "ldcx", NULL, 1, TK_PRIMITIVE, KIND_COMPLEX, "-LDBL_MAX", "LDBL_MAX", "0.0", "complex(16)", NULL, "long double", "G_LONG_DOUBLE_COMPLEX_I", "G_LONG_DOUBLE_COMPLEX_S", NULL, NULL, NULL }, 	\
   {   32,    8, "long double _Complex *", "long double _Complex *", "long double _Complex *", "long_double_complex", "ptr", NULL, 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "complex(16)-A", NULL, "long double", "G_LONG_DOUBLE_COMPLEX_P_I", "G_LONG_DOUBLE_COMPLEX_P_S", NULL, NULL, NULL }, 	\
   {   33, sizeof(quaternion), "quaternion", "quaternion", "quaternion", "quaternion", "qut", NULL, 1, TK_PRIMITIVE, KIND_QUATERNION, "-DBL_MAX", "DBL_MAX", "Q_ZERO", NULL, NULL, "double", "G_QUATERNION_I", "G_QUATERNION_S", NULL, NULL, NULL }, 	\
   {   34,    8, "quaternion *", "quaternion *", "quaternion *", "quaternion", "ptr", NULL, 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "C_PTR-A", NULL, "double", "G_QUATERNION_P_I", "G_QUATERNION_P_S", NULL, NULL, NULL }, 	\
   {   35, sizeof(FILE), "FILE", "FILE", "FILE", "file", "file", NULL, 1, TK_STRUCT, KIND_STRUCT, NULL, NULL, "NULL", NULL, NULL, "FILE", "G_FILE_I", "G_FILE_S", NULL, NULL, NULL }, 	\
   {   36,    8, "FILE *", "FILE *", "FILE *", "file", "ptr", NULL, 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "C_PTR-A", NULL, "FILE", "G_FILE_P_I", "G_FILE_P_S", NULL, NULL, NULL }, 	\
   {   37, sizeof(type_group), "type_group", "type_group", "type_group", "type_group", "tgrp", NULL, 1, TK_ENUM, KIND_ENUM, "KIND_CHAR", "KIND_OTHER", "KIND_CHAR", NULL, NULL, "type_group", "G_TYPE_GROUP_I", "G_TYPE_GROUP_S", NULL, NULL, NULL }, 	\
   {   38,    8, "type_group *", "type_group *", "type_group *", "type_group", "ptr", NULL, 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "C_PTR-A", NULL, "type_group", "G_TYPE_GROUP_P_I", "G_TYPE_GROUP_P_S", NULL, NULL, NULL }, 	\
   {   39, sizeof(type_kind), "type_kind", "type_kind", "type_kind", "type_kind", "tknd", NULL, 1, TK_ENUM, KIND_ENUM, "TK_PRIMITIVE", "TK_META", "TK_PRIMITIVE", NULL, NULL, "type_kind", "G_TYPE_KIND_I", "G_TYPE_KIND_S", NULL, NULL, NULL }, 	\
   {   40,    8, "type_kind *", "type_kind *", "type_kind *", "type_kind", "ptr", NULL, 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "C_PTR-A", NULL, "type_kind", "G_TYPE_KIND_P_I", "G_TYPE_KIND_P_S", NULL, NULL, NULL }, 	\
   {   41, sizeof(type_desc), "type_desc", "type_desc", "type_desc", "type_desc", "tdes", NULL, 1, TK_STRUCT, KIND_STRUCT, NULL, NULL, "NULL", NULL, NULL, "type_desc", "G_TYPE_DESC_I", "G_TYPE_DESC_S", NULL, NULL, NULL }, 	\
   {   42,    8, "type_desc *", "type_desc *", "type_desc *", "type_desc", "ptr", NULL, 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "C_PTR-A", NULL, "type_desc", "G_TYPE_DESC_P_I", "G_TYPE_DESC_P_S", NULL, NULL, NULL }, 	\
   {   43, sizeof(int), "enum", "enum", "enum", "enum", "int", "int", 0, TK_PRIMITIVE, KIND_INT, "INT_MIN", "INT_MAX", "0", "integer", NULL, "int", "G_ENUM_I", "G_ENUM_S", NULL, NULL, NULL }, 	\
   {   44, sizeof(int), "pboolean", "pboolean", "pboolean", "pboolean", "int", "int", 1, TK_PRIMITIVE, KIND_INT, "INT_MIN", "INT_MAX", "0", "integer", NULL, "int", "G_PBOOLEAN_I", "G_PBOOLEAN_S", NULL, NULL, NULL }, 	\
   {   45, sizeof(int), "pboolean *", "pboolean *", "pboolean *", "pboolean", "int *", "int", 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "integer-A", NULL, "int", "G_PBOOLEAN_P_I", "G_PBOOLEAN_P_S", NULL, NULL, NULL }, 	\
   {   46, sizeof(long), "ssize_t", "ssize_t", "ssize_t", "ssize_t", "long", "long", 1, TK_PRIMITIVE, KIND_INT, "LONG_MIN", "LONG_MAX", "0L", "integer(8)", NULL, "long", "G_SSIZE_I", "G_SSIZE_S", NULL, NULL, NULL }, 	\
   {   47, sizeof(long), "ssize_t *", "ssize_t *", "ssize_t *", "ssize_t", "long *", "long", 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "integer(8)-A", NULL, "long", "G_SSIZE_P_I", "G_SSIZE_P_S", NULL, NULL, NULL }, 	\
   {   48, sizeof(int), "integer", "integer", "integer", "integer", "int", "int", 1, TK_PRIMITIVE, KIND_INT, "INT_MIN", "INT_MAX", "0", "integer", NULL, "int", "G_INTEGER_I", "G_INTEGER_S", NULL, NULL, NULL }, 	\
   {   49, sizeof(int), "integer *", "integer *", "integer *", "integer", "int *", "int", 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "integer-A", NULL, "int", "G_INTEGER_P_I", "G_INTEGER_P_S", NULL, NULL, NULL }, 	\
   {   50, sizeof(short), "int16_t", "int16_t", "int16_t", "int16_t", "short", "short", 1, TK_PRIMITIVE, KIND_INT, "SHRT_MIN", "SHRT_MAX", "0", "integer(2)", "int", "short", "G_INT16_I", "G_INT16_S", NULL, NULL, NULL }, 	\
   {   51, sizeof(short), "int16_t *", "int16_t *", "int16_t *", "int16_t", "short *", "short", 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "integer(2)-A", "int", "short", "G_INT16_P_I", "G_INT16_P_S", NULL, NULL, NULL }, 	\
   {   52, sizeof(int), "int32_t", "int32_t", "int32_t", "int32_t", "int", "int", 1, TK_PRIMITIVE, KIND_INT, "INT_MIN", "INT_MAX", "0", "integer", NULL, "int", "G_INT32_I", "G_INT32_S", NULL, NULL, NULL }, 	\
   {   53, sizeof(int), "int32_t *", "int32_t *", "int32_t *", "int32_t", "int *", "int", 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "integer-A", NULL, "int", "G_INT32_P_I", "G_INT32_P_S", NULL, NULL, NULL }, 	\
   {   54, sizeof(long long), "int64_t", "int64_t", "int64_t", "int64_t", "long_long", "long long", 1, TK_PRIMITIVE, KIND_INT, "LLONG_MIN", "LLONG_MAX", "0LL", "integer(8)", NULL, "long long", "G_INT64_I", "G_INT64_S", NULL, NULL, NULL }, 	\
   {   55, sizeof(long long), "int64_t *", "int64_t *", "int64_t *", "int64_t", "long_long *", "long long", 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "integer(8)-A", NULL, "long long", "G_INT64_P_I", "G_INT64_P_S", NULL, NULL, NULL }, 	\
   {   56, sizeof(double), "REAL", "REAL", "REAL", "real", "double", "double", 1, TK_PRIMITIVE, KIND_FLOAT, "-DBL_MAX", "DBL_MAX", "0.0", "real(8)", NULL, "double", "G_REAL_I", "G_REAL_S", NULL, NULL, NULL }, 	\
   {   57, sizeof(double), "REAL *", "REAL *", "REAL *", "real", "double *", "double", 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "real(8)-A", NULL, "double", "G_REAL_P_I", "G_REAL_P_S", NULL, NULL, NULL }, 	\
   {   58, sizeof(float), "float32_t", "float32_t", "float32_t", "float32_t", "float", "float", 1, TK_PRIMITIVE, KIND_FLOAT, "-FLT_MAX", "FLT_MAX", "0.0", "real(4)", "double", "float", "G_FLOAT32_I", "G_FLOAT32_S", NULL, NULL, NULL }, 	\
   {   59, sizeof(float), "float32_t *", "float32_t *", "float32_t *", "float32_t", "float *", "float", 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "real(4)-A", "double", "float", "G_FLOAT32_P_I", "G_FLOAT32_P_S", NULL, NULL, NULL }, 	\
   {   60, sizeof(double), "float64_t", "float64_t", "float64_t", "float64_t", "double", "double", 1, TK_PRIMITIVE, KIND_FLOAT, "-DBL_MAX", "DBL_MAX", "0.0", "real(8)", NULL, "double", "G_FLOAT64_I", "G_FLOAT64_S", NULL, NULL, NULL }, 	\
   {   61, sizeof(double), "float64_t *", "float64_t *", "float64_t *", "float64_t", "double *", "double", 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "real(8)-A", NULL, "double", "G_FLOAT64_P_I", "G_FLOAT64_P_S", NULL, NULL, NULL }, 	\
   {   62, sizeof(long double), "float128_t", "float128_t", "float128_t", "float128_t", "long_double", "long double", 1, TK_PRIMITIVE, KIND_FLOAT, "-LDBL_MAX", "LDBL_MAX", "0.0", "real(16)", NULL, "long double", "G_FLOAT128_I", "G_FLOAT128_S", NULL, NULL, NULL }, 	\
   {   63, sizeof(long double), "float128_t *", "float128_t *", "float128_t *", "float128_t", "long_double *", "long double", 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "real(16)-A", NULL, "long double", "G_FLOAT128_P_I", "G_FLOAT128_P_S", NULL, NULL, NULL }, 	\
   {   64, sizeof(float _Complex), "complex32_t", "complex32_t", "complex32_t", "complex32_t", "float_complex", "float _Complex", 1, TK_PRIMITIVE, KIND_COMPLEX, "-FLT_MAX", "FLT_MAX", "0.0", "complex(4)", NULL, "float", "G_COMPLEX32_I", "G_COMPLEX32_S", NULL, NULL, NULL }, 	\
   {   65, sizeof(float _Complex), "complex32_t *", "complex32_t *", "complex32_t *", "complex32_t", "float_complex *", "float _Complex", 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "complex(4)-A", NULL, "float", "G_COMPLEX32_P_I", "G_COMPLEX32_P_S", NULL, NULL, NULL }, 	\
   {   66, sizeof(double _Complex), "complex64_t", "complex64_t", "complex64_t", "complex64_t", "double_complex", "double _Complex", 1, TK_PRIMITIVE, KIND_COMPLEX, "-DBL_MAX", "DBL_MAX", "0.0", "complex(8)", NULL, "double", "G_COMPLEX64_I", "G_COMPLEX64_S", NULL, NULL, NULL }, 	\
   {   67, sizeof(double _Complex), "complex64_t *", "complex64_t *", "complex64_t *", "complex64_t", "double_complex *", "double _Complex", 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "complex(8)-A", NULL, "double", "G_COMPLEX64_P_I", "G_COMPLEX64_P_S", NULL, NULL, NULL }, 	\
   {   68, sizeof(long double _Complex), "complex128_t", "complex128_t", "complex128_t", "complex128_t", "long_double_complex", "long double _Complex", 1, TK_PRIMITIVE, KIND_COMPLEX, "-LDBL_MAX", "LDBL_MAX", "0.0", "complex(16)", NULL, "long double", "G_COMPLEX128_I", "G_COMPLEX128_S", NULL, NULL, NULL }, 	\
   {   69, sizeof(long double _Complex), "complex128_t *", "complex128_t *", "complex128_t *", "complex128_t", "long_double_complex *", "long double _Complex", 0, TK_PRIMITIVE, KIND_POINTER, NULL, NULL, "NULL", "complex(16)-A", NULL, "long double", "G_COMPLEX128_P_I", "G_COMPLEX128_P_S", NULL, NULL, NULL }, 	\
   { -1, -1, NULL, NULL, NULL, NULL, NULL, NULL, 0, TK_META, KIND_OTHER, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL } 	\
   }

#define G_UNKNOWN_I		SC_gs.stl[0].id
#define G_UNKNOWN_S		SC_gs.stl[0].type
#define G_BIT_I		SC_gs.stl[1].id
#define G_BIT_S		SC_gs.stl[1].type
#define G_STRUCT_I		SC_gs.stl[2].id
#define G_STRUCT_S		SC_gs.stl[2].type
#define G_VOID_I		SC_gs.stl[3].id
#define G_VOID_S		SC_gs.stl[3].type
#define G_POINTER_I		SC_gs.stl[4].id
#define G_POINTER_S		SC_gs.stl[4].type
#define G_BOOL_I		SC_gs.stl[5].id
#define G_BOOL_S		SC_gs.stl[5].type
#define G_BOOL_P_I		SC_gs.stl[6].id
#define G_BOOL_P_S		SC_gs.stl[6].type
#define G_CHAR_I		SC_gs.stl[7].id
#define G_CHAR_S		SC_gs.stl[7].type
#define G_STRING_I		SC_gs.stl[8].id
#define G_STRING_S		SC_gs.stl[8].type
#define G_WCHAR_I		SC_gs.stl[9].id
#define G_WCHAR_S		SC_gs.stl[9].type
#define G_WCHAR_P_I		SC_gs.stl[10].id
#define G_WCHAR_P_S		SC_gs.stl[10].type
#define G_INT8_I		SC_gs.stl[11].id
#define G_INT8_S		SC_gs.stl[11].type
#define G_INT8_P_I		SC_gs.stl[12].id
#define G_INT8_P_S		SC_gs.stl[12].type
#define G_SHORT_I		SC_gs.stl[13].id
#define G_SHORT_S		SC_gs.stl[13].type
#define G_SHORT_P_I		SC_gs.stl[14].id
#define G_SHORT_P_S		SC_gs.stl[14].type
#define G_INT_I		SC_gs.stl[15].id
#define G_INT_S		SC_gs.stl[15].type
#define G_INT_P_I		SC_gs.stl[16].id
#define G_INT_P_S		SC_gs.stl[16].type
#define G_LONG_I		SC_gs.stl[17].id
#define G_LONG_S		SC_gs.stl[17].type
#define G_LONG_P_I		SC_gs.stl[18].id
#define G_LONG_P_S		SC_gs.stl[18].type
#define G_LONG_LONG_I		SC_gs.stl[19].id
#define G_LONG_LONG_S		SC_gs.stl[19].type
#define G_LONG_LONG_P_I		SC_gs.stl[20].id
#define G_LONG_LONG_P_S		SC_gs.stl[20].type
#define G_FLOAT_I		SC_gs.stl[21].id
#define G_FLOAT_S		SC_gs.stl[21].type
#define G_FLOAT_P_I		SC_gs.stl[22].id
#define G_FLOAT_P_S		SC_gs.stl[22].type
#define G_DOUBLE_I		SC_gs.stl[23].id
#define G_DOUBLE_S		SC_gs.stl[23].type
#define G_DOUBLE_P_I		SC_gs.stl[24].id
#define G_DOUBLE_P_S		SC_gs.stl[24].type
#define G_LONG_DOUBLE_I		SC_gs.stl[25].id
#define G_LONG_DOUBLE_S		SC_gs.stl[25].type
#define G_LONG_DOUBLE_P_I		SC_gs.stl[26].id
#define G_LONG_DOUBLE_P_S		SC_gs.stl[26].type
#define G_FLOAT_COMPLEX_I		SC_gs.stl[27].id
#define G_FLOAT_COMPLEX_S		SC_gs.stl[27].type
#define G_FLOAT_COMPLEX_P_I		SC_gs.stl[28].id
#define G_FLOAT_COMPLEX_P_S		SC_gs.stl[28].type
#define G_DOUBLE_COMPLEX_I		SC_gs.stl[29].id
#define G_DOUBLE_COMPLEX_S		SC_gs.stl[29].type
#define G_DOUBLE_COMPLEX_P_I		SC_gs.stl[30].id
#define G_DOUBLE_COMPLEX_P_S		SC_gs.stl[30].type
#define G_LONG_DOUBLE_COMPLEX_I		SC_gs.stl[31].id
#define G_LONG_DOUBLE_COMPLEX_S		SC_gs.stl[31].type
#define G_LONG_DOUBLE_COMPLEX_P_I		SC_gs.stl[32].id
#define G_LONG_DOUBLE_COMPLEX_P_S		SC_gs.stl[32].type
#define G_QUATERNION_I		SC_gs.stl[33].id
#define G_QUATERNION_S		SC_gs.stl[33].type
#define G_QUATERNION_P_I		SC_gs.stl[34].id
#define G_QUATERNION_P_S		SC_gs.stl[34].type
#define G_FILE_I		SC_gs.stl[35].id
#define G_FILE_S		SC_gs.stl[35].type
#define G_FILE_P_I		SC_gs.stl[36].id
#define G_FILE_P_S		SC_gs.stl[36].type
#define G_TYPE_GROUP_I		SC_gs.stl[37].id
#define G_TYPE_GROUP_S		SC_gs.stl[37].type
#define G_TYPE_GROUP_P_I		SC_gs.stl[38].id
#define G_TYPE_GROUP_P_S		SC_gs.stl[38].type
#define G_TYPE_KIND_I		SC_gs.stl[39].id
#define G_TYPE_KIND_S		SC_gs.stl[39].type
#define G_TYPE_KIND_P_I		SC_gs.stl[40].id
#define G_TYPE_KIND_P_S		SC_gs.stl[40].type
#define G_TYPE_DESC_I		SC_gs.stl[41].id
#define G_TYPE_DESC_S		SC_gs.stl[41].type
#define G_TYPE_DESC_P_I		SC_gs.stl[42].id
#define G_TYPE_DESC_P_S		SC_gs.stl[42].type
#define G_ENUM_I		SC_gs.stl[43].id
#define G_ENUM_S		SC_gs.stl[43].type
#define G_PBOOLEAN_I		SC_gs.stl[44].id
#define G_PBOOLEAN_S		SC_gs.stl[44].type
#define G_PBOOLEAN_P_I		SC_gs.stl[45].id
#define G_PBOOLEAN_P_S		SC_gs.stl[45].type
#define G_SSIZE_I		SC_gs.stl[46].id
#define G_SSIZE_S		SC_gs.stl[46].type
#define G_SSIZE_P_I		SC_gs.stl[47].id
#define G_SSIZE_P_S		SC_gs.stl[47].type
#define G_INTEGER_I		SC_gs.stl[48].id
#define G_INTEGER_S		SC_gs.stl[48].type
#define G_INTEGER_P_I		SC_gs.stl[49].id
#define G_INTEGER_P_S		SC_gs.stl[49].type
#define G_INT16_I		SC_gs.stl[50].id
#define G_INT16_S		SC_gs.stl[50].type
#define G_INT16_P_I		SC_gs.stl[51].id
#define G_INT16_P_S		SC_gs.stl[51].type
#define G_INT32_I		SC_gs.stl[52].id
#define G_INT32_S		SC_gs.stl[52].type
#define G_INT32_P_I		SC_gs.stl[53].id
#define G_INT32_P_S		SC_gs.stl[53].type
#define G_INT64_I		SC_gs.stl[54].id
#define G_INT64_S		SC_gs.stl[54].type
#define G_INT64_P_I		SC_gs.stl[55].id
#define G_INT64_P_S		SC_gs.stl[55].type
#define G_REAL_I		SC_gs.stl[56].id
#define G_REAL_S		SC_gs.stl[56].type
#define G_REAL_P_I		SC_gs.stl[57].id
#define G_REAL_P_S		SC_gs.stl[57].type
#define G_FLOAT32_I		SC_gs.stl[58].id
#define G_FLOAT32_S		SC_gs.stl[58].type
#define G_FLOAT32_P_I		SC_gs.stl[59].id
#define G_FLOAT32_P_S		SC_gs.stl[59].type
#define G_FLOAT64_I		SC_gs.stl[60].id
#define G_FLOAT64_S		SC_gs.stl[60].type
#define G_FLOAT64_P_I		SC_gs.stl[61].id
#define G_FLOAT64_P_S		SC_gs.stl[61].type
#define G_FLOAT128_I		SC_gs.stl[62].id
#define G_FLOAT128_S		SC_gs.stl[62].type
#define G_FLOAT128_P_I		SC_gs.stl[63].id
#define G_FLOAT128_P_S		SC_gs.stl[63].type
#define G_COMPLEX32_I		SC_gs.stl[64].id
#define G_COMPLEX32_S		SC_gs.stl[64].type
#define G_COMPLEX32_P_I		SC_gs.stl[65].id
#define G_COMPLEX32_P_S		SC_gs.stl[65].type
#define G_COMPLEX64_I		SC_gs.stl[66].id
#define G_COMPLEX64_S		SC_gs.stl[66].type
#define G_COMPLEX64_P_I		SC_gs.stl[67].id
#define G_COMPLEX64_P_S		SC_gs.stl[67].type
#define G_COMPLEX128_I		SC_gs.stl[68].id
#define G_COMPLEX128_S		SC_gs.stl[68].type
#define G_COMPLEX128_P_I		SC_gs.stl[69].id
#define G_COMPLEX128_P_S		SC_gs.stl[69].type

DEF_FUNCTION_PTR(void, Void);
DEF_FUNCTION_PTR(void *, PVoid);
DEF_FUNCTION_PTR(bool, Bool);
DEF_FUNCTION_PTR(bool *, PBool);
DEF_FUNCTION_PTR(char, Char);
DEF_FUNCTION_PTR(char *, PChar);
DEF_FUNCTION_PTR(wchar_t, Wchar);
DEF_FUNCTION_PTR(wchar_t *, PWchar);
DEF_FUNCTION_PTR(int8_t, Int8);
DEF_FUNCTION_PTR(int8_t *, PInt8);
DEF_FUNCTION_PTR(short, Short);
DEF_FUNCTION_PTR(short *, PShort);
DEF_FUNCTION_PTR(int, Int);
DEF_FUNCTION_PTR(int *, PInt);
DEF_FUNCTION_PTR(long, Long);
DEF_FUNCTION_PTR(long *, PLong);
DEF_FUNCTION_PTR(long long, LongLong);
DEF_FUNCTION_PTR(long long *, PLongLong);
DEF_FUNCTION_PTR(float, Float);
DEF_FUNCTION_PTR(float *, PFloat);
DEF_FUNCTION_PTR(double, Double);
DEF_FUNCTION_PTR(double *, PDouble);
DEF_FUNCTION_PTR(long double, LongDouble);
DEF_FUNCTION_PTR(long double *, PLongDouble);
#ifndef __cplusplus
DEF_FUNCTION_PTR(float _Complex, FloatComplex);
DEF_FUNCTION_PTR(float _Complex *, PFloatComplex);
DEF_FUNCTION_PTR(double _Complex, DoubleComplex);
DEF_FUNCTION_PTR(double _Complex *, PDoubleComplex);
DEF_FUNCTION_PTR(long double _Complex, LongDoubleComplex);
DEF_FUNCTION_PTR(long double _Complex *, PLongDoubleComplex);
#endif
DEF_FUNCTION_PTR(quaternion, Quaternion);
DEF_FUNCTION_PTR(quaternion *, PQuaternion);
DEF_FUNCTION_PTR(FILE, FILE);
DEF_FUNCTION_PTR(FILE *, PFILE);
DEF_FUNCTION_PTR(type_group, TypeGroup);
DEF_FUNCTION_PTR(type_group *, PTypeGroup);
DEF_FUNCTION_PTR(type_kind, TypeKind);
DEF_FUNCTION_PTR(type_kind *, PTypeKind);
DEF_FUNCTION_PTR(type_desc, TypeDesc);
DEF_FUNCTION_PTR(type_desc *, PTypeDesc);

#ifndef NO_VA_ARG_ID
#ifdef HAVE_COMPLEX_VA_ARG
#define SC_VA_ARG_ID(_id, _d, _n)                    \
   {int _lid;                                        \
    if (_id == G_STRING_I)                           \
       _lid = _id;                                   \
    else if (SC_is_type_ptr(_id) == TRUE)            \
       _lid = G_POINTER_I;                           \
    else                                             \
       _lid = _id;                                   \
    switch (_lid) {                                  \
       case 4:   		\
            {void * *_pv = (void * *) (_d);   		\
             _pv[_n] = va_arg(__a__, void *);};   		\
            break;    		\
       case 5:   		\
            {bool *_pv = (bool *) (_d);   		\
             _pv[_n] = va_arg(__a__, int);};   		\
            break;    		\
       case 7:   		\
            {char *_pv = (char *) (_d);   		\
             _pv[_n] = va_arg(__a__, int);};   		\
            break;    		\
       case 8:   		\
            {char * *_pv = (char * *) (_d);   		\
             _pv[_n] = va_arg(__a__, char *);};   		\
            break;    		\
       case 9:   		\
            {wchar_t *_pv = (wchar_t *) (_d);   		\
             _pv[_n] = va_arg(__a__, int);};   		\
            break;    		\
       case 11:   		\
            {int8_t *_pv = (int8_t *) (_d);   		\
             _pv[_n] = va_arg(__a__, int);};   		\
            break;    		\
       case 13:   		\
            {short *_pv = (short *) (_d);   		\
             _pv[_n] = va_arg(__a__, int);};   		\
            break;    		\
       case 15:   		\
            {int *_pv = (int *) (_d);   		\
             _pv[_n] = va_arg(__a__, int);};   		\
            break;    		\
       case 17:   		\
            {long *_pv = (long *) (_d);   		\
             _pv[_n] = va_arg(__a__, long);};   		\
            break;    		\
       case 19:   		\
            {long long *_pv = (long long *) (_d);   		\
             _pv[_n] = va_arg(__a__, long long);};   		\
            break;    		\
       case 21:   		\
            {float *_pv = (float *) (_d);   		\
             _pv[_n] = va_arg(__a__, double);};   		\
            break;    		\
       case 23:   		\
            {double *_pv = (double *) (_d);   		\
             _pv[_n] = va_arg(__a__, double);};   		\
            break;    		\
       case 25:   		\
            {long double *_pv = (long double *) (_d);   		\
             _pv[_n] = va_arg(__a__, long double);};   		\
            break;    		\
       case 27:   		\
            {float _Complex *_pv = (float _Complex *) (_d);   		\
             _pv[_n] = va_arg(__a__, float _Complex);};   		\
            break;    		\
       case 29:   		\
            {double _Complex *_pv = (double _Complex *) (_d);   		\
             _pv[_n] = va_arg(__a__, double _Complex);};   		\
            break;    		\
       case 31:   		\
            {long double _Complex *_pv = (long double _Complex *) (_d);   		\
             _pv[_n] = va_arg(__a__, long double _Complex);};   		\
            break;    		\
       case 33:   		\
            {quaternion *_pv = (quaternion *) (_d);   		\
             _pv[_n] = va_arg(__a__, quaternion);};   		\
            break;    		\
       case 37:   		\
            {type_group *_pv = (type_group *) (_d);   		\
             _pv[_n] = va_arg(__a__, type_group);};   		\
            break;    		\
       case 39:   		\
            {type_kind *_pv = (type_kind *) (_d);   		\
             _pv[_n] = va_arg(__a__, type_kind);};   		\
            break;    		\
       }                                             \
   }
#else
#define SC_VA_ARG_ID(_id, _d, _n)                    \
   {int _lid;                                        \
    if (_id == G_STRING_I)                           \
       _lid = _id;                                   \
    else if (SC_is_type_ptr(_id) == TRUE)            \
       _lid = G_POINTER_I;                           \
    else                                             \
       _lid = _id;                                   \
    switch (_lid) {                                  \
       case 4:   		\
            {void * *_pv = (void * *) (_d);   		\
             _pv[_n] = va_arg(__a__, void *);};   		\
            break;    		\
       case 5:   		\
            {bool *_pv = (bool *) (_d);   		\
             _pv[_n] = va_arg(__a__, int);};   		\
            break;    		\
       case 7:   		\
            {char *_pv = (char *) (_d);   		\
             _pv[_n] = va_arg(__a__, int);};   		\
            break;    		\
       case 8:   		\
            {char * *_pv = (char * *) (_d);   		\
             _pv[_n] = va_arg(__a__, char *);};   		\
            break;    		\
       case 9:   		\
            {wchar_t *_pv = (wchar_t *) (_d);   		\
             _pv[_n] = va_arg(__a__, int);};   		\
            break;    		\
       case 11:   		\
            {int8_t *_pv = (int8_t *) (_d);   		\
             _pv[_n] = va_arg(__a__, int);};   		\
            break;    		\
       case 13:   		\
            {short *_pv = (short *) (_d);   		\
             _pv[_n] = va_arg(__a__, int);};   		\
            break;    		\
       case 15:   		\
            {int *_pv = (int *) (_d);   		\
             _pv[_n] = va_arg(__a__, int);};   		\
            break;    		\
       case 17:   		\
            {long *_pv = (long *) (_d);   		\
             _pv[_n] = va_arg(__a__, long);};   		\
            break;    		\
       case 19:   		\
            {long long *_pv = (long long *) (_d);   		\
             _pv[_n] = va_arg(__a__, long long);};   		\
            break;    		\
       case 21:   		\
            {float *_pv = (float *) (_d);   		\
             _pv[_n] = va_arg(__a__, double);};   		\
            break;    		\
       case 23:   		\
            {double *_pv = (double *) (_d);   		\
             _pv[_n] = va_arg(__a__, double);};   		\
            break;    		\
       case 25:   		\
            {long double *_pv = (long double *) (_d);   		\
             _pv[_n] = va_arg(__a__, long double);};   		\
            break;    		\
       case 33:   		\
            {quaternion *_pv = (quaternion *) (_d);   		\
             _pv[_n] = va_arg(__a__, quaternion);};   		\
            break;    		\
       case 37:   		\
            {type_group *_pv = (type_group *) (_d);   		\
             _pv[_n] = va_arg(__a__, type_group);};   		\
            break;    		\
       case 39:   		\
            {type_kind *_pv = (type_kind *) (_d);   		\
             _pv[_n] = va_arg(__a__, type_kind);};   		\
            break;    		\
       }                                             \
   }
#endif

#endif

typedef long (*PFConv)(void *d, long od, long ds, const void *s, long os, long ss, long n);

extern PFConv
 _SC_convf[][N_PRIMITIVES];

typedef char *(*PFStrv)(char *t, int nc, const void *s, long n, int mode);

extern PFStrv
 _SC_strf[];


#endif

