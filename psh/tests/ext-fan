#!/bin/csh -f
#
# EXT-FAN - test gexec fan in and fan out
#

unalias *

set t = fan

@ err = 0

source $TestScrDir/functions-pact.csh
alias ftee      'echo "Command: \!\!:2-$" >>& \!\!:1 ; \!\!:2-$ |& tee -ai \!\!:1'

set f = ( `fill-string -n 8 -c ' ' $t` )
NoteD $Log -n "                        $f "
Note $Log ""

set exe = $t
set opt = ( $argv )
set rpf = ""

set lt = `timer -r`

set logout = ( osrc -t out cat )
set logerr = ( osrc -t err cat )

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

#foreach i (1 2 3)
foreach i (1 2 3 4 5 6)

   Note $Log ""
   Note $Log "---------------------------------------------------"
   Note $Log ""

   set id  = n$i
   set res = ext-$id.res
   set raw = $res.raw
   set dif = $res.dif
   set ref = $RefDir/ext-$id

   switch ($i)

# fan in tests
      case 1:
           set cmd = ( gexec $opt /bin/echo "${id}a" @o3 /bin/echo "${id}b" @o3 sort '>&!' $res )
           set gst = "0 0 0"
           set srt = FALSE
           breaksw
      case 2:
           set cmd = ( gexec $opt /bin/echo "${id}a" @o2 sort @ /bin/echo "${id}b" @o2 '>&!' $res )
           set gst = "0 0 0"
           set srt = FALSE
           breaksw
      case 3:
           set cmd = ( gexec $opt sort @ /bin/echo "${id}a" @o1 /bin/echo "${id}b" @o1 '>&!' $res )
           set gst = "0 0 0"
           set srt = FALSE
           breaksw

# fan out tests
      case 4:
           set cmd = ( gexec $opt /bin/echo ${id} @ $logout @i1 $logerr @i1 '>&!' $res )
           set gst = "0 0 0"
           set srt = FALSE
           breaksw

      case 5:
           set cmd = ( gexec $opt $logout @i2 /bin/echo ${id} @ $logerr @i2 '>&!' $res )
           set gst = "0 0 0"
           set srt = FALSE
           breaksw

      case 6:
           set cmd = ( gexec $opt $logout @i3 $logerr @i3 /bin/echo ${id}'>&!' $res )
           set gst = "0 0 0"
           set srt = FALSE
           breaksw

   endsw

   Note $Log "cmd = $cmd"
   Note $Log "srt = $srt"

   if ("$Valgrind" == "") then
      flog $Log eval $cmd

      if ($srt == TRUE) then
         flog $Log ( sort $raw >&! $res )
         flog $Log rm -f $raw
      endif

      flog $Log cat $res
      if ($?PERDB_PATH == 0) then
         eval `grep "setenv gstatus" $res`
         grep -v "setenv gstatus" $res >&! $res.new
         flog $Log mv $res.new $res
      else
         dbget gstatus
      endif

      Note $Log "> gstatus = $gstatus"
      if ("$gstatus" != "$gst") then
         flog $Log @ err = $err + 1
         NoteD $Log -n "x"
         Note $Log "$id failed"
      else if (-f $ref) then
         flog $Log ( grep -v ']:' $res >&! $res.no )
         flog $Log ( diff $res.no $ref >&! $dif )
         if ($status == 0) then
            NoteD $Log -n "."
            Note $Log "$id passed"
            flog $Log rm -f $res $dif
         else
            flog $Log @ err = $err + 1
            NoteD $Log -n "o"
            Note $Log "$id differed"
            flog $Log cat $dif
         endif
         flog $Log rm -f $res.no
      else
         NoteD $Log -n "+"
         Note $Log "$id added"
         flog $Log cp $res $ref
         flog $Log rm -f $res
      endif

   else
      set cmd = ( `echo "$cmd" | sed 's+>.*$++'` )
      ftee $Log $Valgrind $cmd                |& \
      grep "ERROR SUMMARY:"                   |& \
      awk '{ print $4 }'   >&! $Tmp
      set xstatus = `cat $Tmp`
      @ err = $err + $xstatus
      if ($xstatus == 0) then
         NoteD $Log -n "."
      else
         NoteD $Log -n "x"
      endif
   endif

end

NoteD $Log -n " ................."

Note $Log "exiting with err = $err"
Note $Log ""

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

set xstatus = $err

set lt = `timer -b $lt`

set rpf = ( $rpf ext-$t )

$TEST_CHECK part -a gexec_${t} -e $xstatus -dt $lt -x $exe -l -rpf "$rpf" none

exit($status)
