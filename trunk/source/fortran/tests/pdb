#!/bin/csh -f
#
# PDB - Fortran test
#
# Source Version: 3.0
# Software Release #: LLNL-CODE-422942
#
# include "cpyright.h"
#

source ../../tests/common

set msg = "PDB API Test ....................... "

set tst = $1

# check for Fortran compiler before doing Fortran test
set FC = `awk '$1 == "FCompiler" { print $3 }' $IncDir/make-def`
if ("$FC" != "") then
   Note $LogF "Using fortran compiler $FC"
   flog $LogF swhich -1 $FC
   flog $LogF set xstatus = $status
else
   fog $LogF set xstatus = 1
endif

#if (($xstatus == 0) && ("$MPI" == "")) then
if ($xstatus == 0) then
   NoteD $LogF ""
   NoteD $LogF "                    $msg"

   flog $LogF pushd $SrcDir
   flog $LogF $MAKE +na 2 pdb
   set xstatus = $status
   flog $LogF popd

   if ($xstatus != 0) then
      NoteD $LogF ""
      NoteD $LogF "                         Cannot build PDB FORTRAN Test Program"
      flog $LogF rm -f $BinDir/pdftst
      flog $LogF rm -f $BinDir/pdfgts
      flog $LogF rm -f $BinDir/pdfhyts
   else

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# test hand written wrappers
      NoteD $LogF -n "                        manual ......................... "
      Note $LogF ""

      set exe = $BinDir/pdftst
      set rpf = none

      if ("$Valgrind" == "") then
         flog $LogF ( $CFE $exe -p |& cat )
         set xstatus = $status
      else
         Note $LogF ""
         ftee $LogF $Valgrind $exe           |& \
         grep "ERROR SUMMARY:"               |& \
         awk '{ print $4 }'   >&! $Tmp
         set xstatus = `cat $Tmp`
         set rpf     = ( $rpf $Tmp )
      endif

      $TEST_CHECK part -a pdb_manual -e $xstatus -x $exe -l -rpf "$rpf" none

      @ nerr = $nerr + $status

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# test automatically generated wrappers
      NoteD $LogF -n "                        auto ........................... "
      Note $LogF ""

      set exe = $BinDir/pdfgts
      set rpf = none

      if ("$Valgrind" == "") then
         flog $LogF ( $CFE $exe -p |& cat )
         set xstatus = $status
      else
         Note $LogF ""
         ftee $LogF $Valgrind $exe           |& \
         grep "ERROR SUMMARY:"               |& \
         awk '{ print $4 }'   >&! $Tmp
         set xstatus = `cat $Tmp`
         set rpf     = ( $rpf $Tmp )
      endif

      $TEST_CHECK part -a pdb_auto -e $xstatus -x $exe -l -rpf "$rpf" none

      @ nerr = $nerr + $status

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# hyperstride test
      NoteD $LogF -n "                        hyperstride .................... "
      Note $LogF ""

      set exe = $BinDir/pdfhyts
      set rpf = none

      if ("$Valgrind" == "") then
         flog $LogF $CFE $exe
         set xstatus = $status
      else
         Note $LogF ""
         ftee $LogF $Valgrind $exe            |& \
         grep "ERROR SUMMARY:"                |& \
         awk '{ print $4 }'   >&! $Tmp
         set xstatus = `cat $Tmp`
         set rpf     = ( $rpf $Tmp )
      endif

      $TEST_CHECK part -a pdb_hyper -e $xstatus -x $exe -l -rpf "$rpf" none

      @ nerr = $nerr + $status

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# distribute parallel test
      if ($MPI == HAVE_MPI) then
         flog $LogF pushd $SrcDir
         flog $LogF $MAKE +na 2 fdp
         set xstatus = $status
         flog $LogF popd

         set CFE = $BinDir/do-run

         NoteD $LogF -n "                        dp ............................. "
         Note $LogF ""

         set exe = $BinDir/pdfdpt
         set rpf = none

         if ("$Valgrind" == "") then
            flog $LogF $CFE -p 4 $exe
            set xstatus = $status
         else
            Note $LogF ""
            ftee $LogF $Valgrind $exe            |& \
            grep "ERROR SUMMARY:"                |& \
            awk '{ print $4 }'   >&! $Tmp
            set xstatus = `cat $Tmp`
            set rpf     = ( $rpf $Tmp )
         endif

         $TEST_CHECK part -a pdb_dp -e $xstatus -x $exe -l -rpf "$rpf" none

         @ nerr = $nerr + $status
      endif

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

endif

$TEST_CHECK part -a pdb -e $nerr "$msg"

exit($status)
