#!/bin/csh -f
#
# SHTEST - test SCHEME
#
# Source Version: 3.0
# Software Release #: LLNL-CODE-422942
#
# include "cpyright.h"
#

setenv Package scheme
setenv Test    ""
source ../scripts/test-env

set Tests = ""

while ($#argv > 0)
   switch ($1)
      case -h:
           echo "Usage: shtest [-h] [-vg] [<test>]*"
           echo "  h       this help message"
           echo "  vg      run tests under valgrind"
           echo "  <test>  one of: mem string numer"
           echo "                  proc shell"
           echo "                  csynt bsynt"
           echo ""
           exit(1)
      case -*:
           breaksw
      default:
           set Tests = ( $Tests $1 )
           breaksw
   endsw
   shift
end

cd $TestDir

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# omit tests - usually in difficult CROSS_COMPILE situation

if ($RUN_TESTS == FALSE) then
   NoteD $Log ""
   NoteD $Log "SCHEME TESTS ... omitted"

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# run the tests

else if (-e $BinDir/scheme) then

   NoteD $Log ""
   NoteD $Log "SCHEME TEST ..."

   rm -f $Log
   touch $Log

   Note $Log "cwd      = $cwd"
   Note $Log "path     = $path"  
   Note $Log "BuildDir = $BuildDir"
   Note $Log "RootDir  = $RootDir"
   Note $Log "BinDir   = $BinDir"
   Note $Log "TestDir  = $TestDir"
   Note $Log "FilesDir = $FilesDir"
   Note $Log "SCHEME   = $SCHEME"

   setenv Tmp $cwd/.tmp.$$
   if ("$Valgrind" != "") then
      setenv Valgrind  "$Valgrind --suppressions=$RootDir/score/tests/vg.suppress"
   endif

   flog $Log ../../../manager/pwhich pact
   flog $Log ../../../manager/pwhich cc

   if ("$Tests" == "") then
      set Tests = ""
#      set Tests = ( $Tests string numer proc shell csynt bsynt )
# GOTCHA: restore memory tests after hasharr conversion
      set Tests = ( $Tests mem string numer proc shell csynt bsynt )
   endif

   foreach i ($Tests)
      $SrcDir/tests/$i
      if ($status == 1) then
         set ERROR = TRUE
      endif
   end

   $TEST_CHECK clean -n SCHEME -e $ERROR -raf "$Tmp"

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

else
   NoteD $Log ""
   NoteD $Log "$BinDir/scheme does not exist"
endif

$TEST_CHECK fin -e $ERROR

exit($status)

