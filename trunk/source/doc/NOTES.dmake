#
# Source Version: 3.0
# Software Release #: LLNL-CODE-422942
#

We have had a system for building our code projects in an extremely
high performance fashion for several years now.  By extremely high
performance I mean that from a single set of sources on each of
the specified networks, we simultaneously build versions of the code
for each system type (each build being done in parallel).

The system, called do-net, is a set of C Shell scripts which ultimately
used the version of make provided on each computer system.  It exploits
features of the build system for the code project which is also composed
of shell scripts (or Perl, or Python, ...).  This system works very well
when the networks are relatively unloaded.  As the network/system load
increases we see the effects of lost data packets in the network to the
degree that the failure rate of builds goes to an unacceptable level,
rendering the system less useful than it was designed to be.

The problem then is to make the system highly fault tolerant.
With considerable study and investigation of the problem the following
issues emerged as problems to be solved:

  1) Lack of persistence in make
     For one reason or another a command under the control of make
     will fail.  Two important examples are: inability to get a
     compiler license; and temporary inability to access a header
     file.  What a human being does in this case is to retry the
     command.  Very often it works.  We are unaware of any make
     that has this kind of persistence.

     It is often insufficient to simply reissue the make command because
     a partial, corrupt result (e.g., an object file) may be left which
     fools the make dependency analysis into deciding that there
     is no work to be done.  Instead, we need make to retry each 
     command until it either succeeds or the number of retry attempts
     exceeds a user specified value.

  2) Buggy make utilities
     Make utilities have various bugs on different systems.  
     In the case of portable make utilities such as the GNU
     make utility, gmake, they can be corrupted by latent bugs in the
     operating system.  For example, on OSF where child processes
     do not always deliver a SIGCHLD to their parents when they
     exit, gmake sometimes fails and with a very ungracefully at that.

  3) Fault intolerance of scripts under high load
     We see many failures in shell scripts where the script runs
     some system level command to obtain a string for further
     processing and gets the empty string.  The most common failures
     involve the utilities dirname and uname.

  4) Long process chains of scripts more failure prone
     With scripts that invoke other scripts our builds develop
     long chains of processes.  Under high load where dropped
     packets occur, longer chains imply higher probability of
     failure.

  5) Difficulty managing hosts
     With distributed parallel builds we have to communicate
     with other hosts on the networks we use.  We use SSH for
     this purpose.  The difficulty is that there is a large
     gap between what we need in order to do a distributed
     build and what we can get from the standard system utilities.
     We need to know which hosts are up and which are down.
     We need to know which are heavily loaded and which are only
     lightly loaded.  We need this information quicky and reliably.
     Delays of seconds at a time to get this information and
     use it cannot be tolerated.

     Worse than the latency problem is that a host may not
     respond to a query and also not time out.  With scripts it
     is harder to manage this problem.  With a compiled program,
     the control of timeouts can reside in our own code.

     Technically this is a side issue but it is a significant
     burden which must be overcome, and the solution we have
     developed was designed to address this problem along with
     the rest.

  6) Facility to filter out junk messages
     Since we are doing many compilations on many hosts it
     is very important to avoid visual clutter that hides
     problems.  Chatty compilers are a nuisance.  We have used
     a script wrapped around make to filter out junk messages.
     This is often a source of difficulty.

  7) We were already wrapping make with the pact utility.
     This is really only an observation but it points out that
     our solution is more evolutionary than revolutionary.

Solution:

The solution to our problem is to jump in and turn our pact utility
into a full blown independent make.  By designing a feature set
to address the problems outlined above we hope to reduce the
set of problems, increase the fault tolerance, and have a utility
that we can modify and debug to handle the most minute issues.

NOTE: because there is a bootstrapping issue inherent in having
a PACT utility that needs PACT to be built in order to build itself,
we have two utilies: smake and dmake.  Smake is the old pact utility
which is a simple wrapper around the system make (hence the name
smake).  We use smake just long enough to build our full blown
utility called dmake and let it do the rest. Then pact is a link
to dmake.  This scheme provides maximum flexibility in the
specification of our pre-Make files and gives us options when
porting to new platforms (i.e. use smake until dmake is operational).
I will refer to this new make as pact or dmake interchangably.


Features:

The features built into dmake include:

  1) Persistence
     Attempts commands a specified number of times (3 by default).

  2) Parallel
     Using a facility (documented elsewhere) referred to as
     the host-server, the set of commands obtained from the
     dependency analysis are executed asynchronously on a
     set of nodes matching a specific system type.  This can be
     done efficiently at either fine or coarse granularity.  That
     is to say, you can dispatch individual compilations or whole
     subsystems with very low latency.

     A BARRIER specification is added so that groups of commands
     can be forced to finish before others are dispatched.

  3) Client/Server Model

     When dmake is run with the -async option it computes the number
     of servers it will need to execute the given commands.  It will
     then launch each server on a different host (supplied by the
     host-server).  Each server will be sent requests to run commands,
     it will run them, finally it will return the output and the exit
     status of each job to the dmake client session.  The servers
     persist until the client terminates them at the end of the session.

     The client and servers monitor commands that are run.  In an effort
     to avoid commands that hang or are lost by the system causing an
     entire session to fail, time limits are placed on them.  If a command
     does not complete within the alloted time it is killed and retried.
     There are several controls that determine the time limits for a command,
     but an important factor in determining how long to wait is how long
     other commands executed by the same server take.  So the client
     records how long each command takes to run and calculates an average
     for each server.

     For diagnostic, debugging, and system monitoring reasons the client
     keeps a log of all traffic with each server and each server keeps
     a log of all traffic with each job as well as the client.  The
     client also keeps a record (dubbed stats) of the load average,
     free memory, average job time to completion, NFS traffic, and job
     assignments for each server.

     A server process is invoked as 'dmake -srv'.  Note the -srv option
     is otherwise undocumented and should never be used.

  4) Host Management
     We have made the attempt to abstract out the use of hosts.
     A combination of hardware and OS is referred to as a system type.
     A configuration includes the specification of the system type and
     the compilers.  When building a configuration any host of the correct
     system type that mounts the file system where the sources are is as
     good as any other for doing the work.  Using a sub-system called the
     host server which maintains a list of hosts associated with a
     system type, we can build for a system type rather than building on
     a specific host.

     With this abstraction we can use the host server to supply hosts
     that are up and running to execute commands rather than making
     requests to specific hosts which might be down.  This model gives
     dmake a great deal of robustness while executing commands
     asynchronously.

  5) Library
     The functionality of dmake is bound in a set of SCORE library calls.
     Figuratively they are:

         state = SC_make_state()
         SC_make_def_var(s, state)
         SC_make_def_rule(s, state)
         SC_parse_makefile(fname, state)
         SC_parse_premake(fname, state)
         SC_analyze_dependencies(target, state)
         cmnds = SC_action_commands(state)
         SC_free_state(state)
         
         SC_exec_commands(..., cmnds, ...)
         SC_exec_async(..., cmnds, ...)

     This approach allows you to build make-like capabilities into
     your own application or to build a tailored make type utility.

  6) Recursion
     Simple recursions may be expanded in situ in order to reduce the
     number of processes used.  This is controlled by the -rcr option.

     For example, the following rule:

         install:
	      pact link
              pact incinstall

     would normally cause two commands to be issued: 'pact link' and
     'pact incinstall'.  With recursion the original session simply
     does the dependency analysis for each of the targets 'link' and
     'incinstall' and inserts any resulting commands into the command
     set in place of the pact invocation commands.

  7) No Default Rules
     Because dmake is used in situations with multiple configurations
     which can mean multiple compilers, the decision was made to require
     all rules to be explicitly stated in the pre-Make or Makefile.
     This reduces confusion since incomplete specifications of rules
     will not be propped up by built in, default rules.

  8) Just Two Default Variables
     Many make utilties define several default variables.  In dmake
     only two exist: SHELL and BARRIER.  The SHELL variable is closely
     tied to the SHELL environment variable in the canonical make way
     (or at least the usage is the same as that of gmake).

     The BARRIER variable is used in connection with asynchronous execution
     of commands (the -async option).  When the commands derived from
     the dependency analysis are executed asynchronously the ordering in
     time is by definition lost.  Sometimes however you may wish to ensure
     that one or more commands actually finishes before another bunch of
     commands is started. BARRIER is used to accomplish this.  Here is
     an example of the usage of BARRIER.  Suppose you have a makefile,
     mkfoo containing:

        build:
   		@(cd scripts ; pact incinstall)
		@(cd pgs     ; pact incinstall)
		@(cd sx      ; pact incinstall)
		@(cd panacea ; pact incinstall)
		@(cd scheme  ; pact incinstall)
		@(cd score   ; pact incinstall)
		@(cd pdb     ; pact incinstall)
		@(cd pml     ; pact incinstall)
		@(cd ppc     ; pact incinstall)
		@(cd ultra   ; pact incinstall)
		${BARRIER}
		@(cd scripts ; pact devlib)
		@(cd pgs     ; pact devlib)
		@(cd sx      ; pact devlib)
		@(cd panacea ; pact devlib)
		@(cd scheme  ; pact devlib)
		@(cd score   ; pact devlib)
		@(cd pdb     ; pact devlib)
		@(cd pml     ; pact devlib)
		@(cd ppc     ; pact devlib)
		@(cd ultra   ; pact devlib)

      Then doing the command:

         dmake -async 4 -f mkfoo build

      will result in all of the 'pact incinstall's being done
      before any of the 'pact devlib's are started.
  

  9) Input
     Input files for dmake are handled like most make utilities.  It has
     the familiar -f option.  If no file is specified via the -f option
     dmake will look first for a file called pre-Make.  Failing that
     it will look for a file called Makefile.

     The pre-Make file contains specific information about sources in
     a particular directory.  The remaining specifications come from 
     files automatically generated when PACT is configured.

 10) Redirection

     Commands in rules may have I/O redirection specifications which
     will be processed by dmake itself rather than being passed on to
     the shell.  Dmake uses the following grammar for redirection:

        <redirection> := [<left>]<out>[<right>]
        <left>        := <fd> | '&'
        <right>       := <filename> | <fd>
        <oper>        := <out>['&'] | <in>
        <out>         := '>' | '>!' | '>>'
        <in>          := '<'
        <fd>          := [digit]+

     The <fd> is an open file descriptor and defaults to 1, i.e stdout,
     if not explicitly supplied.

     The output type operators have the following distinctions:

         >  dst     create dst, error if it exists
         >! dst     create dst, truncate if it exists
         >> dst     append to dst, create if it does not exist

     NOTE: dmake behaves as if noclobber is set.  This means simple
     redirection to files that exist will fail!
     
     This grammar is a super set of the Bourne and CSH shell families.
     Here are the variations actually tested in the dmake test suite:

     Bourne Shell type superset:

         ls file1 file2 >   out
         ls file1 file2 1>  out
         ls file1 file2 >>  out
         ls file1 file2 1>> out
         ls file1 file2 2>  err
         ls file1 file2 2>> err
         ls file1 file2 1>  out 2>  err
         ls file1 file2 1>> out 2>> err
         ls file1 file2 >&  outb
         ls file1 file2 &>  outb
         ls file1 file2 >   outb 2>&1
         ls file1 file2 >>& outb
         ls file1 file2 &>> outb
         ls file1 file2 >>  outb 2>>&1

     CSH type superset:
         ls file1 file2 >   out
         ls file1 file2 >!  out
         ls file1 file2 >>  out
         ls file1 file2 >&  outb
         ls file1 file2 >&! outb
         ls file1 file2 >>& outb


 11) Command Options
     The set of command options for dmake is as compatible with gmake
     as possible.  The options are:

        -async issue commands asynchronously to <n> nodes
        -B     build Makefile from pre-Make
        -cmd   run command <cmd> in directories specified in <file>
               this must come last in the argument list
        -d     show all rules and variables
        -f     use <file> for all targets, rules, and variables
        -flt   use <file> for specifications to filter out unwanted output
        -h     this help message
        -i     continue on after errors
        -info  report configuration elements matching the argument
        +info  complete report of configuration variable matching the argument
        +l     report only exact matches of the argument
        -n     only print commands, do not execute them
        -na    attempt each command <n> times before failing
        -rcr   expand simple recursive invocations in place
        -s     do not print commands before executing them
        -sys   directory in which to put/find Makefile
        -v     report the PACT version
        -vrb   print all commands before executing them (overrides '@')

 12) Environment Variables
     In addition to the command line arguments there are environment
     variables which can be used to control how dmake works in
     asynchronous mode.

        SC_EXEC_CPU_FACTOR
           Controls how many jobs can be issued to a node.  It is based
           on the number of CPUs on the node.  A value of 1 means as many
           tasks can be issued as CPUs, 2 means 1/2 as many tasks as CPUs, and
           so on.  If a negative value is supplied it works as a multiplier.
           A value of -2 means twice as many tasks as CPUs can be issued,
           a value of -4 means four times as many, and so on.  The default is 4.

        SC_EXEC_SERVER_WAIT
           An absolute number of wall clock seconds that a server will
           wait for a command to run on behalf of the client before
           exiting.  Default is 300.

        SC_EXEC_TIME_LIMIT
           An absolute number of wall clock seconds that a command can
           take before being killed and retried. Default is about a year.

        SC_EXEC_TIME_FACTOR
           A limit on how long a command can run before being killed and
           retried is formed by multiplying the average time it takes
           any command that has been done already by this factor.  The
           default is 80.

        SC_EXEC_TIME_THRESHOLD
           A upper limit on how long a command can run before it becomes
           subject to being killed and retried.  The default is 10 seconds.

        SC_EXEC_OPEN_RETRY
           Because of system load or NFS problems files for redirection
           may fail to open.  Under special circumstances the open will
           be retried after the number of milliseconds specified by this
           variable.  The default time is 100 milliseconds.

        SC_EXEC_TIME_LOST
           The client will assume that contact has been lost with a server
           after this many seconds and initiate a restart of the connection
           (possibly to a new host).

 13) Output Filtering
     With dmake one can have unwanted output removed via user supplied
     files specifying messages to be filtered out.  In the following
     example:

       0    Clock skew detected
       0    has modification time in the future
       1    Info:

     The number in the beginning of the line indicates which field in
     a line of output to use for the purpose of finding a match. A 0
     means to use the entire line.  If a line of output matches one of
     the specifications, it is not printed to stdout.

 14) Command Mapping
     The -cmd option of dmake allows you to conveniently have the command
     specified be executed in each directory listed in the file argument
     of the -cmd option.  For example,

        dmake -cmd dirlist pact incinstall

     would run the command 'pact incinstall' in each directory mentioned
     in the file dirlist.

 15) Diagnostics
     There are two command line options: -d and -vrb.
     The -d option causes all the rules and variables to be printed out.
     The -vrb option reports dependency matches and the rules which are
     invoked.

     A dmake server process responds to the following signals:
        SIGINT    - silently ends
        SIGUSR1   - sends its logs to the client and continues
        SIGTERM   - sends its logs to the client and ends
        trappable - treats as error and tries to restart upto specified
                    number of attempts

     A dmake client process responds to the following signals:
        SIGINT    - silently ends
        SIGUSR1   - shows the logs for all servers and continues
        SIGUSR2   - shows the stats for all servers and continues
        trappable - ends

     In addition, by typing <Esc>C and a return at a running dmake
     session, it will go into an interactive query mode.  You can
     type 'help' at the prompt to get a summary of the options available.

 16) Getting Information about a PACT Configuration
     The -info, +info, and +l options are supplied so that dmake can be
     used to obtain PACT configuration information.  The kind of information
     ranges from which compilers, to compiler options, graphics packages,
     include and load paths, and #defines.  This allows one to get such
     information without having to know where it is located in the PACT
     sources or directories.


Usage:

    pact [-async <n>] [-B] [-cmd <file> <cmd>] [-d] [-f <file>]
         [-flt <file>] [-h] [-i] [-info <pttrn> | <var>] [+info <var>]
         [+l] [-n] [-na <n>] [-rcr] [-s] [-sys <dir>] [-v]
         <make-args> <target>

    Options:
        -async issue commands asynchronously to <n> nodes
        -B     build Makefile from pre-Make
        -cmd   run command <cmd> in directories specified in <file>
               this must come last in the argument list
        -d     show all rules and variables
        -f     use <file> for all targets, rules, and variables
        -flt   use <file> for specifications to filter out unwanted output
        -h     this help message
        -i     continue on after errors
        -info  report configuration elements matching the argument
        +info  complete report of configuration variable matching the argument
        +l     report only exact matches of the argument
        -n     only print commands, do not execute them
        -na    attempt each command <n> times before failing
        -rcr   expand simple recursive invocations in place
        -s     do not print commands before executing them
        -sys   directory in which to put/find Makefile
        -v     report the PACT version
        -vrb   print all commands before executing them (overrides '@')


Examples:

    pact -info make
    pact -f <file> -async 9 build
    pact -rcr install
    pact -cmd <file> pact -i clean
