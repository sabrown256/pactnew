#!/bin/csh -f
#
# DO-BATCH.LONER - run a batch job on a SYS_SITE = LONER site host
#                - really just a dispatcher
#
# include "cpyright.h"
#

unalias *

set HostOS  = `uname -s`
set HostHW  = `uname -m`

set Host     = `hostname`
set Prob     = unknown
set NNodes   = 1
set NThreads = 1
set NCpus    = 1
set TimeMax  = 10
set Notify   = "n"
set Date     = `date`
set TTY      = ""
set Quiet    = FALSE
set Literal  = FALSE
set Info     = ""

# use environment variable so that do-run can set this if needed
if ($?Wrap == 0) then
   setenv Wrap  ""
endif

alias Note 'echo \!\!:2-$ >>& \!\!:^'

set Cmnd   = ""
set EnvVar = ""
while ($#argv > 0)
   switch ($1)
      case -b:
           shift
           breaksw
      case -dt:
           shift
           set TimeMax = $1
           breaksw
      case -e:
           shift
           set EnvVar = ( $EnvVar $1 )
           set EnvVar = ( $EnvVar $2 )
           shift
           breaksw
      case -f:
           shift
           set Info = $1
           breaksw
      case -h:
           echo ""
           echo "Usage: do-batch [-b <bank>] [-dt #] [-e <var> <value>] [-f <file>] [-h]"
           echo "                [-H <host>] [-l] [-m] [-n #] [-o <file>] [-p #]"
           echo "                [-q] [-t #] [-w]"
           echo ""
           echo "Options:"
           echo "     b  - which bank to use (ignored)"
           echo "     dt - time limit in seconds"
           echo "     e  - add environment variables to the batch script"
           echo "     f  - file containing batch control specifications"
           echo "     h  - this help message"
           echo "     H  - host on which to run"
           echo "     l  - run literal command (needed by debuggers)"
           echo "     m  - notify by mail"
           echo "     n  - number of nodes to use"
           echo "     o  - set the name of the output file"
           echo "     p  - number of processes to use"
           echo "     q  - suppress do-batch messages in the logs"
           echo "     t  - number of threads"
           echo "     w  - notify via the write utiliy"
           echo ""
           exit(1)
           breaksw
      case -H:
           shift
           set Host = $1
           breaksw
      case -l:
           set Literal = TRUE
           breaksw
      case -m:
           set Notify = "m"
           breaksw
      case -n:
           shift
           set NNodes = $1
           breaksw
      case -o:
           shift
           set TTY = $1
           breaksw
      case -p:
           shift
           set NCpus = $1
           breaksw
      case -q:
           set Quiet = TRUE
           breaksw
      case -t:
           shift
           set NThreads = $1
           breaksw
      case -w:
           set Notify = "w"
           breaksw
      default:
           set Prob = $1
           set Prob = $Prob:t
           while ($#argv > 0)
              set Cmnd = ( $Cmnd $1 )
              shift
           end

           break
           breaksw
   endsw
   shift
end

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# PROCESS_INFO_FILE

# Batch info file may contain any of the following:
#   host = <host>
#   time = <time>
# Note: time is in seconds

if ($Info != "") then
   set Batch    = `awk '$1 == "batch"  { print $3 }' $Info`
   set tHost    = `awk '$1 == "host"   { print $3 }' $Info`
   set tTimeMax = `awk '$1 == "time"   { print $3 }' $Info`
   set HaveMPI  = `awk '$1 == "mpi"    { print $3 }' $Info`
   set EnvVar   = `awk '$1 == "setenv" { printf("%s %s\n", $2, $3); }' $Info`

   if ("$tHost" != "") then
      set Host = $tHost
   endif
   if ("$tTimeMax" != "") then
      set TimeMax = $tTimeMax
   endif
   if ("$HaveMPI" != "") then
      setenv Wrap `where mpi-io-wrap | head -n 1`
   endif

# Note: count on the Info file having been automatically generated
# in a script that may never regain control to remove it
   rm -f $Info

endif

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# WRITE_SCRIPT

set Script = $cwd/b.$Prob.$$
set Log    = $Script.err
if ("$TTY" == "") then
   set TTY = $Script.out
endif

rm -f $Script
touch $Script

Note $Script '#\!/bin/csh'
Note $Script '# BATCH -c' "$Host"
Note $Script '# BATCH -o' $Log
if (($NNodes > 1) || ($NCpus > 1)) then
   Note $Script '# BATCH -ln' $NNodes -g $NCpus
else if ("$HostOS" == "Linux") then
   Note $Script '# BATCH -ln 1'
endif
Note $Script '# BATCH -x'
Note $Script '# BATCH -ro -eo'
Note $Script '# BATCH -tM' $TimeMax
Note $Script ''

Note $Script 'cd' $cwd
Note $Script ''

Note $Script 'set TTY = "'$TTY'"'
Note $Script 'rm -f $TTY'
Note $Script 'touch $TTY'
Note $Script ''

if ($Quiet == FALSE) then
   if ("$Wrap" != "") then
      Note $Script 'echo "Batch Job: '$Wrap $Cmnd'" >> $TTY'
      Note $Script 'echo "MPI Job  : yes" >> $TTY'
   else
      Note $Script 'echo "Batch Job: '$Cmnd'" >> $TTY'
      Note $Script 'echo "MPI Job  : no" >> $TTY'
   endif
   Note $Script 'echo "Date     : '$Date'" >> $TTY'
   Note $Script 'echo "----------------------------------------------------" >> $TTY'
   Note $Script ''
endif

# add specified environment variables
while ($#EnvVar > 1)
   set Var = $EnvVar[1]
   set Val = $EnvVar[2]
   shift EnvVar
   shift EnvVar
   Note $Script "setenv $Var $Val" '>>& $TTY'
end
Note $Script ''

Note $Script "$Cmnd" '>>& $TTY'
Note $Script 'set Err = $status'
Note $Script ''

if ($Quiet == FALSE) then
   Note $Script 'echo "----------------------------------------------------" >> $TTY'
   Note $Script ''
   Note $Script 'if ($Err == 0) then'
   Note $Script '   set ErrMsg = "'$Prob' succeeded"'
   Note $Script 'else'
   Note $Script '   set ErrMsg = "'$Prob' failed ($Err)"'
   Note $Script 'endif'
   Note $Script 'echo "$ErrMsg" >> $TTY'
   Note $Script ''
endif

switch ($Notify)
   case m:
        Note $Script '(echo "BATCH job '$Prob' has finished in '$cwd'" ; \'
        Note $Script ' echo "$ErrMsg" ) | \'
        Note $Script 'mail "'$USER'"'
        breaksw
   case w:
        Note $Script '(echo "BATCH job '$Prob' has finished in '$cwd'" ; \'
        Note $Script ' echo "$ErrMsg" ) | \'
        Note $Script 'write "'$USER'"'
        breaksw
        breaksw
endsw

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# EXECUTE

chmod 750 $Script
nohup ssh $Host $Script >&! $Log

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

exit($status)
