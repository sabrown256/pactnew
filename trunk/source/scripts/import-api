#!/bin/csh -f
#
# IMPORT-API - generate an API binding for a foreign package
#            - to be used by PACT and
#            - linked statically or dynamically as requested
#
# include "cpyright.h"
#

unalias *

set pact   = `which pact`
set bindir = $pact:h
set lbase  = $bindir:h
source $lbase/include/env-csh

@ err = 0

set def    = ""
set api    = ""
set incdir = ( . /usr/include )
set libdir = ( . /lib64 /usr/lib64 /lib /usr/lib )

while ($#argv > 0)
   switch ($1)
      case -h:
           echo ""
           echo "Usage: import-api [-h] [-I<incdir>]* [-L<libdir>]* [-o <api>] <def>"
           echo "   h      this help message"
           echo "   I      add <incdir> to include directory list"
           echo "   L      add <libdir> to lib directory list"
           echo "   o      name of generated API file"
           echo "   <def>  api definition file"
           echo ""
           exit(1)
      case -I*:
           set t = ( `echo $1 | sed 's|-I||g' | sed 's|:| |g'` )
           set incdir = ( $t $incdir )
           unset t
           breaksw
      case -L*:
           set t = ( `echo $1 | sed 's|-L||g' | sed 's|:| |g'` )
           set libdir = ( $t $libdir )
           unset t
           breaksw
      case -o:
           shift
           set api = $1
           breaksw
      default:
           set def = $1
           breaksw
   endsw
   shift
end

if ("$def" == "") then
   echo "No API definition file specified - exiting"
endif
if (!(-f "$def")) then
   echo "File '$def' does not exist - exiting"
endif

set pck = ( `grep -w package $def` )
set pck = $pck[2]
set PCK = `echo $pck | tr "[a-z]" "[A-Z]"`

set so = ( `grep -w so $def` )
set so = $so[2]
set ok = FALSE
foreach d ($libdir)
   if (-f $d/$so) then
      set so = $d/$so
      set ok = TRUE
      echo "   Using shared library '$so'"
      break
   endif
end
if ($ok == FALSE) then
   echo "   Warning: '$so' not found in '$libdir'"
endif

set arc = ( `grep -w arc $def` )
set arc = $arc[2]
set ok  = FALSE
foreach d ($libdir)
   if (-f $d/$arc) then
      set arc = $d/$arc
      set ok  = TRUE
      echo "   Using archive '$arc'"
      break
   endif
end
if ($ok == FALSE) then
   echo "   Warning: '$arc' not found in '$libdir'"
endif

set hdr = ( `grep -w header $def` )
set hdr = $hdr[2]
set ok  = FALSE
foreach d ($incdir)
   if (-f $d/$hdr) then
      set hdr = $d/$hdr
      set ok  = TRUE
      break
   endif
end
if ($ok == FALSE) then
   echo "   Error: '$hdr' not found in '$incdir'"
   exit(0)
endif

set file = $cwd/$hdr:t.api
if ("$api" == "") then
   set api = $pck.api
endif
echo "   Generating '$api' from '$hdr'"
rm -f $api
touch $api

set CPP = ( gcc -std=gnu99 -E )

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# PROCESS_PACKAGE_HEADER - make a clean list of functions, variables, and
#                        - typedefs defined by the package header

#   elide '{' '}' -                             remove struct bodies
#   awk '$NF ~ /\\/ { printf("%s ", $0); }      merge lines ending in \
#        $NF !~ /\\/ { printf("%s\n", $0); }'
#   sed 's/\\/ /g'                              remove embedded \
#   grep -v '#   '                              remove # line directives
#   sed '/^ *$/d'                               remove blank lines
#   sed 's/  */ /g'                             compress whitespace
#   tr "\t" " "                                 remove tabs (bad BSD)
#   awk '$0 ~ /, *$/   { printf("%s", $0) }     combines ending in ,
#        $0 !~ /, *$/  { printf("%s\n", $0) }'
#   tr -d '\n'                                  delete newlines
#   sed 's/;/;\n/g'                             replace ; with ;\n
#   sed 's/( */(/g'                             remove whitespace following (
#   sed '/^; *$/d'                              remove lines with only ;
#   sed 's/^ *//'                               remove leading whitespace
#

$CPP $hdr                                       | \
elide '{' '}' -                                 | \
awk '$NF ~ /\\/ { printf("%s ", $0); }            \
     $NF !~ /\\/ { printf("%s\n", $0); }'       | \
sed 's/\\/ /g'                                  | \
grep -v '#'                                     | \
sed '/^ *$/d'                                   | \
sed 's/  */ /g'                                 | \
tr "\t" " "                                     | \
awk '$0 ~ /, *$/   { printf("%s", $0) }           \
     $0 !~ /, *$/  { printf("%s\n", $0) }'      | \
tr -d '\n'                                      | \
sed 's/;/;\n/g'                                 | \
sed 's/( */(/g'                                 | \
sed '/^; *$/d'                                  | \
sed 's/^ *//'                                   | \
cat >&! $file

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

set fncl = ""
set ok = FALSE
@ nl = `cat $def | wc -l`
@ il = 0
while ($il < $nl)
   @ il = $il + 1
   set line = ( `head -n $il $def | tail -n 1` )
   if ("$line" == "") continue
   if ("$line" =~ \#*) continue
   if ("$line" =~ *functions\ \{) then
      set ok = TRUE
      continue
   endif
   if ("$line" =~ *\}*) then
      set ok = FALSE
      continue
   endif
   if ($ok == TRUE) then
      set fncl = ( $fncl $line )
   endif
end

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

Note $api '/*'
Note $api " * $PCK.API - define $PCK API for PACT"
Note $api ' *'
Note $api ' * #include "cpyright.h"'
Note $api ' *'
Note $api ' */'
Note $api ''
Note $api "#ifndef ${PCK}_API_PACT"
Note $api ''
Note $api "#define ${PCK}_API_PACT"
Note $api ''
Note $api "typedef struct s_${pck}_api ${pck}_api;"
Note $api ''
Note $api "struct s_${pck}_api"
Note $api '   {'

set noglob
foreach f ($fncl)
   set m = '(*f'$f')'
   set t = ( `grep -w $f $file | sed "s|$f|$m|"` )
   Note $api "    $t"
end
unset noglob

Note $api '   };'
Note $api ''
Note $api "static ${pck}_api"
Note $api " _${pck}_;"
Note $api ''
Note $api '/*--------------------------------------------------------------------------*/'
Note $api '/*--------------------------------------------------------------------------*/'
Note $api ''
Note $api '#define DYNAMICALLY_LINKED'
Note $api ''
Note $api "/* _${PCK}_SET_API - setup the API for ${PCK} access */"
Note $api ''
Note $api "void _${PCK}_set_api(void)"
Note $api '   {'
Note $api ''

set m = f$fncl[1]
Note $api "    if (_${pck}_.$m == NULL)"

Note $api ''
Note $api '#ifdef DYNAMICALLY_LINKED'
Note $api ''
Note $api '/* dynamically linked way */'
Note $api '       {int rv;'
Note $api ''
Note $api '	rv = SC_so_register_func(OBJ_SO, "'${so}'", "'${pck}'",'
Note $api '				 NULL, NULL, NULL, NULL);'
Note $api '	if (rv == FALSE)'
Note $api '	   SC_error(-1, "CANNOT LOAD '${so}'");'
Note $api ''

foreach f ($fncl)
   set m = f$f
   Note $api "	_${pck}_.$m \t = SC_so_get(OBJ_SO, "'"'${pck}'", "'$f'");'
end

Note $api '       }'
Note $api ''
Note $api '#else'
Note $api ''
Note $api '/* statically linked way */'
Note $api '       {'
Note $api ''

foreach f ($fncl)
   set m = f$f
   Note $api "	_${pck}_.$m \t = $f;"
end

Note $api '       };'
Note $api ''
Note $api '#endif'
Note $api ''
Note $api '    return;}'
Note $api ''
Note $api '/*--------------------------------------------------------------------------*/'
Note $api '/*--------------------------------------------------------------------------*/'
Note $api ''

foreach f ($fncl)
   set m = f$f
   Note $api "#define $f \t _${pck}_.$m"
end

Note $api ''
Note $api '#endif'
Note $api ''

cat $api | sed 's|\\t|\t|g' >&! $api.new
mv $api.new $api

rm -rf $file

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

exit($err)

