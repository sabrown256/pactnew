#!/bin/csh -f
#
# TEST-CHECK - post test checks and reporting
#            - handle all PACT tests consistently
#
# Source Version: 3.0
# Software Release #: LLNL-CODE-422942
#
# include "cpyright.h"
#

source $TestScrDir/env-csh

@ err = 0

set tgt  = none
set name = none

if ($?t0 == 0) then
   setenv t0 0
endif

if ($?Log == 1) then
   set log = $Log
else
   set log  = /dev/null
endif

set adv = $Package

set larg = ( $argv )
while ($#argv > 0)
   switch ($1)
      case -h:
           echo "Usage: test-check [-h] [-l <log>] <tgt> [<opt>*]"
           echo "   h     this help message"
           echo "   l     set log file to <log>"
           echo "   <tgt> one of  clean | fin | part"
           echo "   <opt> target specific options"
           echo ""
           exit(1)
      case -l:
           shift
           set log = $1
           breaksw
      default:
           set tgt = $1
           shift
           break
           breaksw
   endsw
   shift
end

Note $log "test-check $tgt ($#larg) |$larg|"

switch ($tgt)

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# CLEAN UP
   case clean:

        set name = ""
        set terr = 0
        set raf  = ""
        set rpf  = ""

        while ($#argv > 0)
           switch ($1)
              case -a:
                   shift
                   set adv = ( $adv ${Package}_$1 )
                   breaksw
              case -e:
                   shift
                   if (("$1" == "FALSE") || ("$1" == "0")) then
                      set terr = 0
                   else
                      set terr = 1
                   endif
                   breaksw
              case -h:
                   echo "Usage: test-check clean [-a <tst>] [-e <status>] [-h] [-n <name>] [-raf <files>] [-rpf <files>} [-t0 <time>]"
                   echo "   a     set advisory for test <tst>"
                   echo "   e     exit status of the test"
                   echo "   h     this help message"
                   echo "   n     test name"
                   echo "   raf   files to remove unconditionally"
                   echo "   rpf   files to remove if test passed"
                   echo "   t0    reference time"
                   echo ""
                   exit(1)
              case -n:
                   shift
                   set name = $1
                   breaksw
              case -raf:
                   shift
                   set raf = ( $1 )
                   breaksw
              case -rpf:
                   shift
                   set rpf = ( $1 )
                   breaksw
              case -t0:
                   shift
                   setenv t0 $1
                   breaksw
              default:
                   echo "Unknown option '$1'"
                   breaksw
           endsw
           shift
        end

# check the test advisory
        set advise = FALSE
        set alst = ( `printenv TEST_ADVISORY | sed 's/:/ /g'` )
        foreach i ($alst)
           foreach j ($adv)
              if ($i == $j) then
                 set advise = TRUE
                 break
              endif
           end
           if ($advise == TRUE) then
              break
           endif
        end
        unset alst

# make sure it is upper case
        set name = ( `echo $name | tr "[a-z]" "[A-Z]"` )

        if ($?rm_cache == 1) then
           if (-f $rm_cache) then
              foreach i (`cat $rm_cache`)
                 flog $Log $RM $i
              end
              flog $Log $RM $rm_cache
           endif
        endif

        if ("$raf" != "") then
           flog $log $RM $raf
        endif

        set dt = `$TIMER -b $t0`

        NoteD $log ""

        if ($terr == 1) then
           NoteD $log ""
           if ($advise == TRUE) then
              NoteD $log "$name TEST ... ACCEPTED AS PASSED ($dt)"
           else
              NoteD $log "$name TEST ... FAILED ($dt)"
              set err = 1
           endif
           NoteD $log ""
           NoteD $log "See $log for details"
        else
           if ("$rpf" != "") then
              flog $log $RM $rpf
           endif
           NoteD $log "$name TEST ... PASSED ($dt)"
        endif
        breaksw

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# PART/FINISH

   case fin:
   case part:
        set dt      = -1
        set xstatus = 0
        set msg     = ""
        set exe     = ""
        set rpf     = ""
        set mode    = major

        while ($#argv > 0)
           switch ("$1")
              case -a:
                   shift
                   set adv = ( $adv ${Package}_$1 )
                   breaksw
              case -dt:
                   shift
                   set dt = $1
                   breaksw
              case -e:
                   shift
                   if ($1 == "FALSE") then
                      set xstatus = 0
                   else
                      set xstatus = $1
                   endif
                   breaksw
              case -h:
                   echo "Usage: test-check $tgt [-a <tst>] [-dt <time>] [-e <status>] [-h] [-l] [-rpf <files>] [-x <exe>] <msg>"
                   echo "   a     set advisory for test <tst>"
                   echo "   dt    time taken for test"
                   echo "   e     exit status of the test"
                   echo "   h     this help message"
                   echo "   l     print status as ok/ng rather than PASSED/FAILED"
                   echo "   rpf   remove <files> if test passes"
                   echo "   x     full path to test executable"
                   echo "   <msg> test id message"
                   echo ""
                   exit(1)
              case -l:
                   set mode = minor
                   breaksw
              case -rpf:
                   shift
                   set rpf = ( $1 )
                   breaksw
              case -x:
                   shift
                   set exe = ( $1 )
                   breaksw
              case -*:
                   echo "Unknown option '$1' - exiting"
                   exit(1)
                   breaksw
              default:
                   set msg = ( "$argv" )
		   break
                   breaksw
           endsw
           shift
        end

        if ($dt == -1) then
           set dt = `$TIMER -b $t0`
        endif

        Note $log "Advisory      = $adv"
        Note $log "TEST_ADVISORY = $TEST_ADVISORY"

# check the test advisory
        set advise = FALSE
        set alst = ( `printenv TEST_ADVISORY | sed 's/:/ /g'` )
        foreach i ($alst)
           foreach j ($adv)
              if ($i == $j) then
                 flog $log set advise = TRUE
                 break
              endif
           end
           if ($advise == TRUE) then
              break
           endif
        end
        unset alst

        if ($tgt == fin) then
            NoteD $log ""
            NoteD $log " --------------------------------------------------------"

# determine and print the message
        else if (("$msg" != "none") && ("$msg" != "")) then
           NoteD $log -n "                    $msg"
        endif

	if ("$msg" != "") then
           switch ($xstatus)
# no resources
              case 255:
# batch controller failed
              case 254:
                   if ($mode == major) then
                      NoteD $log " OMITTED ($xstatus/$dt)"
                   else
                      NoteD $log " omitted ($xstatus/$dt)"
                   endif
                   breaksw
# crashed
              case 253:
                   if ($mode == major) then
                      NoteD $log " CRASHED ($xstatus/$dt)"
                   else
                      NoteD $log " crashed ($xstatus/$dt)"
                   endif
                   breaksw
# results differed
              case 252:
                   if ($mode == major) then
                      NoteD $log " DIFFERED ($dt)"
                   else
                      NoteD $log " differed ($dt)"
                   endif
                   breaksw
# timeout
              case 251:
                   if ($mode == major) then
                      NoteD $log " TIMEOUT ($dt)"
                   else
                      NoteD $log " to ($dt)"
                   endif
                   breaksw
# leaked
              case 250:
                   if ($mode == major) then
                      NoteD $log " LEAKED ($dt)"
                   else
                      NoteD $log " leaked ($dt)"
                   endif
                   breaksw
              case 0:
                   if ($mode == major) then
                      NoteD $log " PASSED ($dt)"
                   else
                      NoteD $log " ok ($dt)"
                   endif
                   breaksw
              default:
                   if ($mode == major) then
                      NoteD $log " FAILED ($xstatus/$dt)"
                   else
                      NoteD $log " ng ($xstatus/$dt)"
                   endif
                   breaksw
           endsw
        endif

# determine ultimate exit status
        switch ($xstatus)
           case 0:
# no resources
           case 255:
# batch controller failed
           case 254:
                set terr = 0
                if (("$rpf" != "") && ("$rpf" != "none")) then
                   Note $log "Removing files on passing tests"
                   flog $log $RM $rpf
                endif

                if ($?rm_cache == 1) then
                   Note $log "Marking test executables for removal"
                   touch $rm_cache
                   foreach i ($exe)
                      echo $i >>& $rm_cache
                   end
                endif
                Note $log ""
                breaksw
# crashed
           case 253:
# results differed
           case 252:
# timeout
           case 251:
# leaked
           case 250:
           default:
                set terr = 1
                breaksw
        endsw

        set err = 0
        if ($terr == 1) then
           if ($advise == TRUE) then
              Note $log "PASSED by advisory match ( $adv ) in ( $TEST_ADVISORY )"
              flog $log set err = 0
           else
              flog $log set err = 1
           endif
        endif

        Note $log "Exit status for $Test ${tgt}: $err"
        Separator $log

        breaksw

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

endsw

exit($err)
