#!/bin/csh -f
#
# SCS-UPDATE - update sources whether GIT, CVS or SVN
#
# Source Version: 3.0
# Software Release #: LLNL-CODE-422942
#
# include "cpyright.h"
#

unalias *

@ err = 0

set ldir = `dirname $0`
if ("$ldir" == ".") then
   set ldir = $cwd
endif
set scsi = ( `$ldir/which-scs` )

set sort   = FALSE
set unmngd = FALSE
set cvsopt = ""
set svnopt = ""
set args   = ""
while ($#argv > 0)
   switch ($1)
      case -A:
           set cvsopt = ( $cvsopt -A )
           set svnopt = ( $svnopt --depth files )
           breaksw
      case -l:
           set cvsopt = ( $cvsopt -l )
           set svnopt = ( $svnopt --depth files )
           breaksw
      case -s:
           set sort = TRUE
           breaksw
      case -u:
           set unmngd = TRUE
           breaksw
      default:
           set args = ( $args $1 )
           breaksw
   endsw
   shift
end

switch ($scsi[1])
   case git:
        pushd $scsi[2] >& /dev/null

        if ($unmngd == TRUE) then
	   if ($sort == TRUE) then
              git status -s |& egrep '^\?' | sed 's/^??/? /' | grep "$scsi[3]/" | sort -k 2
           else
              git status -s |& egrep '^\?' | sed 's/^??/? /' | grep "$scsi[3]/"
           endif
        else
           set repo = ( `$ldir/scs-meta -r` )

           set mode = 0

# update local copy with changes from master repo
           @ xstatus = 0

           switch ($mode)

# old way - actually had a second pull after the report was made
# AND it does not touch files causing emacs to prompt you to re-read them
              case 0:
                   git pull $repo master >&! .log.sup
                   @ xstatus = $xstatus + $status
                   if ($xstatus == 0) breaksw

# new way - handles merge/conflict more like CVS and SVN
# BUT it touches files causing emacs to prompt you to re-read them
# seriously annoying
              case 1:
                   git stash >&! .log.sup
                   @ xstatus = $xstatus + $status
                   git pull $repo master >&! .log.sup
                   @ xstatus = $xstatus + $status
                   git stash pop >&! .log.sup
                   @ xstatus = $xstatus + $status
                   breaksw
            endsw

# report changed files
           if ($sort == TRUE) then
              git status --porcelain -uno | sort -k 2
           else
              git status --porcelain -uno
           endif

           if ($xstatus == 0) then
              rm .log.sup
           else
              @ err = $err + $xstatus
              cat .log.sup
           endif
        endif

        popd >& /dev/null
        breaksw

   case cvs:

        setenv CVS_RSH  ssh
        if ($unmngd == TRUE) then
	   if ($sort == TRUE) then
              cvs update $cvsopt $args |& egrep '^\?' | sort -k 2
              @ err = $err + $status
           else
              cvs update $cvsopt $args |& egrep '^\?'
              @ err = $err + $status
           endif
        else
	   if ($sort == TRUE) then
              cvs update $cvsopt $args |& egrep -v '^\?' |& grep -v 'cvs update' | sort -k 2
              @ err = $err + $status
           else
              cvs update $cvsopt $args |& egrep -v '^\?' |& grep -v 'cvs update'
              @ err = $err + $status
           endif
        endif
        breaksw

   case svn:

        svn update $svnopt $args
        if ($unmngd == TRUE) then
	   if ($sort == TRUE) then
              svn status $svnopt |& egrep '^\?' | sort -k 2
              @ err = $err + $status
           else
              svn status $svnopt |& egrep '^\?'
              @ err = $err + $status
           endif
        else
	   if ($sort == TRUE) then
              svn status $svnopt |& egrep -v '^\?' | sed 's|+| |' | sort -k 2
              @ err = $err + $status
           else
              svn status $svnopt |& egrep -v '^\?' | sed 's|+| |'
              @ err = $err + $status
           endif
        endif
        breaksw
endsw

exit($err)
