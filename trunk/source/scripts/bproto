#!/bin/csh -f
#
# BPROTO - generate C prototypes for use with BLANG
#
# Source Version: 3.0
# Software Release #: LLNL-CODE-422942
#
# include "cpyright.h"
#

unalias *

set ldir   = `dirname $0`
set psy_id = `$ldir/cfgman use`
set root   = $ldir:h/dev/$psy_id

source $root/etc/env-pact.csh
source $ldir/functions-pact.csh

unset ldir
unset root

set err = 0
set d   = $cwd
set d   = $d:t

set tgt  = premk
set vrb  = FALSE
set flst = ""
set dst  = $PSY_TmpDir/obj

while ($#argv > 0)
   switch ($1)
      case -d:
           shift
           set dst = $1
           breaksw
      case -f:
           set tgt = files
           breaksw
      case -h:
           echo ""
           echo "Usage: bproto [-d <dir>] [-f] [-h] [-m] [-v]"
           echo "   d   put files in <dir> (default $PSY_TmpDir/obj)"
           echo "   f   generate prototypes for specified files"
           echo "   h   this help message"
           echo "   m   generate prototypes from pre-Make files (default)"
           echo "   v   verbose operation"
           echo ""
           exit(1)
      case -m:
           set tgt = premk
           breaksw
      case -v:
           set vrb = TRUE
           breaksw
      default:
           set flst = ( $flst $1 )
           breaksw
   endsw
   shift
end

# GOTCHA: intel compilers need the -l option to blang
# to be technically correct - things are working without
# it at the moment
set opt = "-l"
set opt = ""

InitLog Log $cwd/$dst/bproto

Note $Log ""
Note $Log "Generating C bindings for Fortran, SX, and Python"
Note $Log ""

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# GENERATE - generate interfaces for each package

   @ CCount = `echo $d | wc -c`
   @ NDots  = 20 - $CCount
   set Fill = "$d "
   while ($NDots > 0)
      set Fill = "$Fill."
      @ NDots = $NDots - 1
   end

   NoteD $Log -n "      $Fill "
   Note $Log ""

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# PARSE - parse the pre-Make file and make a file list

   Separator $Log

   set Cfiles = ""
   set Ffiles = ""
   set Hfiles = ""

   switch ($tgt)
      case files:
           set Lst = ( $flst )
           breaksw

      case premk:
      default:
           if (-f pre-Make) then
              set Lst = ( `grep '${TGTLib}(' pre-Make | sed 's/TGTLib//g' | sed 's/[=()$\]//g'` )

# for example in python/2_numpy there is no pre-Make
# and bindings are not appropriate there anyway
           else
              exit(0)
           endif
           breaksw
   endsw

   if ($vrb == TRUE) then
      NoteD $Log ""
      NoteD $Log "Generating prototypes for:"
      NoteD $Log "   $flst"
   endif

   Note $Log "Target = $tgt"
   Note $Log "File List = $Lst"

   foreach i ($Lst)
      set j = $i:r.c
      if (-f $j) then
         set Cfiles = ( $Cfiles $j )
      endif
      set j = $i:r.f
      if (-f $j) then
         set Ffiles = ( $Ffiles $j )
      endif
      if ($tgt == files) then
         set j = $i:r.h
         if (-f $j) then
            set Hfiles = ( $Hfiles $j )
         endif
      endif
   end

# GOTCHA: exception for panace.h - the only one whose
# name is not the same as the package name
# this can be fixed now - the reason is based on 8.3 file names
   if ((-f $d.h) || (-f panace.h)) then
      set Hfiles = ( ../*/*.h )
   endif

   if ($vrb == TRUE) then
      NoteD $Log "Hfiles = $Hfiles"
      NoteD $Log "Cfiles = $Cfiles"
      NoteD $Log "Ffiles = $Ffiles"
      NoteD $Log ""
   else
      Note $Log "Hfiles = $Hfiles"
      Note $Log "Cfiles = $Cfiles"
      Note $Log "Ffiles = $Ffiles"
      Note $Log ""
   endif

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# FIND_BIND - process the C files for #bind directives
#           - the transformations are:
#
#   grep '#bind'                        find the #bind directives
#   tr "\t" " "                         remove tabs (BSD sed brain damage)
#   sed 's/^.*#bind *//'                remove the #bind token, anything
#                                       preceeding it, and whitespace after

   Separator $Log
   Note $Log "Process #bind directives"

   flog $Log set cbind = $dst/$d.bind

   if ("$Cfiles" != "") then
      grep '#bind' $Hfiles $Cfiles  | \
      tr "\t" " "                   | \
      sed 's/^.*#bind *//'          | \
      cat >&! $cbind
   else
      flog $Log rm -f $cbind
      flog $Log touch $cbind
   endif

   if ($vrb == TRUE) then
      NoteD $Log "   binding file: $cbind"
   endif

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# FIND_CC_DECL - process the C declarations
#              - the transformations are:
#
#   elide -q '/*' '*/' $Cfiles                     remove C comments
#   elide '{' '}' -                                remove compound statements
#   awk '$NF ~ /\\/ { printf("%s ", $0); }         merge lines ending in  \
#        $NF !~ /\\/ { printf("%s\n", $0); }'  
#   sed 's/\\/ /g'                                 remove embedded \
#   elide '#if' '#endif' -                         remove conditionals
#   grep -v '#'                                    remove #include, #define
#   tr "\t" " "                                    remove tabs (BSD sed brain damage)
#   sed 's/  */ /g'                                compress whitespace
#   awk '$0 ~ /, *$/  { printf("%s", $0) }    
#        $0 !~ /, *$/ { printf("%s\n", $0) }'      combine lines ending in ,
#   sed '/^ *$/d'                                  remove blank lines
#   sed '/; *$/d'                                  remove lines ending in ;
#   grep -v '='                                    remove lines with assignments
#

   Separator $Log
   Note $Log "Process C prototypes"

   flog $Log set cproto = $dst/$d.protoc

   if ("$Cfiles" != "") then
      Note $Log "target = $tgt"
      if ($tgt == files) then
         elide -q '/*' '*/' $Cfiles                      | \
         elide '{' '}' -                                 | \
         awk '$NF ~ /\\/ { printf("%s ", $0); }            \
              $NF !~ /\\/ { printf("%s\n", $0); }'       | \
         sed 's/\\/ /g'                                  | \
         grep -v '#'                                     | \
         tr "\t" " "                                     | \
         sed 's/^enum .*$//'                             | \
         sed 's/^struct .*$//'                           | \
         sed 's/  */ /g'                                 | \
         awk '$0 ~ /, *$/   { printf("%s", $0) }           \
              $0 !~ /, *$/  { printf("%s\n", $0) }'      | \
         sed '/^ *$/d'                                   | \
         sed '/; *$/d'                                   | \
         grep -v 'static'                                | \
         grep '('                                        | \
         sort                                            | \
         cat >&! $cproto
#         cat
#exit(1)
      else
         elide -q '/*' '*/' $Cfiles                      | \
         elide '{' '}' -                                 | \
         awk '$NF ~ /\\/ { printf("%s ", $0); }            \
              $NF !~ /\\/ { printf("%s\n", $0); }'       | \
         sed 's/\\/ /g'                                  | \
         elide '#if' '#endif' -                          | \
         grep -v '#'                                     | \
         tr "\t" " "                                     | \
         sed 's/  */ /g'                                 | \
         awk '$0 ~ /, *$/   { printf("%s", $0) }           \
              $0 !~ /, *$/  { printf("%s\n", $0) }'      | \
         sed '/^ *$/d'                                   | \
         sed '/; *$/d'                                   | \
         grep -v '='                                     | \
         grep -v 'FIXNUM'                                | \
         grep -v 'static'                                | \
         grep '('                                        | \
         sort                                            | \
         cat >&! $cproto
      endif
      flog $Log wc -l $cproto
   else
      flog $Log rm -f $cproto
      flog $Log touch $cproto
   endif

   if ($vrb == TRUE) then
      NoteD $Log "   C prototype file: $cproto"
   endif

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# FIND_CC_DERIVED - process the C derived type specification:
#                 - enum, struct, and union
#                 - only get the ones using the PACT convention:
#                 -   enum e_foo, struct s_foo, union u_foo
#                 - elide is not smart enough to get any others reliably
#                 - the transformations are:
#
#

   Separator $Log
   Note $Log "Process C derived types"

   flog $Log set cder = $dst/$d.derivedc

   flog $Log rm -f $cder
   flog $Log touch $cder

   if ("$Cfiles" != "") then
      Note $Log "target = $tgt"
      set files = ( *.h $Cfiles )
      set list  = (enum struct union)
      Note $Log "Files searched for derived type info:"
      Note $Log "   $files"
      foreach k ($list)
         Note $cder "#------------------------------------------------------"
         Note $cder "#                    $k"
         Note $cder "#------------------------------------------------------"
         set kb = `echo $k | cut -c 1`
         elide -q '/*' '*/' $files                       | \
         grep -v typedef                                 | \
         grep -v extern                                  | \
         elide -r "$k ${kb}_" '}' -                      | \
         elide '#if' '#endif' -                          | \
         tr "\t" " "                                     | \
         sed 's/  */ /g'                                 | \
         awk '$0 ~ /, *$/   { printf("%s", $0) }           \
              $0 !~ /, *$/  { printf("%s\n", $0) }'      | \
         awk '$0 ~ /; *$/   { printf("%s", $0) }           \
              $0 !~ /; *$/  { printf("%s\n", $0) }'      | \
         awk '$0 ~ /}; *$/  { printf("%s\n", $0) }         \
              $0 !~ /}; *$/ { printf("%s", $0) }'        | \
         grep -e "^$k "                                  | \
         sed '/^ *$/d'                                   | \
         cat >>& $cder
         Note $cder ""
      end
      flog $Log wc -l $cder
   endif

   if ($vrb == TRUE) then
      NoteD $Log "   C derived type file: $cder"
   endif

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# FIND_FC_DECL - process the Fortran declarations

   Separator $Log
   Note $Log "Process Fortran prototypes"

   flog $Log set fproto = $dst/$d.protof

   flog $Log rm -f $fproto
   flog $Log touch $fproto

   foreach f ($Ffiles)
      cat $f                                                                  | \
      grep -v '!'                                                             | \
      awk 'BEGIN { fn = 0; md = 0; nv = 0; }                                    \
           $1 == "module" { md = 1; }                                           \
           $0 ~ /end module/ { md = 0; nv = 0; }                                \
           md == 0 && $1 == "function" || $1 == "subroutine" { print ; fn = 1; }           \
           md == 0 && $0 ~ /end function/ || $0 ~ /end subroutine/ { printf("\n"); fn = 0; nv = 0; }     \
           md == 0 && $0 ~ /::/ && fn == 1 { print ; nv++; }                               \
           $0 == "" && nv > 0 { fn = 0; }' >>& $fproto
   end

   if ($vrb == TRUE) then
      NoteD $Log "   Fortran prototype file: $fproto"
   endif

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# FIND_FF_WRAPPER - find the FF_ID declarations
#                 - account for the convention:
#                 -    <type> *sxxx    is a scalar
#                 -    <type> *axxx    is an array
#                 - the transformations are:
#
#   tr "\t" " "                           remove tabs (BSD sed brain damage)
#   sed 's/  */ /g'                       compress white space
#   awk '$0 ~ /, *$/  { printf("%s", $0) }     join lines ending in ','
#        $0 !~ /, *$/ { printf("%s\n", $0) }'
#   grep 'FF_ID('                    
#   grep -v "#"                           suppress #define FF_ID
#   grep -v ";"                           suppress ... FF_ID(x,X)(...);
#   grep -v "="                           suppress x = FF_ID(x,X)(...
#   sed 's/, .*)(/(/'                     FF_ID(x, X)(     -> FF_ID(x)(
#   sed 's/FF_ID(//'                      FF_ID(x)         -> x
#   sed 's/(void)/()/'                    (void)           -> ()
#   sed 's/(/ /'                          '('              -> ' '
#   sed 's/)$/ END/'                      foo(...)         -> foo(... END
#   sed 's/FIXNUM/integer/g'              FIXNUM           -> integer
#   sed 's/char *\*/integer(isizea) /g'   char *           -> integer(isizea)
#   sed 's/void *\*/integer(isizea) /g'   void *           -> integer(isizea)
#   sed 's/integer *\*s/integer s/g'      integer *s       -> integer
#   sed 's/integer *\*/integerARRAY /g'   integer *        -> integer(*)
#   sed 's/integer *\*/integer /g'        integer *        -> integer
#   sed 's/REAL *\*/real /g'              REAL *           -> real*8
#   sed 's/double *\*/real /g'            double *         -> real*8
#   sed 's/REAL/real*8/g'                 REAL             -> real*8
#   sed 's/double/real*8/g'               double           -> real*8
#   sed 's/float/real*4/g'                float            -> real*4
#   sed 's/char */character*(*)/g'        char *           -> character*(*)
#   sed 's/*//g'                          '*'              -> ''
#   sed 's/,/ /g'                         ','              -> ' '
#   sed 's/PF[^ ]* /external /g'          function pointer -> external
#

   Separator $Log
   Note $Log "Process hand wrapped Fortran"

   flog $Log set fwrap = $dst/$d.wrapper

   if ("$Cfiles" != "") then
      cat $Cfiles                                    | \
      tr "\t" " "                                    | \
      sed 's/  */ /g'                                | \
      awk '$0 ~ /, *$/   { printf("%s", $0) }          \
           $0 !~ /, *$/  { printf("%s\n", $0) }'     | \
      grep 'FF_ID('                                  | \
      grep -v "#"                                    | \
      grep -v ";"                                    | \
      grep -v "="                                    | \
      sed 's/, .*)(/(/'                              | \
      sed 's/FF_ID(//'                               | \
      sed 's/(void)/()/'                             | \
      sed 's/(/ /'                                   | \
      sed 's/) *$//'                                 | \
      sed 's/FIXNUM/integer/g'                       | \
      sed 's/char *\*/character /g'                  | \
      sed 's/void *\*/integer(isizea) /g'            | \
      sed 's/integer *\*s/integer s/g'               | \
      sed 's/integer *\*/integer-A /g'               | \
      sed 's/REAL *\*/real--8 /g'                    | \
      sed 's/double *\*s/real--8 s/g'                | \
      sed 's/double *\*/real8-A /g'                  | \
      sed 's/REAL/real--8/g'                         | \
      sed 's/double/real--8/g'                       | \
      sed 's/float/real--4/g'                        | \
      sed 's/*//g'                                   | \
      sed 's/,/ /g'                                  | \
      sed 's/PF[^ ]* /external /g'                   | \
      sed 's/.*:/      /'                            | \
      sed 's/--/*/g'                                 | \
      cat >&! $fwrap
   else
      flog $Log rm -f $fwrap
      flog $Log touch $fwrap
   endif

   if ($vrb == TRUE) then
      NoteD $Log "   Fortran wrapper file: $fwrap"
   endif

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# FIND_DOC - process the C files for comments with #bind directives

   Separator $Log
   Note $Log "Process documentation"

   flog $Log set cdoc = $dst/$d.doc

   if ("$Cfiles" != "") then
      find-comments -t '#bind' $Hfiles $Cfiles | \
      cat >&! $cdoc
   else
      flog $Log rm -f $cdoc
      flog $Log touch $cdoc
   endif

   if ($vrb == TRUE) then
      NoteD $Log "   C documentation file: $cdoc"
   endif

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# FINISH - complete the job by running blang over the files
#        - and putting files where they need to be

   Separator $Log
   Note $Log "Finish bproto session"

   NoteD $Log "done"

# only move generated files if DST equals ZDIR
   set zdir = $PSY_TmpDir/obj
   if ($dst == $zdir) then
      flog $Log pushd $zdir

      flog $Log blang $opt -b $cbind:t -c $cproto:t -dv $cder:t $cdoc:t -f $fproto:t -w $fwrap:t
      set xstatus = $status

# move all fortran stuff to the fortran package
      if ($d != fortran) then
         if (-f gf-$d.c) then
            set ldst =  ../../../fortran/$zdir
            if (!(-d $ldst)) then
               flog $Log mkdir -p $ldst
            endif
            flog $Log mv gf-$d.c $ldst
         endif
         if (-f gm-$d.f) then
            set ldst =  ../../../fortran/$zdir
            if (!(-d $ldst)) then
               flog $Log mkdir -p $ldst
            endif
            flog $Log mv gm-$d.f $ldst
         endif
      endif

# move all scheme stuff to the sx package
      if ($d != sx) then
         foreach s (c h)
            if (-f gs-$d.$s) then
               set ldst =  ../../../sx/$zdir
               if (!(-d $ldst)) then
                  flog $Log mkdir -p $ldst
               endif
               flog $Log mv gs-$d.$s $ldst
            endif
         end
      endif

# move all python stuff to the python package
      if ($d != python) then
         foreach s (c h)
            if (-f gp-$d.$s) then
               set ldst =  ../../../python/$zdir
               if (!(-d $ldst)) then
                  flog $Log mkdir -p $ldst
               endif
               flog $Log mv gp-$d.$s $ldst
            endif
         end
      endif

# move all documentation to the doc package
      if (-f gh-$d.html) then
         flog $Log mv gh-$d.html ../../../doc
      endif

      flog $Log popd

   endif

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

exit($err)

