#!/bin/csh -f
#
# IOPR - get information about network I/O PeRformance
#      - pronounced "yupper"
#
# Source Version: 3.0
# Software Release #: LLNL-CODE-422942
#
# include "cpyright.h"
#

unalias *

set path = (/sbin /usr/sbin /usr/xpg4/bin /bin /usr/bin $path)

# add the path to here iff you are able to verify it
set Exe = `dirname $0`
if (-x "$Exe/iopr") then
   set path = ( $Exe $path )
endif

set Which = "swhich -1"
set TIMER = `$Which timer`
if (!(-x $TIMER)) then
   set TIMER = none
endif

set OS = `uname -s`
@ NBS0 = 0
@ NBR0 = 0
@ T0   = 0

if ($TIMER == none) then
   set TE = none
else
   set TE = `$TIMER -r`
endif

set Mode    = info
set Verbose = FALSE
set Quiet   = FALSE

while ($#argv > 0)
   switch ($1)
      case -b:
           shift
           if ($#argv != 3) then
              exit(1)
           endif
           if ($TIMER == none) then
              exit(20)
           endif
           @ NBS0 = $1
           shift
           @ NBR0 = $1
           shift
           set T0 = $1
           @ T0   = `$TIMER -t $T0`
           set Mode = diff
           break
           breaksw
      case -h:
           echo "Usage: iopr [-b <# MB sent> <# MB recv> <time>] [-h] [-q] [-r] [-v]"
           echo ""
           echo "  b  use data from previous invocation to form rates"
           echo "  h  this help message"
           echo "  q  be quiet as possible - just the raw facts"
           echo "  r  raw data for future computation of rates"
           echo "  v  verbose mode"
           exit(1)
      case -q:
           set Quiet = TRUE
           breaksw
      case -r:
           set Mode = data
           breaksw
      case -v:
           set Verbose = TRUE
           breaksw
   endsw
   shift
end

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# CHECK - verify that we can run netstat to get info

set NETSTAT = `$Which netstat`
if (!(-x $NETSTAT)) then
   exit(1)
else
   if ($OS == "AIX") then

# on AIX netstat tends to be unavailable to users
# check to see if sudo is an option
      $NETSTAT -rna >& /dev/null
      if ($status != 0) then
         echo "foo" | sudo -S netstat -rna >& /dev/null
         if ($status != 0) then
            echo "foo" | sudo -S netstat -rna |& grep -i sword >& /dev/null
            if ($status != 0) then
               exit(10)
            endif
         endif
         set NETSTAT = "sudo $NETSTAT"
      endif
   endif

   $NETSTAT -rna >& /dev/null
   if ($status != 0) then
      exit(2)
   endif

   $NETSTAT -s >& /dev/null
   if ($status != 0) then
      exit(3)
   endif
endif

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# HOST - get the name and IP address of the current host

set HstN = `uname -n`
set HstI = `nslookup $HstN |& tail -n 2 | awk '{print $2}'`
if ($Verbose == TRUE) then
   echo "Host: $HstN($HstI) $OS"
endif

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# SERVER - get the name, IP address and any other useful info
#        - about the NFS server for the current directory

if ($OS == SunOS) then
   set Srvi = `df . | grep ':' | sed 's/(/ /g' | sed 's/)/ /g' | awk '{print $2}'`
else
   set Srvi = `df . | grep ':' | awk '{print $1}'`
endif

if ($OS == Darwin) then
   set TraceRoute = ( traceroute -I )
   set popt       = ( -c 1 -t 10 )
else
   set TraceRoute = traceroute
   set popt       = ( -c 1 -w 10 )
endif

if ("$Srvi" == "") then
   set inf = "$HstN"
else
   set inf = "$Srvi"
endif
set inf  = ( `echo "$inf" | sed 's/:/ /g'` )
set SrvN = $inf[1]

set inf = ( `echo $SrvN | sed 's/[.0-9]*//g'` )
if ("$inf" == "") then
   set SrvI = $SrvN
   set inf  = ( `nslookup $SrvI |& tail -n 2` )
   set SrvN = ( `echo $inf[4] | sed 's/\.$//'` )
else
   set inf  = ( `ping $popt $SrvN |& grep PING | head -n 1` )
   set SrvI = ( `echo $inf[3] | sed 's/[():]//g'` )
endif

set RTdT = 0
if ("$SrvI" == "") then

# search using qualified host name - foo.bar.baz
   set inf  = ( `$TraceRoute $SrvN |& awk '$2 ~ /'$SrvN'/ {for (i = 4; i < NF; i += 2) {printf("%s\n", $i);};} $2 == "*" && $3 ~ /'$SrvN'/ {for (i = 5; i < NF; i += 2) {printf("%s\n", $i);};}'` )
   set RTdT = `echo "$inf" | awk '{a = 0.0; n = 0.0; for (i = 0; i < NF; i++) {a += $i; n += 1.0;}; if (n != 0) {printf("%.3f\n", a/n);} else {printf("0\n");};}'`
   set SrvI = `$TraceRoute $SrvN |& awk '$2 ~ /'$SrvN'/ {print $3} $2 == "*" && $3 ~ /'$SrvN'/ {print $3}' | sed 's/(//' | sed 's/)//'`
endif

if ("$SrvI" == "") then

# find unqualified name
   set inf  = ( `echo $SrvN |& sed 's/\./ /g'` )
   set srvu = $inf[1]

# search using unqualified host name - foo
   set inf  = ( `$TraceRoute $SrvN |& awk '$2 ~ /'$srvu'/ {for (i = 4; i < NF; i += 2) {printf("%s\n", $i);};} $2 == "*" && $3 ~ /'$SrvN'/ {for (i = 5; i < NF; i += 2) {printf("%s\n", $i);};}'` )
   set RTdT = `echo "$inf" | awk '{a = 0.0; n = 0.0; for (i = 0; i < NF; i++) {a += $i; n += 1.0;}; if (n != 0) {printf("%.3f\n", a/n);} else {printf("0\n");};}'`
   set SrvI = `$TraceRoute $SrvN |& awk '$2 ~ /'$srvu'/ {print $3} $2 == "*" && $3 ~ /'$SrvN'/ {print $3}' | sed 's/(//' | sed 's/)//'`

# bail right now if we cannot determine the IP address of the NFS server
   if ("$SrvI" == "") then
      if ($Quiet == FALSE) then
         echo "Cannot determine IP address of server $SrvN"
      endif
      exit(11)
   endif
endif

unset srvu
unset inf

if ($Verbose == TRUE) then
   echo "NFS Server: $SrvN($SrvI) $RTdT"
endif

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# INTERFACES - get a list of network interfaces on the current host

if (($OS == Darwin) || ($OS == FreeBSD)) then
   set Itfl = `$NETSTAT -rna | awk 'NF > 5 && $1 != "Destination" && $1 != "localhost" && $1 != "default" && $1 != "Route" {printf("%s\n", $6);}' | sort | uniq`
   set lInf = `$NETSTAT -rna | awk 'NF > 5 && $1 != "Destination" && $1 != "localhost" && $1 != "default" && $1 != "Route" {printf("%s %s ", $1, $6);}'`
else
   set Itfl = `$NETSTAT -rna | awk '$1 == "Destination" {ln = NF;} NF == ln && $1 != "Destination" && $1 !~ /-----/ && $1 != "localhost" && $1 != "default" && $1 != "Route" {printf("%s\n", $NF);}' | sort | uniq`
   set lInf = `$NETSTAT -rna | awk '$1 == "Destination" {ln = NF;} NF == ln && $1 != "Destination" && $1 !~ /-----/ && $1 != "localhost" && $1 != "default" && $1 != "Route" {printf("%s %s ", $1, $NF);}'`
endif

set NItf  = $#Itfl
if ($Verbose == TRUE) then
   echo "Host has $NItf network interfaces: $Itfl"
endif

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# INTERFACE - find out which network interface connects to the NFS server

if ($NItf == 1) then
   set Intf  = $Itfl
   set IPMsk = $HstI
else

   set Intf     = ""
   set IPMsk    = ""
   set BestIP   = ""
   set BestIntf = ""
   @ BestClass  = 0
   while ($#lInf > 0)
      set CIp  = `echo "$lInf[1]" | sed 's+/+ +g' | awk '{print $1}'`
      set CItf = $lInf[2]

      shift lInf
      shift lInf

      if (`expr "$CIp" : '0\.0\.0\.0'` > 0) then
         @ Cat = 0

# convert forms such as a.0.0.0 to a
      else if (`expr "$CIp" : '.*\.0\.0\.0'` > 0) then
         set CIp = $CIp:r
         set CIp = $CIp:r
         set CIp = $CIp:r
         @ Cat = 1

# convert forms such as a.b.0.0 to a.b
      else if (`expr "$CIp" : '.*\..*\.0\.0'` > 0) then
         set CIp = $CIp:r
         set CIp = $CIp:r
         @ Cat = 2

# convert forms such as a.b.c.0 to a.b.c
      else if (`expr "$CIp" : '.*\..*\..*\.0'` > 0) then
         set CIp = $CIp:r
         @ Cat = 3

      else
         @ Cat = 4

      endif

# compute a match score for this address put result in Class
      set lIp = $CIp
      @ Score = 0
      @ Class = 0
      while ($Cat > 0)
         if ("$lIp" != "") then
            @ lSc = `expr "$SrvI" : $lIp`
            if ($lSc > $Score) then
               @ Score = $lSc
               @ Class = $Cat
            endif
            set lIp = `expr "$lIp" : '\(.*\)\..*'`
         endif
         @ Cat = $Cat - 1
      end

# the best class is the best match
      if ($Class > $BestClass) then
         @ BestClass = $Class
         set BestIP   = $CIp
         set BestIntf = $CItf
      endif

# match masked addresses of the form a.b.c.d
      if (`expr "$CIp" : '.*\..*\..*\..*'` > 0) then
         if (`expr "$SrvI" : $CIp` > 0) then
            set Intf  = $CItf
            set IPMsk = $CIp
            break
         endif

# match masked addresses of the form a.b.c
      else if (`expr "$CIp" : '.*\..*\..*'` > 0) then
         if (`expr "$SrvI" : $CIp'\..*'` > 0) then
            set Intf  = $CItf
            set IPMsk = $CIp
            break
         endif

# match masked addresses of the form a.b
      else if (`expr "$CIp" : '.*\..*'` > 0) then
         if (`expr "$SrvI" : $CIp'\..*\..*'` > 0) then
            set Intf  = $CItf
            set IPMsk = $CIp
            break
         endif

# assume anything else is a host name and resolve it to an address
      else
         set inf = ( `nslookup $CIp |& tail -n 2` )
         set CIp = $inf[2]
         if (`expr "$SrvI" : $CIp` > 0) then
            set Intf  = $CItf
            set IPMsk = $CIp
            break
         endif
      endif
   end

# if no exact matches occur take the best match
   if ("$IPMsk" == "") then
      if ($Verbose == TRUE) then
         echo "Using Best Match for Network Interface"
      endif
      set Intf  = $BestIntf
      set IPMsk = $BestIP
   endif

endif

if ($Verbose == TRUE) then
   echo "Network Interface to NFS Server: $Intf"
   echo "Network Mask to NFS Server: $IPMsk"
endif

if ("$Intf" == "") then
   if ($Quiet == FALSE) then
      echo "Cannot determine the network interface to the NFS server $SrvN ($SrvI)"
   endif
   exit(1)
   endif
endif

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# RAW - get the raw packet statistics
#     - return a list, NPack, containing
#     -   MTU  - packet size in bytes
#     -   RX   - MBytes sent
#     -   TX   - MBytes received

if ($OS == Linux) then
   set NPack = `ifconfig |& sed '/packets:/d' |& sed 's/:/ /g' |& awk 'BEGIN {itf = 0; mb  = 1024.0*1024.0;} $1 ~ /'$Intf'/ {itf = 2;} itf != 0 {for (i = 1; i < NF; i++) {if ($i ~ /MTU/) {printf("MTU%s ", $(i+1)); itf--; break;};};} itf != 0 && $0 ~ /RX bytes/ {printf("RX%d TX%d ", $3/mb, $8/mb); itf--;}' |& sed 's/bytes://g'`

else if ($OS == OSF1) then

   set NPack = ( MTU`ifconfig -a | awk '$6 ~ /'$CIp'/ {print $8}' | head -n 1` \
                 RX`$NETSTAT -s |& grep "packets received" | awk 'BEGIN {a = 0}  {a += $1} END {printf("%d\n", a/(1024.0*1024.0));}'` \
                 TX`$NETSTAT -s |& grep "packets sent" | awk 'BEGIN {a = 0}  {a += $1} END {printf("%d\n", a/(1024.0*1024.0));}'` )

else if ($OS == SunOS) then

   set NPack = ( MTU`ifconfig -a | grep $Intf | awk '{print $4}' | head -n 1` \
                 RX`$NETSTAT -s |& grep "ipInReceives" | sed 's/=/ /g' | awk '{printf("%d\n", $2/(1024.0*1024.0));}'` \
                 TX`$NETSTAT -s |& grep "ipOutRequests" | sed 's/=/ /g' | awk '{printf("%d\n", $4/(1024.0*1024.0));}'` )

else if (($OS == Darwin) || ($OS == FreeBSD)) then

   set NPack = ( MTU`ifconfig -a | grep mtu | awk '$1 ~ /'$Intf'/ {print $4}' | head -n 1` \
                 RX`$NETSTAT -s |& grep "total packets received" | awk 'BEGIN {a = 0}  {a += $1} END {printf("%d\n", a/(1024.0*1024.0));}'` \
                 TX`$NETSTAT -s |& grep "packets sent from this host" | awk 'BEGIN {a = 0}  {a += $1} END {printf("%d\n", a/(1024.0*1024.0));}'` )

else
   echo "Do not know how to compute on $OS"
   exit(1)
endif

if ($Verbose == TRUE) then
   echo "Raw I/O Statistics: $NPack"
endif

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# PRINT - report findings

@ PckSz = `echo "$NPack[1]" | sed 's/MTU//'`
@ NBRec = `echo "$NPack[2]" | sed 's/RX//'`
@ NBSnd = `echo "$NPack[3]" | sed 's/TX//'`

@ NBRec = `echo "$NBRec $NBR0" | awk '{if ($1 > $2) {printf("%d", $1 - $2);} else {printf("%d", 4096 + $1 - $2);}}'`
@ NBSnd = `echo "$NBSnd $NBS0" | awk '{if ($1 > $2) {printf("%d", $1 - $2);} else {printf("%d", 4096 + $1 - $2);}}'`

if ($Mode == info) then
   echo "NFS Server Info"
   echo "   Name: $SrvN"
   echo "   Address: $SrvI"
   echo "   Network Interface: $Intf"
   echo "   Packet Size: $PckSz bytes"
   echo "   Ave Round Trip Time: $RTdT ms" 
   echo "Data Transfer Info"
   echo "   Sent: $NBSnd MB"
   echo "   Recv: $NBRec MB"
   echo "   Time: $TE" 

else if ($Mode == data) then
   echo "$NBSnd $NBRec $TE"

else if ($Mode == diff) then
   @ TE = `$TIMER -t $TE`
   @ dT = $TE - $T0

   set SRate = `echo "$NBSnd $dT" | awk '{dt = $2 ; if (dt == 0) dt = 1 ; printf("%.2f", $1/dt);}'`
   set RRate = `echo "$NBRec $dT" | awk '{dt = $2 ; if (dt == 0) dt = 1 ; printf("%.2f", $1/dt);}'`

   if ($Quiet == TRUE) then
      echo "$NBSnd $SRate"
      echo "$NBRec $RRate"
      echo "$dT"
   else
      echo "Sent: $NBSnd MB at $SRate MB/sec"
      echo "Recv: $NBRec MB at $RRate MB/sec"
      echo "Time: $dT sec"
   endif
endif

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

exit($status)

