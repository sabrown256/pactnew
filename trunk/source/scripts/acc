#!/bin/csh -f
#
# ACC - abstract compiler wrapper
#     - thicker wrapper than manager/ccomp
#     - rationale:
#     -   1) manage abstract compilation options
#     -      -ag    all debug options
#     -      -aO    all optimize options
#     -      -aprf  all profiling options
#     -      -apre  all pre-processing options
#     -   2) may use special knowledge of buggy compilers
#     -      e.g. pgcc _Pragma handling problem
#
# include "cpyright.h"
#

unalias *

@ err = 0

set base = $0
set base = $base:h
set base = $base:h
setenv PERDB_PATH $base/etc/cfg
if ($?PACT_CC_EXE == 0) then
   source $base/etc/env-pact.csh
endif
unset base

set exe  = $PACT_CC_EXE
set vers = $PACT_CC_VERSION
set comp = $exe:t
set cpp  = ""
set dbg  = FALSE
set opt  = FALSE
set prf  = FALSE
set vrb  = FALSE
set inf  = ""
set pref = ""
set outf = ""

set args = ""
while ($#argv > 0)
   switch ("$1")
      case -ag:
           set dbg = TRUE
           set opt = FALSE
           breaksw
      case -ahelp:
           echo ""
           echo "Usage: acc [-ag] [-ahelp] [-aO] [-apre <file>] [-aprf] [-avrb] -ao <outf> <args>*"
           echo "   ag      compile debuggable"
           echo "   ahelp   this help message"
           echo "   aO      compile optimized"
           echo "   apre    preprocess <file> only"
           echo "   aprf    compile for profiling"
           echo "   avrb    verbose mode"
           echo ""
           exit(1)
           breaksw
      case -aO:
           set dbg = FALSE
           set opt = TRUE
           breaksw
      case -ao:
           shift
           set outf = $1
           breaksw
      case -aprf:
           set prf = TRUE
           breaksw
      case -apre:
           shift
           set pref = $1
           breaksw
      case -avrb:
           set vrb = TRUE
           breaksw
      default:
           if (-f "$1") then
              set inf = ( $inf "$1" )
           else
              set args = ( $args "$1" )
           endif
           breaksw
   endsw
   shift
end

if ("$inf" == "") then
   echo "No input file specified - exiting"
   exit(1)
endif

if (("$outf" == "") && ("$pref" == "")) then
   echo "No output file specified - exiting"
   exit(1)
endif

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# check the compilers database for needed environment variables
# such as license file, directory paths

   set wexe      = `which $comp`
   set compilers = $wexe:h/compilers
   if (-f $compilers) then

      set sys  = `system-id`
      set linf = ( `awk '($2 == "'$comp'") && ($1 == "'$sys'") && ($3 == "'$vers'") {print}' $compilers` )
      if ($#linf < 4) then
         set linf = ( `awk '($2 == "'$comp'") && ($1 == "'$sys'") {print}' $compilers | tail -n 1` )
      endif

      if ($#linf > 4) then
         shift linf
         shift linf
         shift linf
         shift linf

# get other key,value pairs
# useful for setting compiler license variables
         while ($#linf > 1)
            set var = $linf[1]
            set val = $linf[2]
            shift linf
            shift linf
            if ($vrb == TRUE) then
               echo "   setenv $var $val"
            endif
            setenv $var $val
         end
      endif

      unset linf
      unset sys
   endif
   unset wexe
   unset compilers

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

   set bindir = $exe:h
   set path   = ( $bindir $path )
   set action = ""

   if ($?SC_EXEC_N_ATTEMPTS == 1) then
      @ na = $SC_EXEC_N_ATTEMPTS
   else
      @ na = 1
   endif

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# check abstract options

   if ($dbg == TRUE) then
      set linf  = ( `perdb CC_Debug | sed 's|\"||g'` )
      set args = ( $linf $args )
   else if ($opt == TRUE) then
      set linf  = ( `perdb CC_Optimize | sed 's|\"||g'` )
      set args = ( $linf $args )
   endif

   if ($prf == TRUE) then
      set linf  = ( `perdb CC_Profile | sed 's|\"||g'` )
      set args = ( $linf $args )
   endif
   unset linf

   if ("$pref" != "") then
      exec pcpp $args -o $pref $inf
   endif

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

switch ($comp)

# NOTE: newest GNU compilers require this to run because
# for some reason they were not built with -rpath
# this is not for the compiled executables but the compiler
   case gcc:
   case g++:
   case gfortran:
        set root = $exe:h
        set root = $root:h
        if ($?LD_LIBRARY_PATH == 1) then
           setenv LD_LIBRARY_PATH  $root/lib64:$root/lib:${LD_LIBRARY_PATH}
        else
           setenv LD_LIBRARY_PATH  $root/lib64:$root/lib
        endif

        unset root
        breaksw

   case pathcc:
   case pathCC:
   case pathf90:
        set root  = $exe:h
        set root  = $root:h
        set lvers = `ls $root/lib`
        if ($?LD_LIBRARY_PATH == 1) then
           setenv LD_LIBRARY_PATH  $root/lib/${lvers}:$root/lib/${lvers}/32:${LD_LIBRARY_PATH}
        else
           setenv LD_LIBRARY_PATH  $root/lib/${lvers}:$root/lib/${lvers}/32
        endif

        unset root
        breaksw

   case pgcc:
        set pref = $inf:r.int.c
        if ($vrb == TRUE) then
#           echo "   Preprocess: pcpp $args -o $pref $inf"
           echo "   Preprocess: $comp $args -E $inf >&! $pref"
        endif

# try preprocessing until the preprocessed file is at least as big
# as the unpreprocessed file and the exit status is 0
        @ lerr = 1
        @ ia  = 0
        @ nli = `cat $inf | wc -l`
        while ($ia < $na)
           @ ia = $ia + 1
           rm -f $pref
#           pcpp $args -o $pref $inf
           $comp $args -E $inf >&! $pref
           set xstatus = $status
           @ nlp = `cat $pref | wc -l`
           if (($xstatus == 0) && ($nli <= $nlp)) then
              @ lerr = 0
              break
           endif
        end
        if ($lerr == 1) then
           echo "Preprocessing '$inf' failed - exiting"
           exit(1)
        endif

        set inf    = $pref
        set action = ( rm -f $inf )

        breaksw
endsw

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# these are variables which may be used elsewhere
# we are done with them - so unset them
   unsetenv PACT_CC_FAMILY
   unsetenv PACT_CC_VERSION
   unsetenv PACT_CC_PATH

   rm -f $outf
   set cmd = ( $exe $args -o $outf $inf )

# verbose mode diagnostic for debugging
   if ($vrb == TRUE) then
      echo "   Compile: $cmd"
   endif

   if (-x $exe) then
      if ("$action" == "") then
         exec $cmd
      else
         $cmd
         @ err = $status
         $action
      endif
   else
      @ err = 1
      set comp = $0
      set comp = $comp:t
      echo "${comp}: Command not found."
   endif

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

exit($err)

