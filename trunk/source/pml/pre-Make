#
# pre-Makefile for Portable Math Library
#
# Files and Directories
#
# Source Version: 3.0
# Software Release #: LLNL-CODE-422942
#
# include "cpyright.h"
#

LibName=pml

TGTLib = ${LibDir}/lib${LibName}.a
TGTInc = ${Hdrs}

OD = DefaultO

#
# Compiler/Loader Options
#
UniFlags =
CcFlags = ${ODC} -I${IncDir} ${MDInc}
FcFlags =
LdFlags = -L${LibDir} ${LDFLAGS}

CCAnnounce = ${CCompiler} ${ODC} ${CShared} ${CFLAGS}

#
# Files to Save for Backup (pact save)
#
SaveFiles = *.c *.h

#
# Files to remove in directory clean (pact clean)
#
CleanFiles = 

#
# Things upon which install depends (pact install)
#
InstallDep = ${TGTLib} ${BinDir}/mlcsum
BinDep =
BinObj =

#
# Required Libraries
#
Libs = ${LPML} ${LSCORE} ${MDLib}

targets :
	@echo "Targets for PML"
	@echo "   bindings  : make the language bindings"
	@echo "   cgsolv    : make sparse linear CG solvers test"
	@echo "   checksum  : make checksum routines test"
	@echo "   eigen     : make eigen systems tests"
	@echo "   fpe       : make FPE tests"
	@echo "   funcs     : make functions test"
	@echo "   icsolv    : make matrix ICG solvers test"
	@echo "   install   : install PML headers and utilities in dev/arch"
	@echo "   interp    : make interpolation test"
	@echo "   link      : link PML utilities for public use"
	@echo "   lnnorm    : make ln norm test"
	@echo "   lrac      : make LR to AC mapping test"
	@echo "   matrix    : make matrix tests"
	@echo "   perf      : test arithmetic performance"
	@echo "   sharedlib : build and install PML shared libs in dev/arch"
	@echo "   svdsolv   : make SVD solvers test"
	@echo "   topsort   : make topological sort test"
	@echo "   test      : run the PML test suite"

#
# Headers Files
#
Hdrs = pml.h pml_int.h scope_complex.h scope_quaternion.h

#
# Object Files
#
Objs = mlmath.o mlsrch.o mlrand.o mlnls.o mlmatr.o                \
       mlrfnc.o mlcfnc.o mlsfnc.o mlqfnc.o                        \
       mlsolv.o mlsvd.o mlvnd.o mleigen.o                         \
       mlcg.o mliccg.o mlicgs.o                                   \
       mlfft.o mllsq.o mlfpe.o mloper.o mlgeom.o mlsort.o mlmm.o  \
       mlintm.o mlintp.o mlints.o                                 \
       mlchksm.o mlmesh.o mlmsrch.o mlcmsh.o mlmextr.o            \
       mlfia.o mlvect.o mlsmp.o 

ArObjs = ${TGTLib}(mlmath.o)  ${TGTLib}(mlsrch.o)  ${TGTLib}(mlfft.o)   \
         ${TGTLib}(mlmatr.o)  ${TGTLib}(mlsort.o)  ${TGTLib}(mlnls.o)   \
         ${TGTLib}(mlrfnc.o)  ${TGTLib}(mlcfnc.o)  ${TGTLib}(mlsfnc.o)  \
         ${TGTLib}(mlqfnc.o)  ${TGTLib}(mleigen.o)                      \
         ${TGTLib}(mlsolv.o)  ${TGTLib}(mlsvd.o)   ${TGTLib}(mlvnd.o)   \
         ${TGTLib}(mlcg.o)    ${TGTLib}(mliccg.o)  ${TGTLib}(mlicgs.o)  \
         ${TGTLib}(mlintm.o)  ${TGTLib}(mlintp.o)  ${TGTLib}(mlints.o)  \
         ${TGTLib}(mllsq.o)   ${TGTLib}(mlfpe.o)   ${TGTLib}(mloper.o)  \
	 ${TGTLib}(mlgeom.o)  ${TGTLib}(mlrand.o)  ${TGTLib}(mlmm.o)    \
         ${TGTLib}(mlmesh.o)  ${TGTLib}(mlmsrch.o) ${TGTLib}(mlcmsh.o)  \
         ${TGTLib}(mlmextr.o) ${TGTLib}(mlchksm.o) ${TGTLib}(mlfia.o)   \
         ${TGTLib}(mlvect.o)  ${TGTLib}(mlsmp.o)

${LibDep} : ${gobj} ${hdrf} ${Hdrs}

#
# Generated code rules
#

# headers

${IncDir}/mlsrch.h : mlsrch.t
	@(echo "template mlsrch.t -o ${IncDir}/mlsrch.h" ;  \
	  ${BinDir}/template mlsrch.t -o ${IncDir}/mlsrch.h)

hdrf = ${IncDir}/mlsrch.h

IncAction = @pact generate


# extra commands needed when building TGTLib
LibAction = pact patch-fpe

#
# make new test executable
#
matrix : ${BinDir}/mlmtrt

${BinDir}/mlmtrt : mlmtrt.c ${TGTLib}
	${CLD} ${LdFlags} mlmtrt.c -o ${BinDir}/mlmtrt ${Libs}

#
# test functions
#
funcs : ${BinDir}/mlfnts

${BinDir}/mlfnts : mlfnts.c ${TGTLib}
	${CLD} ${LdFlags} mlfnts.c -o ${BinDir}/mlfnts ${Libs}

#
# test LR to AC mapping
#
lrac : ${BinDir}/mlacts

${BinDir}/mlacts : mlacts.c ${TGTLib}
	${CLD} ${LdFlags} mlacts.c -o ${BinDir}/mlacts ${Libs}

#
# test topological sort
#
topsort : ${BinDir}/mlstst

${BinDir}/mlstst : mlstst.c ${TGTLib}
	${CLD} ${LdFlags} mlstst.c -o ${BinDir}/mlstst ${Libs}

#
# test matrix ICG solvers
#
icsolv : ${BinDir}/mlicts ${BinDir}/mlicst ${BinDir}/mlcgts

${BinDir}/mlicts : mlicts.c ${TGTLib}
	${CLD} ${LdFlags} mlicts.c -o ${BinDir}/mlicts ${Libs}

${BinDir}/mlicst : mlicst.c ${TGTLib}
	${CLD} ${LdFlags} mlicst.c -o ${BinDir}/mlicst ${Libs}

#
# test sparse linear CG solvers
#
cgsolv : ${BinDir}/mlcgts

${BinDir}/mlcgts : mlcgts.c ${TGTLib}
	${CLD} ${LdFlags} mlcgts.c -o ${BinDir}/mlcgts ${Libs}

#
# test SVD solvers
#
svdsolv : ${BinDir}/mlsvdt

${BinDir}/mlsvdt : mlsvdt.c ${TGTLib}
	${CLD} ${LdFlags} mlsvdt.c -o ${BinDir}/mlsvdt ${Libs}

#
# test EIGEN systems
#
eigen : ${BinDir}/mlevts

${BinDir}/mlevts : mlevts.c ${TGTLib}
	${CLD} ${LdFlags} mlevts.c -o ${BinDir}/mlevts ${Libs}

#
# test polygon intersection
#
ipoly : ${BinDir}/mlipts

${BinDir}/mlipts : mlipts.c ${TGTLib}
	${CLD} ${LdFlags} mlipts.c -o ${BinDir}/mlipts ${Libs}

#
# test interpolation
#
interp : ${BinDir}/mlitst

${BinDir}/mlitst : mlitst.c ${TGTLib}
	${CLD} ${LdFlags} mlitst.c -o ${BinDir}/mlitst ${Libs}

#
# test ln norm
#
lnnorm : ${BinDir}/mllnnmts

${BinDir}/mllnnmts : mllnnmts.c ${TGTLib}
	${CLD} ${LdFlags} mllnnmts.c -o ${BinDir}/mllnnmts ${Libs}

#
# test checksum routines
#
checksum : ${BinDir}/mlckts ${BinDir}/mlcsum

${BinDir}/mlckts : mlckts.c ${TGTLib}
	${CLD} ${LdFlags} mlckts.c -o ${BinDir}/mlckts ${Libs}

${BinDir}/mlcsum : mlcsum.c ${TGTLib}
	${CLD} ${LdFlags} mlcsum.c -o ${BinDir}/mlcsum ${Libs}

#
# test FPE
#
fpe : ${BinDir}/mlfpets ${BinDir}/mlnants

${BinDir}/mlfpets : mlfpets.c ${TGTLib}
	${CLD} ${LdFlags} mlfpets.c -o ${BinDir}/mlfpets ${Libs}

${BinDir}/mlnants : mlnants.c ${TGTLib}
	${CC} -c mlnants.c -o ${PACTTmpDir}/mlnants.o
	${CLD} ${LdFlags} ${PACTTmpDir}/mlnants.o -o ${BinDir}/mlnants ${Libs}

#
# test performance
#
perf : ${BinDir}/mlpfts ${BinDir}/mlnants

${BinDir}/mlpfts : mlpfts.c ${TGTLib}
	${CLD} ${LdFlags} mlpfts.c -o ${BinDir}/mlpfts ${Libs}

#
# link 
#
link: ${InstallDep}

#
# install 
#
install:
	pact link
	pact incinstall

#
# sharedlib
#
sharedlib:
	pact shared
	pact incinstall

#
# inform
#
inform :
	@rm -f required.objs
	@echo ${Objs} > required.objs

#
# Run the PML test suite
#
test :
	@./mltest

