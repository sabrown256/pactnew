#!/bin/csh -f
#
# SXTEST - test SX
#
# include "cpyright.h"
#

setenv Package sx
setenv Test    ""
set vgdirs = ( scheme pgs score )
source ../scripts/test-env

set Tests = ""

while ($#argv > 0)
   switch ($1)
      case -h:
           echo "Usage: sxtest [-h] [-t #] [-vg] [<test>]*"
           echo "  h       this help message"
           echo "  t       run tests with # threads"
           echo "  vg      run tests under valgrind"
           echo "  <test>  one of: oper hash c99 pdb ptr dattr"
           echo "                  text sqlite xml hdf vif"
           echo "                  pgs axis master exa iply shell copy mesh"
           echo "                  rund intp intp-df intrp ar diff ext"
           echo "                  umaster umem uio"
           echo "                  ufnc ufft ufill"
           echo "                  uannot uenv"
           echo ""
           exit(1)
      case -t:
           shift
           setenv OMP_NUM_THREADS $1
           echo "Running tests with $1 threads"
           breaksw
      case -*:
           breaksw
      default:
           set Tests = ( $Tests $1 )
           breaksw
   endsw
   shift
end

cd $TestDir

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# omit tests - usually in difficult CROSS_COMPILE situation

if ($RUN_TESTS == FALSE) then
   NoteD $Log ""
   NoteD $Log "SX TESTS ... omitted"

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# run the tests

else if (-e $BinDir/sx) then

# NOTE: remove files here so that platforms lacking 'system' might work
   set files = ""
   set files = ( $files ultest.ps.diff ultest.err ultest.tmp )
   set files = ( $files ultest.asc ultest.log )
   set files = ( $files ultest.pdb ultest.pdb.chk )
   set files = ( $files curves.a testt.cgm my.cgm )
   set files = ( $files table1.tmp temp2.tmp ultest1.ps ultest2.ps temp2.tmp )
   set files = ( $files _tmp.dat )

   set files = ( $files sxpdb.res sxpdba.res sxpdbi.res sxhash.res sxpgs.ps )
   set files = ( $files sxpdb.res.diff sxpdba.res.diff sxpdbi.res.diff )
   set files = ( $files sxhash.res.diff sxpgs.ps.diff )

   flog $Log $RM $files

   NoteD $Log ""
   NoteD $Log "SX TEST ..."

   flog $Log pwd

   if ("$Tests" == "") then
# NOTE: tests like ar that depend on demo.d* must come after the
# exa test which creates these files
      set Tests = ""
      set Tests = ( $Tests oper hash c99 )
      set Tests = ( $Tests pdb ptr dattr text sqlite xml hdf vif )
      set Tests = ( $Tests pgs axis iply )
      set Tests = ( $Tests master exa shell copy mesh )
      set Tests = ( $Tests rund intp intp-df intrp ar diff ext )
      set Tests = ( $Tests umaster uio ufnc ufft ufill uaxis uannot uenv )
# GOTCHA: restore memory leak test
#      set Tests = ( $Tests umaster umem uio ufnc ufft ufill uaxis uannot uenv )
   endif

   foreach i ($Tests)
      $SrcDir/tests/$i
      @ nerr = $nerr + $status
   end

   set rpf = ( ultest.ps ultest.log ultest.pdb.chk ulmmt.log ulfft.log )

   $TEST_CHECK clean -n SX -e $nerr -raf "$Tmp" -rpf "$rpf"

   set xstatus = $status

else
   NoteD $Log ""
   NoteD $Log "$BinDir/sx does not exist"
endif

$TEST_CHECK fin -e $xstatus

exit($status)
