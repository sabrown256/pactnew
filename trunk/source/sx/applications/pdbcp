#!/usr/bin/env pdbview
;
; PDBCP - command line PDB file copy utility
;
; Source Version: 3.0
; Software Release #: LLNL-CODE-422942
;
; include "cpyright.h"
;

(load "pdbview.scm")

(define inf #f)
(define outf #f)
(define vars (list '*))

;--------------------------------------------------------------------------
;--------------------------------------------------------------------------

(define (help)
    (printf nil "\n")
    (printf nil "Usage: pdbcp [-cf] [-cmo] [-cv] [-d<#>] [-h] [-rmo] [-v #]\n")
    (printf nil "             [-vfi] [-vfo] <in-file> [<out-file>] [-a <var>*]\n")
    (printf nil "   a    all remaining arguments specify variables to copy\n")
    (printf nil "   cf   activate whole file checksum on output file\n")
    (printf nil "   cmo  make the new file column major order\n")
    (printf nil "        this is a relabelling not a transpose\n")
    (printf nil "   cv   activate per variable checksum on output file\n")
    (printf nil "   d    set the default offset of the new file to <#> (default 0)\n")
    (printf nil "   h    this help message\n")
    (printf nil "   rmo  make the new file row major order (default)\n")
    (printf nil "        this is a relabelling not a transpose\n")
    (printf nil "   v    PDB format version for output (default 3)\n")
    (printf nil "   vfi  verify checksums on input file\n")
    (printf nil "   vfo  verify checksums on output file\n")
    (printf nil "\n")
    (printf nil "Examples:\n")
    (printf nil "   pdbcp -v 2 file1\n")
    (printf nil "         Make a copy of file1 to file.out in format verion 2\n")
    (printf nil "   pdbcp file1 file2 ~ bird cat\n")
    (printf nil "         Make a copy of file1 to file2 and\n")
    (printf nil "         exclude variables bird and cat\n")
    (printf nil "   pdbcp file1 bird cat dog\n")
    (printf nil "         Make a copy of file1 to file.out and\n")
    (printf nil "         include only variables bird, cat, and dog\n")
    (printf nil "\n")

    (quit 1))

;--------------------------------------------------------------------------
;--------------------------------------------------------------------------

(define (process-args v opt)
    (if v
	(let* ((arg (list-ref v 0))
	       (rst (list-tail v 1)))

              (cond ((eqv? arg "-a")
		     (set! vars rst)
		     (set! rst nil))

		    ((eqv? arg "-h")
		     (help))

		    ((or (eqv? arg "-cv")
			 (eqv? arg "-cf")
			 (eqv? arg "-vfi")
			 (eqv? arg "-vfo")
			 (eqv? arg "-rmo")
			 (eqv? arg "-cmo")
			 (eqv? (substring arg 0 2) "-d"))
                     (set! opt (cons arg opt)))

		    ((eqv? arg "-v")
		     (format-version (list-ref rst 0))
		     (set! rst (list-tail rst 1)))

		    ((not inf)
		     (set! inf arg))

		    ((not outf)
		     (set! outf arg)))

	      (process-args rst opt))
	opt))

;--------------------------------------------------------------------------
;--------------------------------------------------------------------------

(define (main v)
  
   (if (not v)
       (help))

   (let* ((opt (process-args v '(-R -w)))
	  (rv  #t))

         (if (not inf)
	     (begin (printf nil "No input file specified\n")
		    (help)))

	 (if (not outf)
	     (set! outf "file.out"))

; open the input file
	 (change-file* inf)

; copy the variables
	 (set! rv (apply cp (append (append opt vars) (list outf))))

	 (not rv)))

;--------------------------------------------------------------------------
;--------------------------------------------------------------------------

(define rv (main argv))

(quit rv)
