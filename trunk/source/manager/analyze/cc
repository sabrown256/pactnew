#!/bin/csh -f
#
# CC - analyze the platform C Compiler
#
# Source Version: 3.0
# Software Release #: LLNL-CODE-422942
#
# include "cpyright.h"
#

set Me = $0
source $Me:h/common

Separator $Log
Note $Log "Analyze: cc"

NoteD $ALog -n "   C Compiler: "
Note $ALog ""

if ($CROSS_COMPILE == "FALSE") then
   Note $ALog "Direct compiling C compiler analysis"
else
   Note $ALog "Cross compiling C compiler analysis"
endif

dbini CXX_Linker    ""
dbini CXX_Flags     ""
dbini CXX_Debug     "-g"
dbini CXX_Optimize  "-O"
dbini CXX_Inc       ""
#SafeEnv CXX_Linker    ""
#SafeEnv CXX_Flags     ""
#SafeEnv CXX_Debug     "-g"
#SafeEnv CXX_Optimize  "-O"
#SafeEnv CXX_Inc       ""

SafeEnv UseLDLibPath ""

# NOTE: we cannot have nothing for CC_Exec
# if nothing is specified try cc
SafeEnv CC_Exe       "cc"

SafeEnv CC_Linker    ""
SafeEnv CC_Flags     ""
SafeEnv CC_Debug     "-g"
SafeEnv CC_Optimize  "-O"
SafeEnv CC_Inc       ""
SafeEnv DP_Inc       ""

set UTime = `timer -r`

setenv AnsiCC     ""

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# remember the requested compiler or at least cc
flog $ALog setenv Save_CC $CC_Exe

set cclst = ""
if ($?CC_Exe == 1) then
   set cclst = ( $cclst $CC_Exe )
endif
if ($?Cfg_CC_Exe == 1) then
   set cclst = ( $cclst $Cfg_CC_Exe )
endif

Note $ALog ""
Note $ALog "Candidate C compilers: $cclst"
Note $ALog ""

# find the available ANSI C compilers
set AnsiCC = ( `../analyze/cc-find $UseLDLibPath $cclst` )

Note $ALog ""
Note $ALog "ANSI C compilers: $AnsiCC"
Note $ALog ""

if ("$AnsiCC" != "") then
   if ($#AnsiCC > 1) then
      NoteD $ALog "$AnsiCC[1] (others $AnsiCC[2-])"
   else
      NoteD $ALog "$AnsiCC"
   endif
else
   NoteD $ALog " none"
   NoteD $ALog "      No ANSI C compiler found, PACT cannot be built without one"
   setenv STOP ""
   SetParent STOP
   exit(0)
endif

# make sure we have a Cfg compiler defined
if ($?Cfg_CC_Exe == 0) then
   flog $ALog setenv Cfg_CC_Exe "$CC_Exe"
endif

# check requested compilers against the list of ANSI compilers
foreach cc ( $CC_Exe $Cfg_CC_Exe)
   set ok = FALSE
   foreach i ($AnsiCC)
      if ($cc == $i) then
         set ok = TRUE
      endif
   end
   if ($ok == FALSE) then
      NoteD $ALog " "
      NoteD $ALog "      Requested compiler $cc is not ANSI by default"
      NoteD $ALog " "
   endif
endif

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

if ($CC_Linker != "") then
   flog $ALog setenv CC_Exe "$CC_Linker"
endif

# make sure we have flags for configuration compiler
if ($?Cfg_CC_Flags == 0) then
   Note $ALog "Initialize Cfg_CC_Flags to be $Cfg_CC_Flags"
   flog $ALog setenv Cfg_CC_Flags "$CC_Flags"
   Note $ALog ""
endif

# remember the requested flags and setup for configuration purposes
SafeEnv Cfg_CC_Inc ""
flog $ALog setenv Save_CFLAGS "$CC_Flags"
Note $ALog ""

if ("$Cfg_CC_Inc" != "") then
   Note $ALog "Add config include flags to CC_Flags: $Cfg_CC_Inc"
   flog $ALog setenv CC_Flags "$CC_Flags $Cfg_CC_Inc"
   Note $ALog ""
endif

SafeEnv Cfg_CC_Flags "$CC_Flags"

# temporarily add debug flags to compiler flags for config
if ($?Cfg_CC_Debug == 1) then
   Note $ALog "Add config debug flags to CC_Flags: $CC_Debug"
   flog $ALog setenv CC_Flags "$CC_Flags $CC_Debug"
   flog $ALog setenv Cfg_CC_Flags "$Cfg_CC_Flags $Cfg_CC_Debug"
   Note $ALog ""
endif

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

if ($CROSS_COMPILE == "FALSE") then
   flog $ALog setenv Cfe_CC_Exe    $Cfg_CC_Exe
   flog $ALog setenv Cfe_CC_Flags  "$Cfg_CC_Flags"
   flog $ALog setenv Cfe_CC_Inc    "$Cfg_CC_Inc"
else
   flog $ALog setenv Cfe_CC_Exe    $CC_Exe
   flog $ALog setenv Cfe_CC_Flags  "$CC_Flags"
   flog $ALog setenv Cfe_CC_Inc    "$CC_Inc"
endif

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# NOTE: properly this is done in analyze/ld but we need to bootstrap
# our way through compiler issues before getting to analyze/ld
# so set this temporary
set lrpath = `../analyze/rpath -o rpath`

# set compile options for characterizing compiler
set ccopt = ""
set ccopt = ( $ccopt $Cfe_CC_Flags $lrpath )

# now lets look at this compiler
if ($Cfg_CC_Exe != "") then

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# COMPILER VERSION - check the compiler version

   Note $ALog ""
   Note $ALog "Check the version of the C compiler"
   Note $ALog "   PATH   = $PATH"
   Note $ALog "   FAMILY = $PACT_CC_FAMILY"
   flog $ALog which $Cfe_CC_Exe

   if ($OS_Name == SunOS) then
      flog $ALog $Cfg_CC_Exe $CC_Version
      flog $ALog set CmpVers = any
      set xstatus = $status
   else if ($PACT_CC_FAMILY == GNU) then
      flog $ALog ( $Cfg_CC_Exe $CC_Version | grep $PACT_CC_VERSION )
      flog $ALog set CmpVers = $PACT_CC_VERSION
      set xstatus = $status
   else if ($PACT_CC_FAMILY == PGI) then
      flog $ALog ( $Cfg_CC_Exe $CC_Version | grep $PACT_CC_VERSION )
      flog $ALog set CmpVers = $PACT_CC_VERSION
      set xstatus = $status
   else if ($PACT_CC_FAMILY == INTEL) then
      flog $ALog ( $Cfg_CC_Exe $CC_Version | grep $PACT_CC_VERSION )
      flog $ALog set CmpVers = $PACT_CC_VERSION
      set xstatus = $status
   else if ($PACT_CC_FAMILY == PATHSCALE) then
      flog $ALog ( $Cfg_CC_Exe $CC_Version | grep $PACT_CC_VERSION )
      flog $ALog set CmpVers = $PACT_CC_VERSION
      set xstatus = $status
   else
      set inf  = ( `$Cfg_CC_Exe $CC_Version |& grep version` )
      set gccv = ( `echo $inf | sed 's/gcc version//'` )
      Note $ALog "Compiler version = $inf"
      Note $ALog "GCC version      = $gccv"
      if ("$gccv" =~ 3.*) then
         set lcfg = ( `echo "$Cfg_CC_Flags" | sed "s| -fsignaling-nans||"` )
         flog $ALog setenv Cfg_CC_Flags "$lcfg"

         set lcfg = ( `echo "$CC_Flags" | sed "s| -fsignaling-nans||"` )
         flog $ALog setenv CC_Flags "$lcfg"

         set lcfg = ( `echo "$Save_CFLAGS" | sed "s| -fsignaling-nans||"` )
         flog $ALog setenv Save_CFLAGS "$lcfg"
      endif
      flog $ALog $Cfg_CC_Exe $CC_Version
      flog $ALog set CmpVers = any
      set xstatus = $status
   endif

   if ($xstatus == 0) then
      NoteD $ALog "      requested version $CmpVers"
   else if (("$CmpVers" != any) && ($STRICT > 0)) then
      NoteD $ALog "      requested version $CmpVers (not found)"
      setenv STOP ""
      SetParent STOP
      exit(0)
   else
      NoteD $ALog "      requested version $CmpVers (not found)"
   endif
   Note $ALog ""

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# FORTRAN INTEGER - check the relative size of Fortran integer and pointer

   Note $ALog "Determine whether a FORTRAN integer can hold a pointer"

   setenv FC_INT_PTR_DIFFER ""

   cat << EOF >! $Tmp.c
#include <stdio.h>
int main(int c, char **v)
{if (sizeof(int) != sizeof(char *))
    printf("FF_INT_SIZE_PTR_DIFFER");
 return(0);}
EOF

   flog $ALog cat $Tmp.c
   flog $ALog $Cfe_CC_Exe $Tmp.c -o $Tmp $ccopt
   if ($status == 0) then
#      flog $ALog $CFE -v ./$Tmp $BE
      setenv FC_INT_PTR_DIFFER `$CFE ./$Tmp $BE`
      if ("$FC_INT_PTR_DIFFER" != "") then
         NoteD $ALog "      pointer size differs from Fortran INTEGER size"
      endif

   else
      NoteD $ALog " "
      NoteD $ALog " "
      NoteD $ALog "One or more flags from:"
      NoteD $ALog "   $Cfe_CC_Flags"
      NoteD $ALog "are incorrect for $Cfe_CC_Exe - failed"
      setenv STOP ""
      SetParent STOP
      exit(0)
   endif
   Note $ALog ""

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# SIZEOF LONG - look at size of long

   Note $ALog "Determine whether long is 64 bits"
   cat << EOF >! $Tmp.c
#include <stdio.h>
int main(int c, char **v)
{if (sizeof(long) == 8)
    printf("LONG64");
 return(0);}
EOF

   flog $ALog cat $Tmp.c
   flog $ALog $Cfe_CC_Exe $Tmp.c -o $Tmp $ccopt
   if ($status == 0) then
      set LONG64 = `$CFE ./$Tmp $BE`
   else
      NoteD $ALog " "
      NoteD $ALog " "
      NoteD $ALog "One or more flags from:"
      NoteD $ALog "   $Cfe_CC_Flags"
      NoteD $ALog "are incorrect for $Cfe_CC_Exe - failed"
      setenv STOP ""
      SetParent STOP
      exit(0)
   endif
   Note $ALog ""

   flog $ALog rm -f $Tmp.c $Tmp $Tmp.o

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# SIZEOF SIZE_T - look at size of size_t

   Note $ALog "Determine whether size_t is 64 bits"
   cat << EOF >! $Tmp.c
#include <stdio.h>
int main(int c, char **v)
{if (sizeof(size_t) != 8)
    printf("TRUE");
 return(0);}
EOF

   flog $ALog cat $Tmp.c
   flog $ALog $Cfe_CC_Exe $Tmp.c -o $Tmp $ccopt
   if ($status == 0) then
      set NEED_ALT_LARGE_FILE = `$CFE ./$Tmp $BE`
   else
      NoteD $ALog " "
      NoteD $ALog " "
      NoteD $ALog "One or more flags from:"
      NoteD $ALog "   $Cfe_CC_Flags"
      NoteD $ALog "are incorrect for $Cfe_CC_Exe - failed"
      setenv STOP ""
      SetParent STOP
      exit(0)
   endif
   Note $ALog ""

   flog $ALog rm -f $Tmp.c $Tmp $Tmp.o

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# OSX ARCH - check for -arch flag

   if ("$OS_Name" == Darwin) then

      Note $ALog "Determine whether -arch flag is needed on GCC/OSX"
      cat << EOF >! $Tmp.c
#include <stdio.h>
int main(int c, char **v)
{int rv;
#ifdef __GNUC__
 printf("ok\n");
 rv = 0;
#else
 printf("ng\n");
 rv = 1;
#endif
 return(rv);}
EOF

      set hw = `uname -m`
      flog $ALog which $Cfe_CC_Exe
      flog $ALog cat $Tmp.c
      flog $ALog $Cfe_CC_Exe -arch $hw $Tmp.c -o $Tmp $ccopt
      if ($status == 0) then
         flog $ALog $Tmp
         if ($status == 0) then
#            setenv CC_Flags     "$CC_Flags -arch $hw"               
#            setenv Cfg_CC_Flags "$Cfg_CC_Flags -arch $hw"               
#            setenv Cfe_CC_Flags "$Cfe_CC_Flags -arch $hw"               
            NoteD $ALog "      adding -arch $hw"
         endif
      endif
      unset hw
      Note $ALog ""

      flog $ALog rm -f $Tmp.c $Tmp $Tmp.o
   endif

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

   set ETime = `timer -b $UTime`

   setenv CList "$AnsiCC"

   Note $ALog ""
   Note $ALog "Results of C compiler analysis ($ETime)"
   Note $ALog "   AnsiCC          = |$AnsiCC|"
   Note $ALog "   CC_Exe          = |$CC_Exe|"
   Note $ALog "   Cfg_CC_Exe      = |$Cfg_CC_Exe|"
   Note $ALog "   FC_INT_PTR_DIFFER  = |$FC_INT_PTR_DIFFER|"
   Note $ALog "   LONG64          = |$LONG64|"
   Note $ALog ""

endif

if ("$CC_Linker" == "") then
   setenv CC_Linker "$CC_Exe"
endif

if ("$CXX_Linker" == "") then
   setenv CXX_Linker "$CXX_Exe"
endif

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# export the results
dbexp Cfg_CC_Exe
dbexp Cfg_CC_Flags
dbexp Cfg_CC_Inc

dbexp CXX_Exe
dbexp CXX_Flags
dbexp CXX_Debug
dbexp CXX_Optimize
dbexp CXX_Linker

dbexp Save_CC
dbexp Save_CFLAGS
dbexp CList

dbexp LONG64
dbexp FC_INT_PTR_DIFFER
dbexp NEED_ALT_LARGE_FILE

#SetParent Cfg_CC_Exe
#SetParent Cfg_CC_Flags
#SetParent Cfg_CC_Inc
#SetParent CXX_Exe
#SetParent CXX_Flags
#SetParent CXX_Debug
#SetParent CXX_Optimize
#SetParent CXX_Linker
#SetParent Save_CC
#SetParent Save_CFLAGS
#SetParent CList
#SetParent LONG64
#SetParent FC_INT_PTR_DIFFER
#SetParent NEED_ALT_LARGE_FILE

SetParent CC_Exe
SetParent CC_Flags
SetParent CC_Debug
SetParent CC_Optimize
SetParent CC_Inc
SetParent CC_Linker
SetParent DP_Inc

SetParent Cfe_CC_Exe
SetParent Cfe_CC_Flags
SetParent Cfe_CC_Inc

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

source $AnaDir/line
source $AnaDir/pragma
source $AnaDir/inline
source $AnaDir/valist
source $AnaDir/float16
source $AnaDir/complex
source $AnaDir/headers
source $AnaDir/glibc
source $AnaDir/size

unset lrpath
unset ccopt

exit(0)

