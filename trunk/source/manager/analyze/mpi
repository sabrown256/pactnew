#!/bin/csh -f
#
# MPI - analyze MPI issues
#
# Source Version: 3.0
# Software Release #: LLNL-CODE-422942
#
# include "cpyright.h"
#

set lme   = $0
set lbase = $lme:h
source $lbase/common

if ($?Log == 1) then
   Separator $Log
   Note $Log "Analyze: mpi"
endif

SafeEnv REQUEST_MPI     FALSE
SafeEnv ParCommSupport  PARC
SafeEnv MPIGoodIO       FALSE
SafeEnv MPIAllStdin     FALSE
SafeEnv HAVE_OPENMPI    FALSE
SafeEnv HAVE_MPI_2      FALSE
SafeEnv DP_Lib          ""
SafeEnv DP_Inc          ""
SafeEnv DP_Lib          ""
SafeEnv DP_RPath        ""
SafeEnv MD_Pck          ""

# NOTE: because locate-mpi ends up getting DP_RPath on your RPATH
# before feature/mpi is invoked you can end up with MPI
# libary paths in your link line for non-MPI builds
# so if feature/mpi is not invoked remove DP_RPath from RPATH
if ($REQUEST_MPI == FALSE) then
   ../analyze/rpath -d $DP_RPath
endif

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# MPI Include

set lParComm = ""

Note $ALog "DP_Inc = $DP_Inc"

foreach j ($DP_Inc $RootInc)
   set k = `echo $j | sed 's/-I//g'`
   Note $ALog "Looking for include directory $k"

# check for <path>/<pkg>/<pkg>.h form
   set GotIt = FALSE
   if (-f "$k/mpi/mpi.h") then
      flog $ALog set GotIt = TRUE
      Note $ALog "   have $k/mpi/mpi.h"
   else if (-f "$k/mpi.h") then
      flog $ALog set GotIt = TRUE
      Note $ALog "   have $k/mpi.h"
   endif

# check for <path>/<pkg>/<pkg>.h form
   if ($GotIt == TRUE) then
      flog $ALog set lParComm = ( mpi $lParComm )
      if ("$ParCommSupport" == "") then
         set ParCommSupport = `echo mpi | tr "[a-z]" "[A-Z]"`
      endif
      break
   endif
end

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# MPI Library

if ($?DP_RPath == 0) then
   set lroot = /usr
   source $lbase/common-lib64
   unset lroot
   setenv DP_RPath /usr/$LibT
endif

set lrpath = `../analyze/rpath -o rpath`

Note $ALog "DP_RPath = $DP_RPath"
Note $ALog "lParComm = $lParComm"
Note $ALog "lrpath   = $lrpath"

if ("$lParComm" =~ *mpi*) then

   set llib = ""
   foreach i ($DP_RPath)
      set llib = ( $llib -L$i )
   end
   setenv lLib   "$llib $DP_Lib"

   set UTime = `timer -r`

   cat << EOF >! $Tmp.c
#include <stdio.h>
#include <mpi.h>
#define MAXLINE 255
int main(int c, char **v)
   {int rnk, sz;
    char s[MAXLINE];
    char *p;
    MPI_Init(&c, &v);
    MPI_Comm_rank(MPI_COMM_WORLD, &rnk);
    MPI_Comm_size(MPI_COMM_WORLD, &sz);
    p = fgets(s, MAXLINE, stdin);
    if (p != NULL)
       printf("Proc %d : %s\n", rnk, s);
    MPI_Finalize();
    return(0);}
EOF

# NOTE: we have so far gone to extraordinary lengths to avoid using
# the compiler requested in the config file during configuration
# this is mainly to avoid MPI complications
# but here we really need an MPI compiler so use the Save_CC
# which was the one requested in the configs

   Note $ALog "Save_CC  = $Save_CC"
   Note $ALog "CC_Flags = $CC_Flags"
   Note $ALog "LD_Flags = $LD_Flags"
   Note $ALog "DP_Inc   = $DP_Inc"
   Note $ALog "DP_Lib   = $DP_Lib"
   Note $ALog "lLib     = $lLib"

   flog $ALog cat $Tmp.c

   set opt = ""
   set opt = ( $opt $CC_Flags $DP_Inc )
   set opt = ( $opt $LD_Flags $lrpath )
   set opt = ( $opt $lLib )
   flog $ALog $Save_CC $Tmp.c -o $Tmp $opt
   if ($status != 0) then
      set lParComm = "no"
      setenv DP_Lib    ""
      setenv DP_Lib    ""
   else
      flog $ALog ldd $Tmp

      flog $ALog $PFE -dr -v -p 2 $Tmp $BE
      echo "a" | $PFE -v -p 2 $Tmp $BE >&! $Tmp.res
      set LStat = $status
      if ($LStat == 0) then
         @ NOut = `grep "Proc" $Tmp.res |& wc -l`
         if ($NOut > 1) then
            setenv MPIAllStdin TRUE
            set MPIStdIO = "all processes"
         else
            set MPIStdIO = "one process"
         endif
      else
         set MPIStdIO = "one process (assumed)"
      endif
      Note $ALog "MPIStdIO = |$MPIStdIO|"
   endif

   flog $ALog rm -f $Tmp $Tmp.c $Tmp.res

   set ETime = `timer -b $UTime`

endif

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# MPI II

set vrs = ""

if ("$lParComm" =~ *mpi*) then

# test compile program with MPI 2 calls

   cat << EOF >! $Tmp.c
#include <stdio.h>
#include <mpi.h>
#define MAXLINE 255
int main(int c, char **v)
   {printf("%d.%d\n", MPI_VERSION, MPI_SUBVERSION);
    return(0);}
EOF

   flog $ALog cat $Tmp.c

   set opt = ""
   set opt = ( $opt $CC_Flags $DP_Inc )
   set opt = ( $opt $LD_Flags $lrpath )
   set opt = ( $opt $lLib )
   flog $ALog $Save_CC $Tmp.c -o $Tmp $opt
   if ($status == 0) then
      set vrs = ( `$PFE $Tmp` )
      if ("$vrs" =~ 2.*) then
         setenv HAVE_MPI_2 TRUE
      endif
   endif

   flog $ALog rm -f $Tmp $Tmp.c

endif

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

Note $ALog "lParComm    = |$lParComm|"
Note $ALog "REQUEST_MPI = |$REQUEST_MPI|"

if (("$lParComm" == no) || ($REQUEST_MPI == FALSE)) then
   setenv DP_Lib    ""
   setenv DP_Inc    ""
   setenv DP_Lib    ""
   setenv DP_RPath  ""
   NoteD $ALog "      no MPI"

else if (("$lParComm" != "") && ($REQUEST_MPI == TRUE)) then
   if ($HAVE_MPI_2 == TRUE) then
      NoteD $ALog "      has MPI 2 ($vrs)"
   else
      NoteD $ALog "      has MPI ($vrs)"
   endif
   NoteD $ALog "         $DP_Lib"
   NoteD $ALog "         stdin $MPIStdIO"
   flog $ALog setenv MD_Pck   "DP $MD_Pck"

else
   setenv DP_Lib    ""
   setenv DP_Inc    ""
   setenv DP_Lib    ""
   setenv DP_RPath  ""
   NoteD $ALog "      no MPI (by request)"
endif

flog $ALog setenv ParComm "$lParComm"

# export the results
SetParent ParCommSupport
SetParent MPIAllStdin
SetParent MPIGoodIO
SetParent HAVE_OPENMPI
SetParent HAVE_MPI_2
SetParent DP_Lib
SetParent DP_Inc
SetParent DP_Lib
SetParent DP_RPath
SetParent MD_Pck

exit(0)

