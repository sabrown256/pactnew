#!/bin/csh -f
#
# CSTD - analyze the C Standard to which CC adheres
#
# Source Version: 3.0
# Software Release #: LLNL-CODE-422942
#
# include "cpyright.h"
#

unalias *

unsetenv cc

set cc     = ""
set cflags = ""
set log    = /dev/null

while ($#argv > 0)
   switch ($1)
      case -h:
           echo ""
           echo "Usage: cstd [-h] [-l] <cc> <cflags>"
           echo ""
           exit(1)
      case -l:
           set log = $cwd/log.cstd
           rm -f $log
           touch $log
           breaksw
      default:
           if ("$cc" == "") then
              set cc = $1
           else
              set cflags = ( $cflags $1 )
           endif
           breaksw
   endsw
   shift
end

set tmp = $cwd/tmp-std

set cc = `which $cc`
if (-x "$cc") then

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# STANDARDS - check standard feature constants

   cat >&! $tmp.c << EOF
#include <stdlib.h>
#include <stdio.h>
#include <complex.h>
/* #include <threads.h> */
int main(int c, char **v)
   {
    printf("   __STDC_VERSION__         : ");
#if defined(__STDC_VERSION__)
     printf("yes (%ld)\n", __STDC_VERSION__);
#else
     printf("no\n");
#endif
    printf("   __STDC_UTF_16__          : ");
#if defined(__STDC_UTF_16__)
     printf("yes (has UTF-16 char16_t type)\n");
#else
     printf("no\n");
#endif
    printf("   __STDC_UTF_32__          : ");
#if defined(__STDC_UTF_32__)
     printf("yes (has UTF-32 char32_t type)\n");
#else
     printf("no\n");
#endif
    printf("   __STDC_IEC_559__         : ");
#if defined(__STDC_IEC_559__)
     printf("yes\n");
#else
     printf("no\n");
#endif
    printf("   __STDC_IEC_559_COMPLEX__ : ");
#if defined(__STDC_IEC_559_COMPLEX__)
     printf("yes\n");
#else
     printf("no\n");
#endif
    printf("   __STDC_NO_COMPLEX__      : ");
#if defined(__STDC_NO_COMPLEX__)
     printf("yes\n");
#else
     printf("no (may support complex types)\n");
#endif
    printf("   __STDC_NO_VLA__          : ");
#if defined(__STDC_NO_VLA__)
     printf("yes\n");
#else
     printf("no (may support variable length arrays)\n");
#endif
    printf("   __STDC_NO_THREADS__      : ");
#if defined(__STDC_NO_THREADS__)
     printf("yes\n");
#else
     printf("no (may support threads)\n");
#endif
    printf("   __STDC_NO_ATOMICS__      : ");
#if defined(__STDC_NO_ATOMICS__)
     printf("yes\n");
#else
     printf("no (may support atomic types)\n");
#endif

    printf("   __STDC_ANALYZABLE__      : ");
#if defined(__STDC_ANALYZABLE__)
     printf("yes (supports analyzability)\n");
#else
     printf("no\n");
#endif
    printf("   __STDC_LIB_EXT1__        : ");
#if defined(__STDC_LIB_EXT1__)
     printf("yes (supports bounds checking)\n");
#else
     printf("no\n");
#endif

    return(0);}
EOF

   echo "------------------------------" >>& $log
   echo "Predefined constants" >>& $log
   $cc $cflags $tmp.c -o $tmp >>& $log
   if ($status != 0) then
      echo "Compilation '$cc $cflags' not C11 - exiting"
      exit(1)
   else
      echo "Standard optional feature constants:"
      $tmp
   endif
   rm -f $tmp $tmp.c

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

echo "Standard mandatory features:"

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# ALIGNMENT - specifications:
#           -   _Alignas specifier
#           -   alignof
#           -   aligned_alloc
#           - see <stdalign.h>

   cat >&! $tmp.c << EOF
#include <stdlib.h>
#include <stdio.h>
#include <stdalign.h>
int main(int c, char **v)
   {void *p;
    p = aligned_alloc(0, 8);
    return(0);}
EOF

   echo "------------------------------" >>& $log
   echo "Alignment" >>& $log
   $cc $cflags $tmp.c -o $tmp >>& $log
   if ($status == 0) then
      echo "   has alignment"
      $tmp
   else
      echo "   no alignment"
   endif
   rm -f $tmp $tmp.c

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# NORETURN - the _Noreturn function specifier

   cat >&! $tmp.c << EOF
#include <stdlib.h>
#include <stdio.h>
_Noreturn void foo(void) { while (1) sleep(1); }
int main(int c, char **v)
   {
    foo();
    return(0);}
EOF

   echo "------------------------------" >>& $log
   echo "Noreturn" >>& $log
   $cc $cflags $tmp.c -o $tmp >>& $log
   if ($status == 0) then
      echo "   has _Noreturn"
   else
      echo "   no _Noreturn"
   endif
   rm -f $tmp $tmp.c

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# GENERIC - generic expressions using the _Generic keyword
#         - example:
#         -
#         - #define foo(X) _Generic((X), long double: fool,      \
#                                   default: foo,                \
#                                   float: foof)(X)
# 

   cat >&! $tmp.c << EOF
#include <stdlib.h>
#include <stdio.h>
#define foo(x)                                               \
   _Generic((x),                                             \
            int: fooi,                                       \
            float: foof,                                     \
            default: fool)(x)
int fooi(int i) {return(i);}
int fool(long l) {return((int) l);}
int foof(float f) {return((int) f);}
int main(int c, char **v)
   {int i, rv;
    float f;
    rv = foo(0);
    rv = foo(0.1);
    return(0);}
EOF

   echo "------------------------------" >>& $log
   echo "Generic" >>& $log
   $cc $cflags $tmp.c -o $tmp >>& $log
   if ($status == 0) then
      echo "   has _Generic"
      $tmp
   else
      echo "   no _Generic"
   endif
   rm -f $tmp $tmp.c

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# UNICODE - Unicode support
#         - char16_t and char32_t types for storing UTF-16/UTF-32
#         - see <uchar.h>
#         - u, U, and u8 prefixes for string literals

   cat >&! $tmp.c << EOF
#include <stdlib.h>
#include <stdio.h>
#include <uchar.h>
int main(int c, char **v)
   {char16_t sa;
    char32_t sb;
    char *sc = u8"foo";
    char16_t *sd = u"bar";
    char32_t *se = U"baz";
    return(0);}
EOF

   echo "------------------------------" >>& $log
   echo "Unicode" >>& $log
   $cc $cflags $tmp.c -o $tmp >>& $log
   if ($status == 0) then
      echo "   has unicode types"
      $tmp
   else
      echo "   no unicode types"
   endif
   rm -f $tmp $tmp.c

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# ANONYMOUS - anonymous structures and unions
#           - for example:
#           -   struct T { int tag; union { float x; int n; }; };

   cat >&! $tmp.c << EOF
#include <stdlib.h>
#include <stdio.h>
typedef struct s_foo foo;
struct s_foo
      {int tag;
       union {float x;
              int n;};};
int main(int c, char **v)
   {foo a;
    a.n = 1;
    a.x = 2.0;
    return(0);}
EOF

   echo "------------------------------" >>& $log
   echo "Anonymous" >>& $log
   $cc $cflags $tmp.c -o $tmp >>& $log
   if ($status == 0) then
      echo "   has anonymous structs/unions"
      $tmp
   else
      echo "   no anonymous structs/unions"
   endif
   rm -f $tmp $tmp.c

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# ASSERTIONS - static assertions evaluated later than #if and #error
#            - when types are understood by the translator

   cat >&! $tmp.c << EOF
#include <stdlib.h>
#include <stdio.h>
_Static_assert(sizeof(size_t) >= 8, "size_t < 8 bytes");
_Static_assert(sizeof(void *) == sizeof(void(*)()), "pointers missized");
int main(int c, char **v)
   {
    return(0);}
EOF

   echo "------------------------------" >>& $log
   echo "Static Asserstions" >>& $log
   $cc $cflags $tmp.c -o $tmp >>& $log
   if ($status == 0) then
      echo "   has static assertions"
      $tmp
   else
      echo "   no static assertions"
   endif
   rm -f $tmp $tmp.c

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# FP-MACROS - macros for querying the characteristics of FP types:
#           -   subnormal floating point numbers
#           -   number of decimal digits for the type

   cat >&! $tmp.c << EOF
#include <stdlib.h>
#include <stdio.h>
#include <float.h>
int main(int c, char **v)
   {int x, y, z;
    x = DBL_MANT_DIG;
    y = DBL_TRUE_MIN;
    z = DBL_HAS_SUBNORM;
    return(0);}
EOF

   echo "------------------------------" >>& $log
   echo "FP Macros" >>& $log
   $cc $cflags $tmp.c -o $tmp >>& $log
   if ($status == 0) then
      echo "   has floating point macros"
#      $tmp
   else
      echo "   no floating point macros"
   endif
   rm -f $tmp $tmp.c

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# OPEN-X - exclusive create-and-open mode, "x", for fopen
#        - like O_CREAT|O_EXCL in POSIX

   cat >&! $tmp.c << EOF
#include <stdlib.h>
#include <stdio.h>
void foo(void) {return;}
int main(int c, char **v)
   {FILE *fp;
    fp = fopen("fu.bar", "x");
    fclose(fp);
    return(0);}
EOF

   echo "------------------------------" >>& $log
   echo "FOPEN X" >>& $log
   $cc $cflags $tmp.c -o $tmp >>& $log
   if ($status == 0) then
      echo "   has fopen x mode"
#      $tmp
   else
      echo "   no fopen x mode"
   endif
   rm -f $tmp $tmp.c

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# EXIT - quick_exit function
#      - a third way to terminate a program
#      - intended to do at least minimal cleanup if exit fails

   cat >&! $tmp.c << EOF
#include <stdlib.h>
#include <stdio.h>
void foo(void) {return;}
int main(int c, char **v)
   {
    at_quick_exit(foo);
    quick_exit(0);
    return(0);}
EOF

   echo "------------------------------" >>& $log
   echo "Quick Exit" >>& $log
   $cc $cflags $tmp.c -o $tmp >>& $log
   if ($status == 0) then
      echo "   has quick_exit"
      $tmp
   else
      echo "   no quick_exit"
   endif
   rm -f $tmp $tmp.c

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# COMPLEX - macros for the construction of complex values
#         - partly because rp + ip*I might be bad ip is Inf or Nan

   cat >&! $tmp.c << EOF
#include <stdlib.h>
#include <stdio.h>
#include <complex.h>
int main(int c, char **v)
   {double complex foo = CMPLX(1.0, 2.0);
    return(0);}
EOF

   echo "------------------------------" >>& $log
   echo "Complex" >>& $log
   $cc $cflags $tmp.c -o $tmp >>& $log
   if ($status == 0) then
      echo "   has complex constructors"
      $tmp
   else
      echo "   no complex constructors"
   endif
   rm -f $tmp $tmp.c

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# THREADS - multithreading support:
#         - _Thread_local storage-class specifier
#         - thread creation/management functions
#         - mutex, condition variable, and thread-specific storage
#         - see <threads.h>

   cat >&! $tmp.c << EOF
#include <stdlib.h>
#include <stdio.h>
#include <threads.h>
int main(int c, char **v)
   {
    return(0);}
EOF

   echo "------------------------------" >>& $log
   echo "Threads" >>& $log
   $cc $cflags $tmp.c -o $tmp >>& $log
   if ($status == 0) then
      echo "   has thread"
      $tmp
   else
      echo "   no thread"
   endif
   rm -f $tmp $tmp.c

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# ATOMIC - _Atomic type qualifier for uninterruptible object access
#        - see <stdatomic.h>

   cat >&! $tmp.c << EOF
#include <stdlib.h>
#include <stdio.h>
#include <stdatomic.h>
int main(int c, char **v)
   {
    return(0);}
EOF

   echo "------------------------------" >>& $log
   echo "Atomic" >>& $log
   $cc $cflags $tmp.c -o $tmp >>& $log
   if ($status == 0) then
      echo "   has atomic"
      $tmp
   else
      echo "   no atomic"
   endif
   rm -f $tmp $tmp.c

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# BOUNDS-CHECKING - Annex K

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# ANALYZABILITY - Annex L

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

endif

exit($status)
