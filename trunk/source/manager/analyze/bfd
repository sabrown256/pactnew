#!/bin/csh -f
#
# BFD - analyze platform exe format access support
#     - Computes: HAVE_BFD, HAVE_DEMANGLE, MDE_Lib
#
# Source Version: 3.0
# Software Release #: LLNL-CODE-422942
#
# include "cpyright.h"
#

set Me = $0
source $Me:h/common

Separator $ALog
Note $ALog "Analyze: exe access support"

dbget LIB

dbmget $ALog CC_Exe         =\? cc^         \
             CC_Flags       =\? ""^         \
             MDE_Lib        =\? ""^         \
             BFD_Lib        =\? -lbfd^      \
             BFD_Path       =\? /usr/$LIB^  \
             BFD_Version    =\? 0.0.0^      \
             HAVE_BFD       =\? FALSE^      \
             HAVE_DEMANGLE  =\? FALSE^      \
             BFD_SO         =\? ""^         \
             Linking

# if we have explicitly said we do not want BFD
# do NOT detect it
if ("$BFD_Path" == none) then
   NoteD $ALog "      no bfd (by request)"

else

# try to find a usable libbfd
   if ("$BFD_Path" == "") then
      set ldir = ( `../analyze/rpath -o list` )
      Note $ALog "Searching for libbfd in:"
      Note $ALog "   $ldir"
      foreach d ($ldir)
         fexvars $ALog t ls $d/libbfd*.so $d/libbfd*.la $d/libbfd*
         if ("$t" != "") then
            set lbfd = $t[1]
            if (-f $lbfd) then
               flog $ALog setenv BFD_Path $d
               flog $ALog setenv BFD_Lib $lbfd
               break
            endif
         endif
      end
      unset t
      unset ldir
      unset lbfd
   endif

   if ("$BFD_Path" == "") then
      flog $ALog setenv BFD_Path /usr/$LIB
      flog $ALog setenv BFD_Lib  $BFD_Path/libbfd.a
   endif

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# BFD

   cat << EOF >! $Tmp.c
#include <stdlib.h>
#include <bfd.h>
int main(int c, char **v)
   {int rv;
    unsigned int ln;
    const char *fl, *fn;
    bfd *et;
    et = bfd_openr(v[0], NULL);
    rv = (et == NULL);
    if (rv != 0)
       bfd_find_inliner_info(et, &fl, &fn, &ln);
    bfd_close(et);
    return(rv);}
EOF

   flog $ALog cat $Tmp.c

   set libs = ""

# try building without $BFD_Lib
   set ok = FALSE
   flog $ALog $CC_Exe $Tmp.c -o $Tmp $CC_Flags
   if ($status == 0) then
      flog $ALog $Tmp
      if ($status == 0) then
         set ok = TRUE
      endif
   endif

# try building with $BFD_Lib
   if ($ok == FALSE) then
      flog $ALog $CC_Exe $Tmp.c -o $Tmp $CC_Flags $BFD_Lib
      if ($status == 0) then
         flog $ALog $Tmp
         if ($status == 0) then
            set libs = ( $libs $BFD_Lib )
            set ok   = NEED
         endif
      endif
   endif

# try building with $BFD_Lib and -liberty
   if ($ok == FALSE) then
      flog $ALog $CC_Exe $Tmp.c -o $Tmp $CC_Flags $BFD_Lib -liberty
      if ($status == 0) then
         flog $ALog $Tmp
         if ($status == 0) then
            set libs = ( $libs $BFD_Lib -liberty )
            set ok   = NEED
         endif
      endif
   endif

# check for static vs dynamic linking
   fexvars $ALog t ldd $Tmp @b grep libbfd
   if ($#t > 2) then
      set lSO = $t[3];
      Note $ALog "Shared library for libbfd: |$lSO|"
   endif
   unset t

   flog $ALog rm -f $Tmp.c $Tmp

   if ($ok == FALSE) then
      NoteD $ALog "      no bfd"
   else
      flog $ALog ls -l $BFD_Path/libbfd*.so
      if ($status == 0) then
         foreach i ($BFD_Path/libbfd*.so)
            set l = $i:t
            set t = ( `echo $l:r | sed 's/-/ /g'` )
            if ($#t > 1) then
               Note $ALog "t = ($#t) |$t|"
               flog $ALog setenv BFD_Version  $t[2]
               break
            endif
         end      
         unset t
      endif

      NoteD $ALog "      has bfd ($BFD_Version)"

      if (($Linking == dynamic) && ($?lSO == 1)) then
         setenv BFD_SO    $lSO
      else
         flog $ALog setenv MDE_Lib "$MDE_Lib $libs"
      endif
      flog $ALog setenv HAVE_BFD TRUE
   endif

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# DEMANGLE

   cat << EOF >! $Tmp.c
#include <stdlib.h>
#include <demangle.h>
int main(int c, char **v)
   {int f, rv;
    enum demangling_styles s;
    f  = (DMGL_ANSI | DMGL_PARAMS);
    s  = cplus_demangle_name_to_style(v[1]);
    cplus_demangle_set_style(s);
    rv = (f == 0);
    return(rv);}
EOF

   flog $ALog cat $Tmp.c

   set libs = ""

# try building
   set ok = FALSE
   flog $ALog $CC_Exe $Tmp.c -o $Tmp $CC_Flags
   if ($status == 0) then
      NoteD $ALog "      has demangle.h"
      setenv HAVE_DEMANGLE TRUE
   else
      NoteD $ALog "      no demangle.h"
   endif

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

endif

dbmset $ALog CC_Exe        = $CC_Exe^           \
             BFD_Version   = $BFD_Version^      \
             BFD_Lib       = $BFD_Lib^          \
             BFD_Path      = $BFD_Path^         \
             MDE_Lib       = $MDE_Lib^          \
             HAVE_BFD      = $HAVE_BFD^         \
             HAVE_DEMANGLE = $HAVE_DEMANGLE^    \
             BFD_SO        = $BFD_SO

Separator $ALog

exit(0)

