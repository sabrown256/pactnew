#
# PROGRAM-INIT - define PACT wide variables and give them default values
#
# Source Version: 3.0
# Software Release #: LLNL-CODE-422942
#
# include "cpyright.h"
#

run analyze/default-bits

# include PACT libraries in RPATH for the memory manager interposers
run analyze/rpath -i init

# dynamically link dependent libraries by default
include features/dld

setenv TEST_ADVISORY     ""

# GOTCHA: temporarily pass the spec test
#setenv TEST_ADVISORY     "psh_gexec_spec"

setenv ENV_VARS "RUN_SIGNATURE_DB SITE_SIGNATURE_DB \
                 SYS_SITE SYS_TYPE DAI_ROOT DAS_ROOT \
                 Bits OS_Name \
                 CC_Exe CC_Flags \
                 CC_Debug_Default CC_Optimize_Default \
                 Cfg_CC_Exe Cfg_CC_Flags Cfg_CC_Inc \
                 CXX_Exe CXX_Flags CXX_Linker \
                 FC_Exe FC_Flags \
                 FC_Debug_Default FC_Optimize_Default \
                 DP_Inc DP_Lib DP_RPath DP_Path \
                 LIB LibM_Lib LibM_RPath \
                 MDG_Inc MDG_Lib MDG_RPath MDG_Path \
                 PACT_CC_FAMILY PACT_CC_VERSION PACT_CC_PATH PACT_CC_EXE \
                 PACT_FC_FAMILY PACT_FC_VERSION PACT_FC_PATH PACT_FC_EXE \
                 PY_Inc PY_Lib PY_RPath PY_Path \
                 TRACKER_Exe HAVE_PYTHON HAVE_OPENMP \
                 CFE PFE CROSS_COMPILE"

# setenv ENV_VARS ""
# setenv ENV_VARS ${ENV_VARS}:RUN_SIGNATURE_DB:SITE_SIGNATURE_DB
# setenv ENV_VARS ${ENV_VARS}:SYS_SITE:SYS_TYPE:DAI_ROOT:DAS_ROOT
# setenv ENV_VARS ${ENV_VARS}:Bits:OS_Name
# setenv ENV_VARS ${ENV_VARS}:CC_Exe:CC_Flags
# setenv ENV_VARS ${ENV_VARS}:CC_Debug_Default:CC_Optimize_Default
# setenv ENV_VARS ${ENV_VARS}:Cfg_CC_Exe:Cfg_CC_Flags:Cfg_CC_Inc
# setenv ENV_VARS ${ENV_VARS}:CXX_Exe:CXX_Flags:CXX_Linker
# setenv ENV_VARS ${ENV_VARS}:FC_Exe:FC_Flags
# setenv ENV_VARS ${ENV_VARS}:FC_Debug_Default:FC_Optimize_Default
# setenv ENV_VARS ${ENV_VARS}:DP_Inc:DP_Lib:DP_RPath:DP_Path
# setenv ENV_VARS ${ENV_VARS}:LIB:LibM_Lib:LibM_RPath
# setenv ENV_VARS ${ENV_VARS}:MDG_Inc:MDG_Lib:MDG_RPath:MDG_Path
# setenv ENV_VARS ${ENV_VARS}:PACT_CC_FAMILY:PACT_CC_VERSION:PACT_CC_PATH:PACT_CC_EXE
# setenv ENV_VARS ${ENV_VARS}:PACT_FC_FAMILY:PACT_FC_VERSION:PACT_FC_PATH:PACT_FC_EXE
# setenv ENV_VARS ${ENV_VARS}:PY_Inc:PY_Lib:PY_RPath:PY_Path
# setenv ENV_VARS ${ENV_VARS}:TRACKER_Exe:HAVE_PYTHON:HAVE_OPENMP
# setenv ENV_VARS ${ENV_VARS}:CFE:PFE:CROSS_COMPILE

setenv DO_RUN_DBG        none
setenv DO_RUN_MPI        none
setenv DO_RUN_CROSS      none

# GOTCHA: this root may be different for CROSS_COMPILE
# need script to figure out root includes for given compiler
setenv RootInc  /usr/include
setenv RootLib  /usr/lib

setenv SUFFIXES  '.i'

# PACT_CC_ refers to the Compiler Collection used to build PACT
# rather than COMPILER_ which is overloaded to the extreme
PACT_CC_FAMILY   = generic
PACT_CC_EXE      = `which cc`
PACT_CC_VERSION  = ""
PACT_FC_FAMILY   = generic
PACT_FC_VERSION  = ""
C_STD            = X99
LIB              = lib
MAKE_Shared_Libs = FALSE
FilterDir        =
WARN_PATTERN     =
ERR_PATTERN      =
SchemeSpokes     = netcdf
CSpokes          =
ThreadLibExt     =
F90_MOD_FLAG     = -I
PTHREAD_POSIX    = FALSE

Tool LD {
   SpokeDepLib =
}

Group Shared {
   CC_Flags =
   CC_Inc   =
   LD_RPath =
   LD_Flags =
   LD_Lib   =
}

# define some groups for analysis

# specifications for FPE patching
Group FPE {
   Exe    = gcc
   Flags  = -g -Wall
   Flags += -fPIC
}

# machine dependent graphics for PGS - e.g. X11
Group MDG {
   Inc   = ""
   Lib   = ""
   Pck   = ""
}

# machine dependent I/O for PDB - e.g. SQL
Group MDI {
   Inc   = ""
   Lib   = ""
   Pck   = ""
}

# machine dependent executable access - e.g. BFD
Group MDE {
   Inc   = ""
   Lib   = ""
   Pck   = ""
}

# other machine dependent packages for PACT - e.g. RL
Group MD {
   Inc   = ""
   Lib   = ""
   Pck   = ""
}

# Open MP group
Group OpenMP {
   SharedFnc = no
}

# distributed processing group
Group DP {
   Inc   = ""
   Lib   = ""
   RPath = /usr/lib
   Path  = /usr/bin
}

Group Z {
}

Group PNG {
}

Group JPEG {
}

Group X11 {
}

Group OGL {
}

Group QD {
}

Group SQL {
}

Group HDF {
   Inc   = 
   Lib   = 
   RPath = 
   Path  = 
}

Group BFD {
   Flags = 
   Inc   =
   Lib   = -lbfd
   RPath = 
   Path  = 
}

