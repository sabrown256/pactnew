#
# GNU - define GNU compiler
#
# Source Version: 3.0
# Software Release #: LLNL-CODE-422942
#
# include "cpyright.h"
#

run analyze/rpath gnu

Group OCV {
   CC      ?= gcc
   CXX     ?= g++
   FC      ?= gfortran
   LD      ?= 
   CC_Cfg  ?= gcc
   FC_Cfg  ?= gfortran
   FC_Ext  ?= 
   CC_Sh   ?= -fPIC
   OMP_Lib ?= -lgomp
   StackP  ?= [ _env_ = PACT_CC_VERSION ;      # stack checking
               4.2.* >= -fstack-protector -Wl,-z,relro -Wl,-z,now ]
}

Tool CC {
   Exe       = ${OCV_CC}
   Flags     = -pipe -ffloat-store
   Flags    =+ [ _env_ = STD_C ;                # C standard flags
                 C89   = -std=c89 ;
                 C99   = -std=c99 ;
                 C11   = -std=c11 ;
                 X89   = -std=gnu89 ;           # gcc default
                 X99   = -std=gnu99 ;
                 X11   = -std=gnu11 ]
   Flags    =+ [ _env_ = PACT_CC_VERSION ;      # compiler version flags
                 4.*   = -fsignaling-nans ]
   Flags    =+ [ _env_ = PACT_CC_VERSION ;      # pragma warning flags
                 4.*  >= -Wno-unknown-pragmas ]
   Flags    =+ [ _env_ = PACT_CC_VERSION ;      # unused return value
                 4.4.* > -Wunused-result ]
#   Flags    =+ [ _env_ = PACT_CC_VERSION ;      # memory checks
#                 4.9.* >= -fsanitize=address ]
   Flags    =+ [ _env_ = PACT_CC_VERSION ;      # thread checks
                 4.8.* >= -fsanitize=thread -pie ]
   Flags    =+ -Wl,-O1 -Wl,--discard-all -Wl,--build-id=sha1
   Flags    =+ [ _env_ = PACT_CC_VERSION ;
                 4.0.* >= -Wl,--no-undefined ]
   Flags    =+ ${OCV_StackP}
   Flags    =+ ${OCV_Bits}
   Flags    =+ ${OCV_PIC}
   Flags    =+ [ _cmd_ = -p ;                   # profiling
                 on    = $CC_Profile ]
   Flags    =+ [ _cmd_ = -cov ;                 # coverage analysis
                 on    = -fprofile-arcs -ftest-coverage ]
   Flags    =+ -fno-exceptions

# this currently kills the SO for python bindings
# it should be reworked to function
# that would help with other OS's
#   Flags    =+ -fvisibility=hidden

# explicitly set the sign of the char type
   Flags    =+ -funsigned-char
# because INT_MAX + 1 == INT_MIN is often used but is undefined behavior
   Flags    =+ -fwrapv

# -Wall turns on the following warning flags:
#    -Waddress -Warray-bounds (only with -O2) -Wc++0x-compat
#    -Wchar-subscripts -Wenum-compare (in C/Objc; this is on by default
#    in C++) -Wimplicit-int (C and Objective-C only)
#    -Wimplicit-function-declaration (C and Objective-C only) -Wcomment
#    -Wformat -Wmain (only for C/ObjC and unless -ffreestanding)
#    -Wmissing-braces -Wnonnull -Wparentheses -Wpointer-sign -Wreorder
#    -Wreturn-type -Wsequence-point -Wsign-compare (only in C++)
#    -Wstrict-aliasing -Wstrict-overflow=1 -Wswitch -Wtrigraphs
#    -Wuninitialized -Wunknown-pragmas -Wunused-function -Wunused-label
#    -Wunused-value -Wunused-variable -Wvolatile-register-var
#
   Debug     = -g -O0 -Wall
#   Flags    =+ -Werror
   Flags    =+ -Wformat -Wformat-security -Wmultichar
   Flags    =+ -Wpointer-arith -Winit-self

# -Wextra turns on the following warning flags:
#    -Wclobbered -Wempty-body -Wignored-qualifiers
#    -Wmissing-field-initializers -Wmissing-parameter-type (C only)
#    -Wold-style-declaration (C only) -Woverride-init -Wsign-compare
#    -Wtype-limits -Wuninitialized -Wunused-parameter (only with
#    -Wunused or -Wall) -Wunused-but-set-parameter (only with -Wunused
#    or -Wall)
#
   Flags    =+ -Wextra
   Flags    =+ -Wno-unused-parameter -Wno-unused-function -Wno-unused-label
   Flags    =+ -Wno-missing-declarations
   Flags    =+ [ _env_ = PACT_CC_VERSION ;
                 4.0.0 >= -Wno-missing-field-initializers ]

# even more warnings
   Flags    =+ [ _env_ = PACT_CC_VERSION ;
                 4.0.0 >= -Wshadow -Wno-inline ]
   Flags    =+ -Wlogical-op
   Flags    =+ -Wno-missing-format-attribute
   Flags    =+ [ _env_  = PACT_CC_VERSION ;
                 4.8.0 >= -Wenum-compare -Wno-suggest-attribute=format ]

# these would really bring the pain
# but are not quite right for the way PACT is designed
#   Flags    =+ -Wsuggest-attribute=noreturn
#   Flags    =+ -Wwrite-strings
#   Flags    =+ -Wformat-nonliteral
#   Flags    =+ -Wno-deprecated

   Optimize  = [ _env_ = PACT_CC_VERSION ;      # optimization level
                 4.1.2 = -g -O0 -Wall ;         # 4.1.2 crashes on mlcfnc.c with -O
                 *.*   = -g -O -Wunused -Wno-uninitialized]
   Optimize =+ [ _cmd_ = -tune @ ;              # optimization tuning
                 *     = -mtune=* ]
   Profile   = -pg
   Version   = -v
}

Tool FC {
   Exe       = ${OCV_FC}
   Flags     = -ffloat-store -ffree-form
   Flags    =+ [ _env_ = PACT_CC_VERSION ;      # compiler version flags
                 4.*   = -fsignaling-nans ;
                 4.6.* >= -fsignaling-nans -Wno-unused-dummy-argument ]
   Flags    =+ ${OCV_FC_Ext}
   Flags    =+ ${OCV_Bits}
   Flags    =+ ${OCV_PIC}
   Flags    =+ [ _cmd_ = -p ;                   # profiling
                 on    = $FC_Profile ]
   Flags    =+ [ _cmd_ = -cov ;                 # coverage analysis
                 on    = -fprofile-arcs -ftest-coverage ]
   Debug     = -g -O0 -Wall
   Optimize  = -g -O -Wunused
   Profile   = -pg
   Version   = -v
}

Tool CXX {
   Exe       = ${OCV_CXX}
   Flags     = 
   Debug     = -g -O0 -Wall
   Optimize  = -g -O -Wunused
   Version   = -v
}

Tool LD {
   Exe      = ${OCV_LD}
   RPath    = ${OCV_RPath}
   Flags   =+ ${OCV_LD}
#   Flags   =+ [ _env_ = PACT_CC_VERSION ;        # memory and thread checks
#                4.8.* >= -pie ]
   Flags   =+ [ _cmd_ = -p ;                      # profiling
                on    = -pg ]
   Flags   =+ [ _cmd_ = -cov ;                    # coverage analysis
                on    = -lgcov ]
   Lib      = ${OCV_LD_Lib}
}

Tool Lex {
   Flags  = -w
   Flags =+ ${OCV_Bits}
   Flags =+ ${OCV_PIC}
}

Group AF {
   PATTERN_WARN = ":+sp+warning:"
   PATTERN_ERR  = ":+sp+error:"
}

Group Std {
   CC_Flags = ${CC_Flags}
   FC_Flags = ${FC_Flags}
   LD_Flags = ${LD_Flags}
}

Group Cfg {
   Use    = Std
   CC_Exe = ${OCV_CC_Cfg}
   FC_Exe = ${OCV_FC_Cfg}
}

Group Shared {
   LD_Exe   = ${OCV_CC}
   CC_Flags = ${OCV_CC_Sh}
   LD_Flags = ${OCV_Sh}
   LD_Lib   = ${OCV_ShLb}
}

Group PThread {
   LD_Lib = -lpthread 
}

Group OpenMP {
   CC_Flags  = -fopenmp
   LD_Flags  = -fopenmp
   LD_Lib    = ${OCV_OMP_Lib}
   SharedFnc = [ _env_ = PACT_CC_VERSION ;      # compiler version flags
                4.6.0  <  yes ;
                4.6.0  >= no ]
}

Group Python {
   CC_Exe      = ${OCV_CC}
   CC_Debug    = ${CC_Debug}
   CC_Optimize = ${CC_Optimize}
}

include cpp-rule
include serial

