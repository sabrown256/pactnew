#!/bin/csh -f
#
# USE-COMPILER - decide on the correct compiler environment
#
# Source Version: 3.0
# Software Release #: LLNL-CODE-422942
#
# include "cpyright.h"
#

unalias *

set lbits = ""
set lvers = ""
set cpath = ""
set vrb   = FALSE
set args  = ( $argv )

while ($#argv > 0)
   switch ($1)
      case -h:
           echo ""
           echo "Usage: use-compiler [-h] [-v] [bits #] [vers #] <cc>"
           echo "   h     this help message"
           echo "   v     verbose mode"
           echo "   <cc>  compiler name or full path"
           echo ""
           echo ""
           exit(1)
      case -v:
           set vrb = TRUE
           breaksw
      case bits:
           shift
           set lbits = $1
           breaksw
      case vers:
           shift
           set lvers = $1
           breaksw
      default:
           if ("$cpath" == "") then
              set cpath = $1
           endif
           breaksw
   endsw
   shift
end

if (($?PSY_ID == 1) && ($?PSY_Base == 1)) then
   setenv ALog $PSY_Base/dev/$PSY_ID/log/analyze.use-compiler
else
   setenv ALog /dev/null
endif

# find and source functions-pact.csh
if (-f ../scripts/functions-pact.csh) then
   set scrd = $cwd
else if (-f ../../scripts/functions-pact.csh) then
   set scrd = $cwd:h
endif
set ldir = $scrd:h/scripts
set path = ( $ldir $path )
source $ldir/functions-pact.csh
unset ldir
unset scrd

# figure out the site context
if (-f extensions/sys-site) then
   eval `extensions/sys-site`
else
   eval `sys-site -dc`
endif

if ("$cpath" == "") then
   NoteD $ALog "No compiler specified - exiting"
   exit(1)
endif
set cname = $cpath:t
if ($cpath == $cname) then
   set cpath = ""
endif

set Sed = `which sed`
set Awk = `which awk`

Note $ALog "Arguments: $args"
Note $ALog "Starting PATH = $PATH"

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# SETUP - get default compiler and query basic info

set cc = ( `which $cname` )

switch ($cname)

# ABSOFT
   case af90*:
        set cname = gcc
        set xname = g++
        set fname = af90
        set pact_cc_family = GNU
        set pact_cx_family = GNU
        set pact_fc_family = ABSOFT
        set opt   = ( --version )
        set pat   = ( Absoft )
        set prog  = ( '$0 ~ /'$pat'/ { print $5 } $0 ~ /Compile line:/ { print $3 }' )
        breaksw

# CLANG
   case *clang*:
        set xname = ( `echo "$cname" | sed 's|clang|clang++|'` )
        set fname = gfortran
        set pact_cc_family = CLANG
        set pact_cx_family = CLANG
        set pact_fc_family = GNU
        set opt   = ( -v )
        set pat   = ( clang version )

# toxic piece of crap
# clang version variants:
# clang version 3.4 (tags/RELEASE_34/final)
# clang version 3.4.2 
# Apple LLVM version 5.1 (clang-503.0.40) (based on LLVM 3.4svn)

#        set prog  = ( '$0 ~ /'$pat'/ { print $3 } $0 ~ /Compile line:/ { print $3 }' )
        set prog  = ( '$0 ~ /'$pat'/ { print $4 } $0 ~ /Compile line:/ { print $3 }' )
        breaksw

# INTEL
   case intel*:
        set cname = icc
   case icc*:
        set xname = icpc
        set fname = ifort
        set pact_cc_family = INTEL
        set pact_cx_family = INTEL
        set pact_fc_family = INTEL
        set opt   = ( -v )
        set pat   = ( version )
        set prog  = ( '$0 ~ /Version/ { print $2 } $0 ~ /version/ { print $3 } $0 ~ /Compile line:/ { print $3 }' )
        breaksw

# OPEN64
   case open64*:
        set cname = opencc
   case opencc*:
        set xname = openCC
        set fname = openf90
        set pact_cc_family = OPEN64
        set pact_cx_family = OPEN64
        set pact_fc_family = OPEN64
        set opt   = ( -v )
        set pat   = ( Open64 Compiler Suite: Version )
        set prog  = ( '$0 ~ /'$pat'/ { print $NF } $0 ~ /Compile line:/ { print $3 }' )
        breaksw

# PATHSCALE
   case pathscale*:
        set cname = pathcc
   case pathcc*:
        set xname = pathCC
        set fname = pathf90
        set pact_cc_family = PATHSCALE
        set pact_cx_family = PATHSCALE
        set pact_fc_family = PATHSCALE
        set opt   = ( -v )
        set pat   = ( Compiler Suite: Version )
        set prog  = ( '$0 ~ /'$pat'/ { print $NF } $0 ~ /Compile line:/ { print $3 }' )
        breaksw

# PCC
   case pcc*:
        set xname = g++
        set fname = gfortran
        set pact_cc_family = PCC
        set pact_cx_family = GNU
        set pact_fc_family = GNU
        set opt   = ( -v )
        set pat   = ( pcc )
        set prog  = ( '$0 ~ /'$pat'/ { print $2 } $0 ~ /Compile line:/ { print $3 }' )
        breaksw

# PGI
   cae pgi*
        set cname = pgcc
   case pgcc*:
        set xname = pgCC
        set fname = pgf90
        set pact_cc_family = PGI
        set pact_cx_family = PGI
        set pact_fc_family = PGI
        set opt   = ( -V )
        set pat   = ( target on )
        set prog  = ( '$0 ~ /'$pat'/ { print $2 } $0 ~ /Compile line:/ { print $3 }' )
        breaksw

# SUN
   case suncc*:
        set xname = sunCC
        set fname = sunf90
        set pact_cc_family = SUN
        set pact_cx_family = SUN
        set pact_fc_family = SUN
        set opt   = ( -V )
        set pat   = ( cc: Sun C )
        set prog  = ( '$0 ~ /'$pat'/ { print $4 } $0 ~ /Compile line:/ { print $3 }' )
        breaksw

# Tau
   case tau_cc*:
        set xname = tau_CC
        set fname = tau_f90
        set pact_cc_family = TAU
        set pact_cx_family = TAU
        set pact_fc_family = TAU
        set opt   = ( -v )
        set pat   = ( tau_cc version )
        set prog  = ( '$0 ~ /'$pat'/ { print $4 } $0 ~ /Compile line:/ { print $3 }' )
        breaksw

# TinyCC
   case tcc*:
        set xname = g++
        set fname = gfortran
        set pact_cc_family = TCC
        set pact_cx_family = GNU
        set pact_fc_family = GNU
        set opt   = ( -v )
        set pat   = ( tcc version )
        set prog  = ( '$0 ~ /'$pat'/ { print $4 } $0 ~ /Compile line:/ { print $3 }' )
        breaksw

# XLC
   case *xlc*:
        set xname = xlC
        set fname = ( `echo $cname | sed 's|xlc|xlf90|'` )
        set pact_cc_family = XLC
        set pact_cx_family = XLC
        set pact_fc_family = XLF
        set opt   = ( -qversion )
        set pat   = ( IBM XL )
        set prog  = ( '$0 ~ /'$pat'/ { print $NF } $0 ~ /Compile line:/ { print $3 }' )
        breaksw

# GNU is default
   default:
        set xname = g++
        set fname = gfortran
        set pact_cc_family = GNU
        set pact_cx_family = GNU
        set pact_fc_family = GNU
        set opt   = ( -v )
        set pat   = ( gcc version )
        set prog  = ( '$0 ~ /'$pat'/ { print $3 } $0 ~ /Compile line:/ { print $3 }' )
        breaksw
endsw

Note $ALog "Info derived from ${cname}:"
Note $ALog "   pact_cc_family  = $pact_cc_family"
Note $ALog "   pact_cx_family  = $pact_cx_family"
Note $ALog "   pact_fc_family  = $pact_fc_family"
Note $ALog "   cname           = $cname"
Note $ALog "   xname           = $xname"
Note $ALog "   fname           = $fname"
Note $ALog "   Version option  = $opt"
Note $ALog "   Version pattern = $pat"
Note $ALog "   Version awk     = $prog"

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# COMPILER - get detailed compiler info

Separator $ALog

set cc     = none
set cx     = none
set fc     = none
set croot  = none
set xroot  = none
set froot  = none
set lcvers = none
set lxvers = none
set lfvers = none
set lrpath = ""

# in case compilers were put in different directories (ala Intel)
# check both Fortran and C compilers to get both on the PATH
# do C last to get its environment as the final result

set dirl = ""
foreach c ($fname $xname $cname)

   set cmp = `which $c`
   Note $ALog "cmp = $cmp"

   set lc = $cpath:h/$c

# if blank try to find compiler on your path
   if ("$cpath" == "") then
      if (-x $PSY_AIRoot/pact/scripts/$c) then
         set cmp = $PSY_AIRoot/pact/scripts/$c
         set opt = ( $opt -cwvrb )
         if ("$lvers" != "") then
            set opt = ( $opt -cwvers $lvers )
         endif
      endif

# if not a full path find it on your path
   else if ("$cpath" !~ /*) then
      set inf = ( `which $cpath` )
      if (-x "$inf") then
         set cmp = $inf
      endif

   else if (-xf "$lc") then
      set cmp = $lc

# try adding bin/$c
#   else if (-x "$cpath/bin/$c") then
#      set cmp = $cpath/bin/$c

   endif

   unset lc

# check for valid executable or else bail now
   if (-x "$cmp") then
      set sdir = $cmp:h
      set dirl = ( $dirl $sdir )
      Note $ALog "Compiler '$c' found"
      Note $ALog "   cmp   = |$cmp|"
      Note $ALog "   cpath = |$cpath|"
   else
      Note $ALog "No compiler '$c' found"
      Note $ALog "   cmp   = |$cmp|"
      Note $ALog "   cpath = |$cpath|"
      Note $ALog "   PATH  = |$PATH|"
      continue
   endif

#--------------------------------------------------------------------------

# only take lfvers and froot from Fortran compiler
   if ($c == $fname) then
      set bindir = $sdir

# query the compiler for information
      set inf = ( `$cmp $opt |& $Awk "$prog"` )
      Note $ALog " inf = $inf"
      if ($#inf > 1) then
         set lfvers = $inf[2]
         set fc     = $inf[1]
         set bindir = $fc:h

      else if ($#inf > 0) then

# NOTE: some compilers such as ifort lie about their versions
# ifort 12.1.xxx all say they are 12.1.0
# so take the version from the installed path in such a case.
# this depends on some coordination with the ccomp script
# and the fact that installations of multiple versions must
# be more nearly correct in their identifications
         echo "$inf" |& grep $lvers >& /dev/null
	 if ($status == 0) then
            set lfvers = $lvers
            set fc     = $inf
            set bindir = $inf:h
         else
            set lfvers = $inf[1]
            set fc     = $cmp
         endif
      else

# NOTE: if we cannot decipher the version just reverify
# that the compiler doesn't crash trying to get the version
# and use that
         $cmp $opt >& /dev/null
         if ($status == 0) then
            set lfvers = unknown
            set fc     = $cmp
         endif
      endif

      if (!(-f "$lfvers")) then
         set lfvers = ( `echo $lfvers | $Sed 's/[-_]/./g'` )
      endif
      set froot = $bindir:h
      unset bindir

#--------------------------------------------------------------------------

# only take lxvers and xroot from C++ compiler
   else if ($c == $xname) then
      set bindir = $sdir

# query the compiler for information
      set inf = ( `$cmp $opt |& $Awk "$prog"` )
      Note $ALog " inf = $inf"
      if ($#inf > 1) then
         set lxvers = $inf[2]
         set cx     = $inf[1]
         set bindir = $cx:h

      else if ($#inf > 0) then

# NOTE: some compilers such as ifort lie about their versions
# ifort 12.1.xxx all say they are 12.1.0
# so take the version from the installed path in such a case.
# this depends on some coordination with the ccomp script
# and the fact that installations of multiple versions must
# be more nearly correct in their identifications
         echo "$inf" |& grep $lvers >& /dev/null
	 if ($status == 0) then
            set lxvers = $lvers
            set cx     = $inf
            set bindir = $inf:h
         else
            set lxvers = $inf[1]
            set cx     = $cmp
         endif
      else

# NOTE: if we cannot decipher the version just reverify
# that the compiler doesn't crash trying to get the version
# and use that
         $cmp $opt >& /dev/null
         if ($status == 0) then
            set lxvers = unknown
            set cx     = $cmp
         endif
      endif

      if (!(-f "$lxvers")) then
         set lxvers = ( `echo $lxvers | $Sed 's/[-_]/./g'` )
      endif
      set xroot = $bindir:h
      unset bindir

#--------------------------------------------------------------------------

# only take lcvers and croot from C compiler
   else if ($c == $cname) then
      set bindir = $sdir

# query the compiler for information
      set inf = ( `$cmp $opt |& $Awk "$prog"` )
      if ($#inf > 1) then
         set lcvers = $inf[2]
         set cc     = $inf[1]
         set bindir = $cc:h

      else if ($#inf > 0) then

# NOTE: some compilers such as icc lie about their versions
# icc 12.1.xxx all say they are 12.1.0
# so take the version from the installed path in such a case.
# this depends on some coordination with the ccomp script
# and the fact that installations of multiple versions must
# be more nearly correct in their identifications
         echo "$inf" |& grep $lvers >& /dev/null
	 if ($status == 0) then
            set lcvers = $lvers
            set cc     = $inf
            set bindir = $inf:h
         else
            set lcvers = $inf[1]
            set cc     = $cmp
         endif

      else

#--------------------------------------------------------------------------

# NOTE: if we cannot decipher the version just reverify
# that the compiler doesn't crash trying to get the version
# and use that
         $cmp $opt >& /dev/null
         if ($status == 0) then
            set lcvers = unknown
            set cc     = $cmp
         endif
      endif

      if (!(-f "$lcvers")) then
         set lcvers = ( `echo $lcvers | $Sed 's/[-_]/./g'` )
      endif
      set croot = $bindir:h
      unset bindir
   endif

# gather up LD_LIBRARY_PATH settings from compiler database
   set inf = ( `$cmp -cwenv |& grep LD_LIBRARY_PATH` )
   if ("$inf" =~ LD_LIBRARY_PATH*) then
      set lp = $inf[2]
      set ok = TRUE
      foreach p ( $lrpath )
         if ($p == $lp) then
            set ok = FALSE
            break
         endif
      end
      if ($ok == TRUE) then
         set lrpath = ( $lrpath $lp )
      endif
   endif

end

# add the LD_LIBRARY_PATH settings to the configuration database
if ("$lrpath" != "") then
   analyze/rpath -a $lrpath
endif

# check the bits for the compiler library
if ("$lbits" == 32) then
   set croot = `echo $croot | $Sed 's/-64//'`
   set xroot = `echo $xroot | $Sed 's/-64//'`
   set froot = `echo $froot | $Sed 's/-64//'`
endif

set pact_cc_version = $lcvers
set pact_cc_path    = $croot
set pact_cc_exe     = $cc

set pact_cx_version = $lxvers
set pact_cx_path    = $xroot
set pact_cx_exe     = $cx

set pact_fc_version = $lfvers
set pact_fc_path    = $froot
set pact_fc_exe     = $fc

if ($pact_cc_family == PATHSCALE) then
   set pact_cc_path = $pact_cc_path/lib/$lcvers
   set pact_cx_path = $pact_cx_path/lib/$lxvers
   set pact_fc_path = $pact_fc_path/lib/$lfvers
endif

dbmset $ALog PACT_CC_FAMILY   = $pact_cc_family^   \
             PACT_CC_VERSION  = $pact_cc_version^  \
             PACT_CC_PATH     = $pact_cc_path^     \
             PACT_CC_EXE      = $pact_cc_exe^      \
             PACT_CX_FAMILY   = $pact_cx_family^   \
             PACT_CX_VERSION  = $pact_cx_version^  \
             PACT_CX_PATH     = $pact_cx_path^     \
             PACT_CX_EXE      = $pact_cx_exe^      \
             PACT_FC_FAMILY   = $pact_fc_family^   \
             PACT_FC_VERSION  = $pact_fc_version^  \
             PACT_FC_PATH     = $pact_fc_path^     \
             PACT_FC_EXE      = $pact_fc_exe

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# NUMA - get numa info

Separator $ALog

if (-f analyze/numa) then
   source analyze/numa
endif

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# PATH - adjust the PATH to find the compiler

if ($#dirl == 1) then
   set future_path = $dirl[1]':$PATH'
else
   if ($dirl[1] == $dirl[2]) then
      set future_path = $dirl[1]':$PATH'
   else
      set future_path = ${dirl[1]}:${dirl[2]}':$PATH'
   endif
endif

dbset PATH $future_path

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

if ($vrb == TRUE) then
   NoteD $ALog "   PACT_CC_FAMILY   = $pact_cc_family"
   NoteD $ALog "   PACT_CC_VERSION  = $pact_cc_version"
   NoteD $ALog "   PACT_CC_PATH     = $pact_cc_path"
   NoteD $ALog "   PACT_CC_EXE      = $pact_cc_exe"
   NoteD $ALog "   PACT_CX_FAMILY   = $pact_cx_family"
   NoteD $ALog "   PACT_CX_VERSION  = $pact_cx_version"
   NoteD $ALog "   PACT_CX_PATH     = $pact_cx_path"
   NoteD $ALog "   PACT_CX_EXE      = $pact_cx_exe"
   NoteD $ALog "   PACT_FC_FAMILY   = $pact_fc_family"
   NoteD $ALog "   PACT_FC_VERSION  = $pact_fc_version"
   NoteD $ALog "   PACT_FC_PATH     = $pact_fc_path"
   NoteD $ALog "   PACT_FC_EXE      = $pact_fc_exe"
   NoteD $ALog "   PATH             = $PATH"
endif

exit(0)

