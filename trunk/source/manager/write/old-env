#!/bin/csh -f
#
# OLD-ENV - generate old environment variable names
#         - for backward compatibility
#         - let an old PACT function with a new one's env files
#         - or applications using new env files
#
# include "cpyright.h"
#

set Me = $0
source $Me:h/common

Note $Log "----- write/old-env -----"
Note $Log "Write: old-env"
Note $Log ""

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

Separator $Log
NoteD $Log "   Adding backward compatibility variable bindings"
Note $Log ""

dbmget $Log EtcDir

flog $Log set envcsh = $EtcDir/env-pact.csh
flog $Log set envsh  = $EtcDir/env-pact.sh
flog $Log set envdk  = $EtcDir/env-pact.dk
flog $Log set envmd  = $EtcDir/env-pact.mod

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

@ err = 0

set lst = ""

# AF Group
set lst = ( $lst GLIBC_VERSION        AF_VERSION_GLIBC )
#set lst = ( $lst ANSI                 AF_ANSI )
#set lst = ( $lst CDecls               AF_CDecls )
#set lst = ( $lst CList                AF_CList )
#set lst = ( $lst GETSOCKOPT_TYPE      AF_SOCKOPT_TYPE )
#set lst = ( $lst INT4                 AF_INT4 )
#set lst = ( $lst INT8                 AF_INT8 )
#set lst = ( $lst LONG64               AF_LONG8 )
#set lst = ( $lst NEED_ALT_LARGE_FILE  AF_ALT_LARGE_FILE )
#set lst = ( $lst OSX_Version          AF_VERSION_OSX )
#set lst = ( $lst ERR_PATTERN          AF_PATTERN_ERR )
#set lst = ( $lst WARN_PATTERN         AF_PATTERN_WARN )

# RF Group
set lst = ( $lst CONFIG_METHOD        RF_CONFIG_METHOD )
#set lst = ( $lst AbsoluteDeb          RF_DEBUG )
#set lst = ( $lst AbsoluteOpt          RF_OPTIMIZE )
#set lst = ( $lst BUILD_DEBUG          RF_DEBUG )
#set lst = ( $lst CSpokes              RF_SPOKES_C )
#set lst = ( $lst FEATURES             RF_FEATURES )
#set lst = ( $lst Linking              RF_Linking )
#set lst = ( $lst Profile              RF_PROFILE )
#set lst = ( $lst STRICT               RF_STRICT )
#set lst = ( $lst SchemeSpokes         RF_SPOKES_SCHEME )

# CROSS Group
set lst = ( $lst CFE                  CROSS_FE )

# DB Group
set lst = ( $lst HOST_SERVER_DB       DB_HOST_SERVER )
set lst = ( $lst RUN_SIGNATURE_DB     DB_RUN_SIGNATURE )
set lst = ( $lst SITE_SIGNATURE_DB    DB_SITE_SIGNATURE )
set lst = ( $lst UPDATE_SYS_DB        DB_UPDATE_SYS )

# DP Group
set lst = ( $lst PFE                  DP_FE )
#set lst = ( $lst BE                   DP_BE )
#set lst = ( $lst PARALLEL_COMM_METH   DP_METHOD )
#set lst = ( $lst REQUEST_MPI          DP_REQUEST_MPI )

# HAVE Group
set lst = ( $lst NO_LONG_LONG         HAVE_LONG_LONG )
set lst = ( $lst NO_TERMINAL          HAVE_TERMINAL )

# HSY Group
set lst = ( $lst OS_Name              HSY_OS_Name )
set lst = ( $lst RootInc              HSY_RootInc )
set lst = ( $lst RootLib              HSY_RootLib )
#set lst = ( $lst CPU                  HSY_CPU )
#set lst = ( $lst FPU                  HSY_FPU )
#set lst = ( $lst Host                 HSY_Host )

# MAKE Group
set lst = ( $lst SUFFIXES             MAKE_SUFFIXES )

# PSY Group
set lst = ( $lst System               PSY_ID )
set lst = ( $lst CONFIG_PATH          PSY_CONFIG_PATH )
set lst = ( $lst SYS_SITE             PSY_SITE )
set lst = ( $lst SYS_TYPE             PSY_TYPE )
set lst = ( $lst DAI_ROOT             PSY_AIRoot )
set lst = ( $lst DAS_ROOT             PSY_ASRoot )
#set lst = ( $lst Arch                 PSY_Arch )
#set lst = ( $lst InstBase             PSY_InstRoot )

# SHELL Group
set lst = ( $lst BackSlash            SHELL_Cont )
set lst = ( $lst DEFAULT_SHELL        SHELL_Default )

# SMP Group
#set lst = ( $lst PTHREAD_OMP          SMP_OpenMP )
#set lst = ( $lst PTHREAD_POSIX        SMP_Pthread )
#set lst = ( $lst ThreadLibExt         SMP_LibExt )
#set lst = ( $lst NUMA                 SMP_NUMA )

# USE Group
#set lst = ( $lst UseTmpDir            USE_TmpDir )

#--------------------------------------------------------------------------0
#--------------------------------------------------------------------------0

@ ne = $#lst

Note $Log "lst = ($ne) $lst"

source $envcsh

Note $envcsh ""
Note $envcsh "#--------------------------------------------------------------------------"
Note $envcsh ""
Note $envcsh "# old variables for backward compatibility"
Note $envcsh ""

Note $envsh  ""
Note $envsh  "#--------------------------------------------------------------------------"
Note $envsh  ""
Note $envsh  "# old variables for backward compatibility"
Note $envsh  ""

Note $envdk  ""
Note $envdk  "#--------------------------------------------------------------------------"
Note $envdk  ""
Note $envdk  "# old variables for backward compatibility"
Note $envdk  ""

#Note $envmd  ""
#Note $envmd  "#--------------------------------------------------------------------------"
#Note $envmd  ""
#Note $envmd  "# old variables for backward compatibility"
#Note $envmd  ""

@ i = 0
while ($i < $ne)
   @ i = $i + 1
   set on = $lst[$i]
   @ i = $i + 1
   set nn = $lst[$i]
   printenv $nn >& /dev/null
   if ($status == 0) then
      set nv = ( `printenv $nn` )
      if (($#nv > 1) || ("$nv" =~ *'[ 	\]'*)) then
         printf 'setenv %-24s "%s"\n' $on "$nv" >>& $envcsh
         printf 'export %s="%s"\n' $on "$nv" >>& $envsh
         printf 'dk_setenv %-24s "%s"\n' $on "$nv" >>& $envdk
      else
         printf 'setenv %-24s %s\n' $on $nv >>& $envcsh
         printf 'export %s=%s\n' $on $nv >>& $envsh
         printf 'dk_setenv %-24s %s\n' $on $nv >>& $envdk
      endif
   endif
end

#--------------------------------------------------------------------------0
#--------------------------------------------------------------------------0

exit($err)

