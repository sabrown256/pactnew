#!/bin/csh -f
#
# DMAKE - compile the dmake program
#
# include "cpyright.h"
#

set Me = $0
source $Me:h/common

Note $Log "----- write/dmake -----"
Note $Log "Write: dmake"
Note $Log ""

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

Separator $Log

NoteD $Log "   Persistent Portable Parallel Make - dmake"
Note $Log ""

dbmget $Log CROSS_COMPILE^    \
            PACT_CC_EXE^      \
            PACT_CC_FAMILY^   \
            PACT_CC_PATH^     \
            PACT_CC_VERSION^  \
            System^           \
            BaseDir^          \
            BinDir^           \
            LibDir^           \
            MngDir

    flog $Log set DSYS = $MngDir/dsys
    flog $Log set MAKE = $BinDir/smake
    flog $Log set opt  = smake
    flog $Log set path = ( $BinDir $path )

    set err = 1

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# BUILD - if not cross-compile then build dmake for this platform

    if ($CROSS_COMPILE == "FALSE") then

       Note $Log "Build local dmake"

       flog $Log ls -l ${PERDB_PATH}*

# save the database before building dmake because import-api needs it
       flog $Log $PERDB -l save:db:

       flog $Log pushd $BaseDir/score

# always remove and start clean in case there is toxic rubble
# left over from a failed build
# NOTE: the pact link may not be in place so remove may not invoke
# clean - therefore do both separately
       flog $Log $MAKE -i -na 1 clean
       flog $Log $MAKE -i -na 1 remove

       flog $Log ls -l ${PERDB_PATH}*

       flog $Log $MAKE dmake
       set err = $status
       if ($err == 0) then
          Note $Log "Build of dmake succeeded"
       else
          Note $Log "Build of dmake failed"
       endif
       flog $Log popd

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# FIND - if cross-compile then try to find a dmake to use on this platform

    else

       Note $Log "Find dmake for CROSS_COMPILE"
       Note $Log "   System = |$System|"
       Note $Log "   BinDir = |$BinDir|"

       set dm = `which-exe -d ${BinDir} dmake`
       Note $Log "   dm     = |$dm|"
       if (-x "$dm") then
          flog $Log cp $dm ${BinDir}/dmake
          flog $Log set err = 0

# try pact if no dmake found
       else
          set dm = `which-exe -d ${BinDir} pact`
          Note $Log "   dm     = |$dm|"
          if (-x "$dm") then
             flog $Log cp $dm ${BinDir}/dmake
             flog $Log set err = 0
          else
             Note $Log "No dmake found for bootstrap CROSS_COMPILE"
          endif
       endif
       unset dm

    endif

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# decide whether to use smake or dmake
    if ($err == 0) then
       flog $Log ${BinDir}/dmake -v
       if ($status == 0) then
          flog $Log set opt = dmake
       endif
    endif

    flog $Log setenv SESSION_CONFIG $System
    ftee $Log $DSYS pact $opt
    unset opt

exit($err)

