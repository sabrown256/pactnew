#!/bin/csh -f
#
# LINK - link shared object for Python
#      - this is a portability hack mainly because of AIX
#

set lpy_pact_vers = 2.numpy

source ../../scripts/functions-pact.csh

@ iv = 1
set Test = FALSE
while ($#argv > 0)
   switch ($1)
      case -c:
           shift
           set iv = $1
           breaksw
      case -h:
           echo "Usage: link [-c <n>] [-h] [-t]"
           echo "   c  use <n> of configured python versions"
           echo "   h  this help message"
           echo "   t  run tests in addtion to linking the shared libraries"
           exit(1)
           breaksw
      case -t:
           set Test = TRUE
           breaksw
      default:
           breaksw
   endsw
   shift
end

set lpy_pact_lib  = libpy_$lpy_pact_vers

set lpy_ccs  = ( `pact +l -info PY_CC` )
set lpy_vers = ( `pact +l -info PY_Vers` )
set lpy_cfgs = ( `pact +l -info PY_CfgDir` )
set lpy_exes = ( `pact +l -info PY_Exe` )

set lpy_cc  = $lpy_ccs[$iv]
set lpy_ver = $lpy_vers[$iv]
set lpy_cfg = $lpy_cfgs[$iv]
set lpy_exe = $lpy_exes[$iv]

if (!(-x "$lpy_exe")) then
   echo "No such executable '$lpy_exe'"
   exit(1)
else
   echo ""
   echo "Using $lpy_exe"
endif

@ err    = 0
set Arch = `../../scripts/cfgman use`

InitLog Log $cwd/z-$Arch/obj/log.load

flog $Log (env | sort)
flog $Log set SrcDir = $cwd
flog $Log set OS     = `uname -s`
flog $Log set Root   = $cwd:h:h/dev/$Arch
flog $Log set DevInc = $Root/include
flog $Log set DevLib = $Root/lib

flog $Log set Def = $DevInc/make-def

flog $Log set AR        = ( `pact +l -info AR | uniq` `pact +l -info ARXOpt | uniq` )
flog $Log set SFLAGS    = ( `pact +l -info Shared_LD_Flags | uniq` )
flog $Log set Link      = ( `pact +l -info Shared_LD_Exe | uniq` )
flog $Log set ShLibs    = ( `pact +l -info Shared_LD_Lib | uniq` )
flog $Log set LDPath    = ( `pact +l -info LDPath | uniq` )
flog $Log set LDRPath   = ( `pact +l -info LDRPath | uniq` )
flog $Log set MDLibs    = ( `pact +l -info MDLib | uniq` )
flog $Log set MDILibs   = ( `pact +l -info MDI_Lib | uniq` )
flog $Log set MDGLibs   = ( `pact +l -info MDGLib | uniq` )
flog $Log set GCCLib    = ( `pact +l -info GCCLib | uniq` )

# get only libraries in DPLibs - no flags (AIX)
set lst = ""
foreach i ( `pact +l -info DPLib | uniq` )
   if ("$i" =~ \-l*) then
      set lst = ( $lst $i )
   endif
end
flog $Log set DPLibs   = ( $lst )
flog $Log set LD       = ( $Link $SFLAGS )
flog $Log set lpy_path = $DevLib/python${lpy_ver}
flog $Log set lpy_pact = $lpy_path/pact_${lpy_pact_vers}

flog $Log set Libs   = ( $LDRPath -L$DevLib $LDPath $MDGLibs $MDILibs -lc -lm $ShLibs $DPLibs $MDLibs )
if ("$GCCLib" != "") then
   flog $Log set Libs = ( $Libs -L$GCCLib -lgcc )
endif

flog $Log set CFPDB = ""
flog $Log set CFPGS = ""

# NOTE: IBM model is difficult - grrrrrrrrrrr
if ($OS == AIX) then
   flog $Log set CFPDB = ( -bE:${SrcDir}/pypdb.exp -bI:${lpy_cfg}/python.exp -bM:SRE -bnoentry -bloadmap:pypdb.map )
   flog $Log set CFPGS = ( -bE:${SrcDir}/pypgs.exp -bI:${lpy_cfg}/python.exp -bM:SRE -bnoentry -bloadmap:pypgs.map )
endif

if (!(-d $lpy_pact)) then
   flog $Log mkdir -p $lpy_pact
endif
flog $Log pushd $lpy_pact

NoteD $Log ""
NoteD $Log "Linking PyPact bindings in:"
NoteD $Log "   $lpy_pact"
NoteD $Log ""
flog $Log $RM $lpy_pact/*.so _*.so
flog $Log $RM $lpy_pact/*.o

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# link PyPDB

NoteD $Log -n "   Linking pdb ..... "
Note $Log ""

flog $Log $RM $lpy_pact/libpypdb.so $lpy_pact/libpypdb.so.1 _pdb.so

set pyl = ( ${lpy_pact_lib}.a libscore.a libpml.a libpdb.a )
@ lerr = 0
foreach l ($pyl)
   flog $Log px $AR ../../$l
   @ lerr = $lerr + $status
end

if ($lerr != 0) then
   NoteD $Log "ng ($lerr)"
   @ err = $err + $lerr
else

# remove PGS function - they do not belong with PDB module
   set lrmf = ""
   set lrmf = ( $lrmf scexe.o )
   set lrmf = ( $lrmf pgsmodule.o pgsdevice.o pgsgraph.o pgsimage.o )
   set lrmf = ( $lrmf pgspalette.o utilpgs.o )
   set lrmf = ( $lrmf gp-pgs.o gp-panacea.o gp-scheme.o )
   flog $Log $RM $lrmf
   unset lrmf

   flog $Log $LD ${CFPDB} -o $lpy_pact/libpypdb.so.1 *.o $Libs
   set xstatus = $status
   if ($xstatus == 0) then
      NoteD $Log "ok"
      flog $Log ln -s $lpy_pact/libpypdb.so.1 $lpy_pact/libpypdb.so
      flog $Log ln -s $lpy_pact/libpypdb.so.1 _pdb.so
      flog $Log $RM *.o _____* __.SYMDEF*
      flog $Log ls -l $lpy_pact/*pdb*
   else
      NoteD $Log "ng ($xstatus)"
      @ err = $err + 1
   endif
endif

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# link PyPGS

NoteD $Log -n "   Linking pgs ..... "
Note $Log ""

flog $Log $RM $lpy_pact/libpypgs.so $lpy_pact/libpypgs.so.1 _pgs.so

set pyl = ( ${lpy_pact_lib}.a libscore.a libpml.a libpdb.a libppc.a libpgs.a )
@ lerr = 0
foreach l ($pyl)
   flog $Log px $AR ../../$l
   @ lerr = $lerr + $status
end

if ($lerr != 0) then
   NoteD $Log "ng ($lerr)"
   @ err = $err + $lerr
else

# remove unneeded/unwanted objects
   set lrmf = ""
   set lrmf = ( $lrmf scexe.o )
   set lrmf = ( $lrmf gp-panacea.o gp-scheme.o )
   flog $Log $RM $lrmf
   unset lrmf

   flog $Log $LD ${CFPGS} -o $lpy_pact/libpypgs.so.1 *.o $Libs
   set xstatus = $status
   if ($xstatus == 0) then
      NoteD $Log "ok"
      flog $Log ln -s $lpy_pact/libpypgs.so.1 $lpy_pact/libpypgs.so
      flog $Log ln -s $lpy_pact/libpypgs.so.1 _pgs.so
      flog $Log $RM *.o _____* __.SYMDEF*
      flog $Log ls -l $lpy_pact/*pgs*
   else
      NoteD $Log "ng ($xstatus)"
      @ err = $err + 1
   endif
endif

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

flog $Log ls -l
flog $Log popd

NoteD $Log -n "   Python import ... "
Note $Log ""

# finish up
flog $Log cp ../pact/{pgs.py,pdb.py} $lpy_pact
flog $Log touch $lpy_pact/__init__.py

flog $Log $lpy_exe -c 'import compileall;compileall.main()' $lpy_pact
set xstatus = $status
if ($xstatus == 0) then
   NoteD $Log "ok"
else
   NoteD $Log "ng ($xstatus)"
   @ err = $err + 1
endif

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

if ($Test == TRUE) then
   NoteD $Log -n "   Testing ......... "
   Note $Log ""
   flog $Log setenv PYTHONPATH $lpy_path
   flog $Log cd tests
   flog $Log $lpy_exe unittests.py
   set xstatus = $status
   if ($xstatus == 0) then
      NoteD $Log "ok"
   else
      NoteD $Log "ng ($xstatus)"
      @ err = $err + 1
   endif
endif

NoteD $Log ""

exit($err)

