#!/bin/csh -f
#
# LINK - link shared object for Python
#      - this is a portability hack mainly because of AIX
#

set PyPACTVers = 2.0

source ../scripts/env-csh

set Python = `which python`
if (!(-x "$Python")) then
   echo "No executable python can be found on your path:"
   echo "   $PATH"
   exit(1)
endif

set Test = FALSE
while ($#argv > 0)
   switch ($1)
      case -h:
           echo "Usage: link [-h] [-t]"
           echo "   h  this help message"
           echo "   t  run tests in addtion to linking the shared libraries"
           exit(1)
           breaksw
      case -t:
           set Test = TRUE
           breaksw
      default:
           breaksw
   endsw
   shift
end

@ Err    = 0
set Arch = `../scripts/cfgman use`

InitLog Log $cwd/z-$Arch/obj/log.load

flog $Log (env | sort)
flog $Log set SrcDir = $cwd
flog $Log set OS     = `uname -s`
flog $Log set Root   = $cwd:h/dev/$Arch
flog $Log set DevInc = $Root/include
flog $Log set DevLib = $Root/lib

flog $Log set Def = $DevInc/make-def

flog $Log set AR       = ( `pact +l -info AR | uniq` `pact +l -info ARXOpt | uniq` )
flog $Log set CCmp     = ( `pact +l -info PyCC` )
flog $Log set PyVers   = ( `pact +l -info PyVers` )
flog $Log set PyCfgDir = ( `pact +l -info PyCfgDir` )
flog $Log set SFLAGS   = ( `pact +l -info LDShared | uniq` )
flog $Log set Link     = ( `pact +l -info ShLD | uniq` )
flog $Log set ShLibs   = ( `pact +l -info Shared_LD_Lib | uniq` )
flog $Log set LDPath   = ( `pact +l -info LDPath | uniq` )
flog $Log set LDRPath  = ( `pact +l -info LDRPath | uniq` )
flog $Log set MDLibs   = ( `pact +l -info MDLib | uniq` )
flog $Log set MDGLibs  = ( `pact +l -info MDGLib | uniq` )
flog $Log set GCCLib   = ( `pact +l -info GCCLib | uniq` )

# get only libraries in DPLibs - no flags (AIX)
set lst = ""
foreach i ( `pact +l -info DPLib | uniq` )
   if ("$i" =~ \-l*) then
      set lst = ( $lst $i )
   endif
end
flog $Log set DPLibs   = ( $lst )

flog $Log set LD     = ( $Link $SFLAGS )
flog $Log set PyPath = $DevLib/python${PyVers}
flog $Log set PyPact = $PyPath/pact-${PyPACTVers}

flog $Log set Libs   = ( $LDRPath -L$DevLib $LDPath $MDGLibs -lc -lm $ShLibs $DPLibs $MDLibs )
if ("$GCCLib" != "") then
   flog $Log set Libs = ( $Libs -L$GCCLib -lgcc )
endif

flog $Log set CFPDB = ""
flog $Log set CFPGS = ""

# NOTE: IBM model is difficult - grrrrrrrrrrr
if ($OS == AIX) then
   flog $Log set CFPDB = ( -bE:${SrcDir}/pypdb.exp -bI:${PyCfgDir}/python.exp -bM:SRE -bnoentry -bloadmap:pypdb.map )
   flog $Log set CFPGS = ( -bE:${SrcDir}/pypgs.exp -bI:${PyCfgDir}/python.exp -bM:SRE -bnoentry -bloadmap:pypgs.map )
endif

if (!(-d $PyPact)) then
   flog $Log mkdir -p $PyPact
endif
flog $Log pushd $PyPact

NoteD $Log ""
NoteD $Log "Linking PyPact bindings in:"
NoteD $Log "   $PyPact"
NoteD $Log ""
flog $Log $RM $PyPact/*.so _*.so
flog $Log $RM $PyPact/*.o

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# link PyPDB

NoteD $Log -n "   Linking pdb ..... "
Note $Log ""

flog $Log $RM $PyPact/libpypdb.so $PyPact/libpypdb.so.1 _pdb.so
flog $Log $AR ../../libpy.a
flog $Log $AR ../../libscore.a
flog $Log $AR ../../libpml.a
flog $Log $AR ../../libpdb.a

# remove PGS function - they do not belong with PDB module
set lrmf = ""
set lrmf = ( $lrmf pgsmodule.o pgsdevice.o pgsgraph.o pgsimage.o )
set lrmf = ( $lrmf pgspalette.o utilpgs.o )
set lrmf = ( $lrmf gp-pgs.o gp-panacea.o gp-scheme.o )
flog $Log $RM $lrmf
unset lrmf

flog $Log $LD ${CFPDB} -o $PyPact/libpypdb.so.1 *.o $Libs
set LStat = $status
if ($LStat == 0) then
   NoteD $Log "ok"
   flog $Log ln -s $PyPact/libpypdb.so.1 $PyPact/libpypdb.so
   flog $Log ln -s $PyPact/libpypdb.so.1 _pdb.so
   flog $Log $RM *.o _____* __.SYMDEF*
   flog $Log ls -l $PyPact/*pdb*
else
   NoteD $Log "ng ($LStat)"
   @ Err = $Err + 1
endif

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# link PyPGS

NoteD $Log -n "   Linking pgs ..... "
Note $Log ""

flog $Log $RM $PyPact/libpypgs.so $PyPact/libpypgs.so.1 _pgs.so
flog $Log $AR ../../libpy.a
flog $Log $AR ../../libscore.a
flog $Log $AR ../../libpml.a
flog $Log $AR ../../libpdb.a
flog $Log $AR ../../libppc.a
flog $Log $AR ../../libpgs.a

# remove unneeded objects
set lrmf = ""
set lrmf = ( $lrmf gp-panacea.o gp-scheme.o )
flog $Log $RM $lrmf
unset lrmf

flog $Log $LD ${CFPGS} -o $PyPact/libpypgs.so.1 *.o $Libs
set LStat = $status
if ($LStat == 0) then
   NoteD $Log "ok"
   flog $Log ln -s $PyPact/libpypgs.so.1 $PyPact/libpypgs.so
   flog $Log ln -s $PyPact/libpypgs.so.1 _pgs.so
   flog $Log $RM *.o _____* __.SYMDEF*
   flog $Log ls -l $PyPact/*pgs*
else
   NoteD $Log "ng ($LStat)"
   @ Err = $Err + 1
endif

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

flog $Log ls -l
flog $Log popd

NoteD $Log -n "   Python import ... "
Note $Log ""

# finish up
flog $Log cp pact/pgs.py pact/pdb.py pact/__init__.py $PyPact

flog $Log $Python -c 'import compileall;compileall.main()' $PyPact
set LStat = $status
if ($LStat == 0) then
   NoteD $Log "ok"
else
   NoteD $Log "ng ($LStat)"
   @ Err = $Err + 1
endif

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

if ($Test == TRUE) then
   NoteD $Log -n "   Testing ......... "
   Note $Log ""
   flog $Log setenv PYTHONPATH $PyPath
   flog $Log cd tests
   flog $Log python unittests.py
   set LStat = $status
   if ($LStat == 0) then
      NoteD $Log "ok"
   else
      NoteD $Log "ng ($LStat)"
      @ Err = $Err + 1
   endif
endif

NoteD $Log ""

exit($Err)

