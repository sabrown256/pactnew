#
# TYPES.DB - master table for PACT type management system
#          - it must be defined here to be managed
#          - all other PACT type handling is generated from this
#
# include <cpyright.h>
#

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# STANDARD - standard type table
#          - type fields are:
#          -    type - C type name quoted to capture white space,
#          -           e.g. "long long"
#          -    name - abbreviate name to use in generated function names
#          -    kind - enumerated type kind: bool, int, float, complex, etc
#          -    size - size or method for determining size of a
#          -           single instance
#          -    ptr  - generate "foo *" for "foo" iff TRUE
#          -    min  - minimum value of type
#          -    max  - maximum value of type
#          -    def  - default value of type
#          -    f90  - F90 type name for the C type

standard = {
# type                  name   kind       size     ptr   min        max         def    f90
 "unknown"              unk    OTHER      0        B_F   -          -           -      -    
 "bit"                  bit    OTHER      0        B_F   -          -           -      -    
 "struct"               strct  STRUCT     0        B_F   -          -           -      -    
 "void"                 any    OTHER      0        B_T   -          -           -      -    
 "bool"                 bool   BOOL       sizeof   B_T   BOOL_MIN   BOOL_MAX    B_F    logical
 "char"                 chr    CHAR       sizeof   B_T   SCHAR_MIN  SCHAR_MAX   '\0'   character
 "wchar_t"              wchr   CHAR       sizeof   B_T   WCHAR_MIN  WCHAR_MAX   -      -
 "int8_t"               int8   INT        sizeof   B_T   INT8_MIN   INT8_MAX    0      integer(1)
 "short"                shrt   INT        sizeof   B_T   SHRT_MIN   SHRT_MAX    0      integer(2)
 "int"                  int    INT        sizeof   B_T   INT_MIN    INT_MAX     0      integer
 "long"                 lng    INT        sizeof   B_T   LONG_MIN   LONG_MAX    0L     integer(8)
 "long long"            ll     INT        sizeof   B_T   LLONG_MIN  LLONG_MAX   0LL    integer(8)
 "float"                flt    FLOAT      sizeof   B_T   -FLT_MAX   FLT_MAX     0.0    real(4)
 "double"               dbl    FLOAT      sizeof   B_T   -DBL_MAX   DBL_MAX     0.0    real(8)
 "long double"          ldbl   FLOAT      sizeof   B_T   -LDBL_MAX  LDBL_MAX    0.0    real(16)
 "float _Complex"       fcx    COMPLEX    sizeof   B_T   -FLT_MAX   FLT_MAX     0.0    complex(4)
 "double _Complex"      dcx    COMPLEX    sizeof   B_T   -DBL_MAX   DBL_MAX     0.0    complex(8)
 "long double _Complex" ldcx   COMPLEX    sizeof   B_T   -LDBL_MAX  LDBL_MAX    0.0    complex(16)
 "quaternion"           qut    QUATERNION sizeof   B_T   -DBL_MAX   DBL_MAX     Q_ZERO
 "FILE"                 file   STRUCT     sizeof   B_T   -          -           -      -    
}

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# ALIAS - alias table
#       - aliases imply the same variables for the new name
#       - alias fields are:
#       -    new name - name of the new type in quotes
#       -    existing - name of the existing type in quotes
#       -    ptr      - generate "foo *" for "foo" iff TRUE

alias = {
# new name        existing               ptr
 "enum"           "int"                   B_F
 "pboolean"       "int"                   B_T
 "size_t"         "unsigned long"         B_T
 "ssize_t"        "long"                  B_T
 "integer"        "int"                   B_T
 "int16_t"        "short"                 B_T
 "int32_t"        "int"                   B_T
 "int64_t"        "long long"             B_T
 "REAL"           "double"                B_T
 "float32_t"      "float"                 B_T
 "float64_t"      "double"                B_T
 "float128_t"     "long double"           B_T
 "complex32_t"    "float _Complex"        B_T
 "complex64_t"    "double _Complex"       B_T
 "complex128_t"   "long double _Complex"  B_T
}

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

