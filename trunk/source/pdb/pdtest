#!/bin/csh -f
#
# PDTEST - test PDB
#
# Source Version: 3.0
# Software Release #: LLNL-CODE-422942
#
# include "cpyright.h"
#

setenv Package pdb
setenv Test    ""
set vgdirs = ( score )
source ../scripts/test-env

set Tests = ""
set TestL = ""

while ($#argv > 0)
   switch ($1)
      case -f:
           shift
           set Tests = ( $1 )
           breaksw
      case -h:
           echo ""
           echo "Usage: pdtest [-h] [-f #]"
           echo "  f  format version to use in tests"
           echo "  h  this help message"
           echo ""
           exit(1);
      case -*:
           breaksw
      default:
           set TestL = ( $TestL $1 )
           breaksw
   endsw
   shift
end

cd $TestDir

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# omit tests - usually in difficult CROSS_COMPILE situation

if ($RUN_TESTS == FALSE) then
   NoteD $Log ""
   NoteD $Log "PDB TESTS ... omitted"

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# run the tests

else if (-e $SrcDir/pdb.h) then

   echo ""
   echo "PDB TEST ..."

   rm -f $Log $Log
   touch $Log

   Note $Log "BinDir = $BinDir"
   Note $Log "path   = $path"  
   Note $Log "MAKE   = $MAKE"

   setenv Tmp $cwd/.tmp.$$

   Note $Log "Parallel = |$Parallel|"
   Note $Log "MPI      = |$MPI|"
   flog $Log ../../../manager/pwhich pact
   flog $Log ../../../manager/pwhich cc

   NoteD $Log -n "                    Compiling PDB tests ..... "
   Note $Log ""

   flog $Log pushd $SrcDir
   flog $Log $MAKE Cstd
   set TStatus = $status
   flog $Log popd

   if ($TStatus != 0) then
      NoteD $Log ""
      NoteD $Log "                         Can't build PDB Test Programs"
   else
      NoteD $Log "DONE"
      NoteD $Log ""

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# MAIN

      if ("$TestL" == "") then
         set TestL = ""
         set TestL = ($TestL master c99 perf)
         set TestL = ($TestL bufa bufb appdef gatsca checksum)
         set TestL = ($TestL usrtyp net fd hyper fixdnrm attr trans)
         set TestL = ($TestL cast typdef browse free)
         set TestL = ($TestL smp dp)
      endif
    
      if ("$Tests" == "") then

# GOTCHA: OSX takes too long on this test so just do one
         if ("$OS" == Darwin) then
            set Tests = ( 3 )
         else
            set Tests = ( 2 3 )
         endif
      endif

      foreach vrs ($Tests)

         if ($vrs == 2) then
            set Vers = "II"
         else
            set Vers = "III"
         endif
         NoteD $Log "      Version $Vers Series"
         set vtime = `$TIMER -r`

         foreach i ($TestL)
            $SrcDir/tests/$i $vrs
            @ nerr = $nerr + $status
         end

         set vtime = `$TIMER -b $vtime`
         NoteD $Log ""
         if ($nerr == 0) then
            NoteD $Log "      Version $Vers ... OK ($vtime)"
         else
            NoteD $Log "      Version $Vers ... FAIL ($vtime)"
         endif
         NoteD $Log ""
      end
   endif

   $TEST_CHECK clean -n PDB -e $nerr -raf "$Tmp"

   set xstatus = $status

endif

$TEST_CHECK fin -e $xstatus

exit($status)

