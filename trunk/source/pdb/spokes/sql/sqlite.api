/*
 * SQLITE.API - define SQLITE API for PACT
 *
 * #include "cpyright.h"
 *
 */

#ifndef SQLITE_API_PACT

#define SQLITE_API_PACT

typedef struct s_sqlite3_methods sqlite3_methods;

struct s_sqlite3_methods
   {int (*close)(sqlite3 *db);                            /* sqlite3_close */
    void (*free_table)(char **res);                  /* sqlite3_free_table */
    int (*exec)(sqlite3 *db, const char *sql,              /* sqlite3_exec */
		int (*callback)(void *, int, char **, char **),
		void *a, char **err);

    int (*get_table)(sqlite3 *db, const char *sql,    /* sqlite3_get_table */
		     char ***res, int *nr, int *nc, char **err);

    int (*open_v2)(const char *fname, sqlite3 **db,     /* sqlite3_open_v2 */
		   int flags, const char *vfs);
    int (*open)(const char *fname, sqlite3 **db);};        /* sqlite3_open */

static sqlite3_methods
 _S3_mth;

/*--------------------------------------------------------------------------*/
/*--------------------------------------------------------------------------*/

#define DYNAMICALLY_LINKED

/* _SQLITE_SET_METHODS - setup the methods for SQLITE access */

void _SQLITE_set_methods(void)
   {

    if (_S3_mth.open == NULL)

#ifdef DYNAMICALLY_LINKED

/* dynamically linked way */
       {int rv;

	rv = SC_so_register_func(OBJ_SO, "libsqlite3.so", "sqlite3",
				 NULL, NULL, NULL, NULL);
	if (rv == FALSE)
	   PD_error("CANNOT LOAD 'libsqlite3.so'", PD_OPEN);

# ifdef HAVE_SQLITE_V2
	_S3_mth.open_v2    = SC_so_get(OBJ_SO, "sqlite3", "sqlite3_open_v2");
# endif

	_S3_mth.open       = SC_so_get(OBJ_SO, "sqlite3", "sqlite3_open");
	_S3_mth.close      = SC_so_get(OBJ_SO, "sqlite3", "sqlite3_close");
	_S3_mth.get_table  = SC_so_get(OBJ_SO, "sqlite3", "sqlite3_get_table");
	_S3_mth.free_table = SC_so_get(OBJ_SO, "sqlite3", "sqlite3_free_table");
	_S3_mth.exec       = SC_so_get(OBJ_SO, "sqlite3", "sqlite3_exec");};

#else

/* statically linked way */
       {

# ifdef HAVE_SQLITE_V2
	_S3_mth.open_v2    = sqlite3_open_v2;
# endif

	_S3_mth.open       = sqlite3_open;
	_S3_mth.close      = sqlite3_close;
	_S3_mth.get_table  = sqlite3_get_table;
	_S3_mth.free_table = sqlite3_free_table;
	_S3_mth.exec       = sqlite3_exec;};

#endif

    return;}

/*--------------------------------------------------------------------------*/
/*--------------------------------------------------------------------------*/

#define sqlite3_open        _S3_mth.open
#define sqlite3_close       _S3_mth.close
#define sqlite3_get_table   _S3_mth.get_table
#define sqlite3_free_table  _S3_mth.free_table
#define sqlite3_exec        _S3_mth.exec

#endif
