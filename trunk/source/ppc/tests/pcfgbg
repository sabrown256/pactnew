#!/usr/bin/env tcsh
#
# PCFGBG - test behavior of processes and TTY's in foreground and background
#        - looking for behaviors:
#        -   1) processes should not suspend in foreground or background
#        -   2) terminal sizes should be propagated at least when the
#        -      process group leader is running in the foreground
#        -   3) most results should be the same whether run foreground or background
#        -   4) try not to be too dependent on how the parent handles the
#        -      terminal or job control
#
# Source Version: 3.0
# Software Release #: LLNL-CODE-422942
#
# include "cpyright.h"
#

set exe    = `which pact`
set Root   = $exe:h
set Root   = $Root:h
set BinDir = $Root/bin
set EtcDir = $Root/etc
set path   = ( $BinDir $path )

source $EtcDir/env-csh

if ($cwd:t == ppc) then
   set SrcDir = $cwd
else if ($cwd:t == test) then
   pushd ../.. >& /dev/null
   set SrcDir = $cwd
   popd >& /dev/null
endif

alias fbkg      'echo "Command: ( \!\!:2-$ & )" >>& \!\!:^ ; eval "( \!\!:2-$ & )" >>& \!\!:^'

set Mode = unspecified

while ($#argv > 0)
   switch ($1)
      case -bg:
           set Mode = background
           breaksw
      case -fg:
           set Mode = foreground
           breaksw
   endsw
   shift
end

InitLog Log $cwd/log.fgbg.$LogSfx

Note $Log "Mode = $Mode"

set exe  = $BinDir/pcexec
set DMNZ = ( dmnz -i 5 -n 1 )
set InF  = $SrcDir/tests/pcfgbg.inp

flog $Log pushd $SrcDir
flog $Log pact proc
flog $Log rehash
flog $Log popd

@ Err    = 0
@ iline  = 0
@ nlines = `wc -l $InF | awk '{print $1}'`

set noglob

while ($iline <= $nlines)

   @ iline = $iline + 1

   set c = ( `awk 'NR == '$iline' { print }' $InF` )

   if (("$c" =~ \#*) || ("$c" == "")) continue

# reduce the case '( cmnd1 | cmd2 ... )' to cmnd1
   if ("$c" =~ \(*|*) then
      set ct = ( `expr "$c" : '(\([^|]*\)|.*'` )
   else
      set ct = ( $c )
   endif

   @ CCount = `echo $ct | wc -c`
   @ NDots  = 14 - $CCount
   set Fill = "$ct "
   while ($NDots > 0)
      set Fill = "$Fill."
      @ NDots = $NDots - 1
   end

   set lErr = 0
   NoteD $Log -n "                          $Fill "
   Note $Log ""

   set BTime = `timer -r`

# run the command in the foreground for each shell
   foreach shell (/bin/csh /bin/sh /bin/ksh)
      if (-x $shell) then
         Separator $Log
         if ($shell == /bin/csh) then
            set cm = ( "$c" )
         else
            set cm = ( `echo "$c" | sed 's/|&/|/g'` )
         endif

         flog $Log $shell -cf "$cm"
         set LStat = $status
         if (($LStat == 0) || ("$ct" =~ stty*)) then
            Note $Log "passed"
            echo -n "."
         else
            Note $Log "failed($LStat)"
            echo -n "x"
            set lErr = 1
         endif
      else
         echo -n "o"
      endif
   end
   NoteD $Log -n " "

# run the command in the background
   Separator $Log
   fbkg $Log "$c"
   set LStat = $status
   if ($LStat == 0) then
      Note $Log "passed"
      echo -n "."
   else
      Note $Log "failed($LStat)"
      echo -n "x"
      set lErr = 2
   endif
   sleep 5
   NoteD $Log -n " "

# run via pipe, socket, and pty
   foreach i ("-p" "-s" "-t")
      Separator $Log
      flog $Log $CFE $DMNZ $exe -q -d $i /bin/csh -cf "$c"
      set LStat = $status
      if (($LStat == 0) || ("$ct" =~ stty*)) then
         Note $Log "passed"
         echo -n "."
      else
         Note $Log "failed($LStat)"
         echo -n "x"
         set lErr = 3
      endif
   end

   Separator $Log
   set ETime = `timer -b $BTime`
   if ($lErr == 0) then
      NoteD $Log " ok ($ETime)"
   else
      NoteD $Log " ng ($ETime)"
      @ Err = $Err + 1
   endif

end

Note $Log "Exit status = $Err"

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

$TEST_CHECK part -a pcfgbg -e $Err

exit($status)

