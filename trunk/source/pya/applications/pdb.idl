//
// Source Version: 9.0
// Software Release #: LLNL-CODE-422942
//
// include cpyright.h
//

module pdb 
    lang python {
        name='_pdb', abbrev='PP';
        output_dir='..';
        file_per_class=1;
        write_header=1;
        includes=['<pdb_int.h>', '<pputil.h>'];
        prolog = [
            "Source Version: 9.0",
            "Software Release: LLNL-CODE-422942",
            "",
            "include cpyright.h"
            ];
    }
    {
    void print_controls(
        in int i,
        in int j
        );

    lang C { prefix=''; }

    typedef float REAL;

    typedef sequence<REAL> rarray
        lang C {ignore;}
        lang python {extractor=REAL_array_extractor;}
    ;
    typedef sequence<double> darray
        lang C {ignore;}
        lang python {extractor=darray_extractor;}
    ;
    typedef sequence<int> iarray
        lang C {ignore;}
        lang python {extractor=iarray_extractor;}
    ;
    typedef sequence<sequence<long>> pplong
        lang C {ignore;}
        lang python {extractor=pplong_extractor;}
    ;

    // This kludge allows NULL as a pointer
    typedef sequence<void> voidptr
        lang C {ignore;}
        lang python {py_format=z;};

    const int TRUE    = 1;
    const int FALSE   = 0;
    const int ON      = 1;
    const int OFF     = 0;
    const float SMALL = 1.0e-100;
    const float HUGE  = 1.0e100;

    // PyPact worker routines
    lang C { prefix=PP_; }

    // score memory routines
    lang C { prefix=SC_; }

    int zero_space(in int flag);
    address alloc(in long nitems, in long bytepitem, in string name);
    address realloc(in address p, in long nitems, in long bytepitem);
    void sfree(in address p);
    void mem_print(in address p);
    int mem_trace();
    int reg_mem(in address p, in long length, in string name);
    int dereg_mem(in address p);
    string mem_lookup(in address p);
//    int mem_map(in FILE *fp, in int flag);
    long mem_monitor(in int old, in int lev, in string id, in string msg);
    long mem_chk(in int type);
    int is_score_ptr(in address p);
    long arrlen(in address p);
    int mark(in address p, in int n);
    int ref_count(in address p);
    int set_count(in address p, in int n);
    void permanent(in address p);
    int arrtype(in address p, in int type);

    void pause();

    void set_io_hooks(in int whch);

    void setform(in int array, in int structure, in int scalar);

    // PML
    
    lang C { prefix=''; }

    const int Z_CENT   =  -1;   // zone centered
    const int N_CENT   =  -2;   // node centered
    const int F_CENT   =  -3;   // face centered
    const int E_CENT   =  -4;   // edge centered
    const int U_CENT   =  -5;   // uncentered
    
    const float TOLERANCE = 1.0e-10;

    lang C { prefix=PM_; }

    const string AC_S              = "Arbitrarily-Connected";
    const string LR_S              = "Logical-Rectangular";
    const string MAP_INFO_P_S      = "PM_map_info *";
    const string MAPPING_P_S       = "PM_mapping *";
    const string SET_P_S           = "PM_set *";
    const string MAP_INFO_S        = "PM_map_info";
    const string MAPPING_S         = "PM_mapping";
    const string MESH_TOPOLOGY_S   = "PM_mesh_topology";
    const string MESH_TOPOLOGY_P_S = "PM_mesh_topology *";
    const string SET_S             = "PM_set";

    class field
        lang python {file_name='pmlfield.c',
                     member_name=opers,
                     getter='PPfield_from_ptr(%s)';
                    }
        {
        }

    class mesh_topology
        lang python {file_name='pmltopology.c',
                     member_name=mt,
                     getter='PPtopology_from_ptr(%s)';
                    }
        {
            readonly attribute int n_dimensions;       // number of dimensions
            readonly attribute iarray n_bound_params;  // number of bound params at each level
            readonly attribute iarray n_cells;         // number of cells at each level
            readonly attribute pplong boundaries;      // boundary info array at each level

            mesh_topology make_topology(in int nd, in iarray bnp, in iarray bnc, in pplong bnd)
                lang C {ctor;}
            ;
        }

 class set
        lang python {file_name='pmlset.c',
                     member_name=set,
                     getter='PPset_from_ptr(%s)';
                    }
        {
            attribute string name;
            readonly attribute string element_type;
            readonly attribute int dimension;
            readonly attribute iarray max_index;
            readonly attribute int dimension_elem;
            readonly attribute long n_elements;
            readonly attribute voidptr elements;
            readonly attribute string es_type;
            readonly attribute string extrema;
            readonly attribute string scales;
            readonly attribute field opers;
            readonly attribute rarray metric;
            readonly attribute string symmetry_type;              // describe any symmetries
            readonly attribute voidptr symmetry;
            readonly attribute string topology_type;              // describe ordering and connectivity
            readonly attribute voidptr topology;
            readonly attribute string info_type;                  // provide any additional information
            readonly attribute voidptr info;
            readonly attribute set next;
    
            set make_set(in string name, in string type, in int cp,
                         in long ne,
                         in int nd, in int nde, in iarray maxes,
                         in voidptr elem,
                         in field opers, in rarray metric,
                         in string symtype, in voidptr sym,
                         in string toptype, in voidptr top,
                         in string inftype, in voidptr inf,
                         in set next)
                lang C {name=_PM_make_set, ctor; }
            ;
        }

    set make_set_1d(in string name, in string type, in int cp,
                    in int nd,
                    in int max, in int nde, in rarray elem)
        lang C {name=PM_make_set;}
    ;
 
    // varargs
    set make_ac_set(in string name, in string  type, in int cp,
                    in mesh_topology mt, in int nde,
                    in rarray x, in rarray y);
 
    class mapping
        lang python {file_name='pmlmapping.c',
                     member_name=map,
                     extractor=mapping_extractor,
                     getter='PPmapping_from_ptr(%s)';
                    }
        {
            readonly attribute string name;              // the mapping's name
            readonly attribute string category;          // the category to which mapping belongs
            readonly attribute set domain;               // the mapping's domain
            readonly attribute set range;                // a subset of the image of DOMAIN under MAP
            readonly attribute string map_type;          // describe the data type pointed to by map
            readonly attribute voidptr map;              // describe the mapping between the DOMAIN and RANGE
            readonly attribute int file_type;            // file type ASCII, BINARY, PDB
            readonly attribute voidptr file_info;        // file info - cast to some struct with info
            readonly attribute string file;              // file name for mapping
            readonly attribute mapping next;

            mapping make_mapping(in string name, in string cat,
                                 in set domain, in set range,
                                 in int centering, in mapping next)
                lang C {ctor;}
            ;
            
        }

    lang C { prefix=PD_; }
    
    class defstr
        lang C { typedef_name=defstr, ignore; }
        lang python {
              member_name=dp,
              call, print, dealloc, as_mapping;}
        {
        readonly attribute string type;
        readonly attribute long size_bits;
        readonly attribute long size;
        readonly attribute int alignment;    // type begins on byte boundary divisible by alignment 
        readonly attribute int n_indirects;  // number of indirections
        readonly attribute int is_indirect;  // TRUE iff type is a pointer type
        readonly attribute int convert;
        readonly attribute int onescmp;      // TRUE iff ones complement arithmetic - old machines
        readonly attribute int unsgned;      // TRUE iff the integral type is unsigned
        readonly attribute int order_flag;
//        readonly attribute sequence<int> order;
//        readonly attribute sequence<long> format;
//        readonly attribute memdes *members;};


        // mapping behavior
//        void clear();
        void has_key(in string key);
        void items();
        void keys();
//        void update(in void dict);
        void values();
        void get();

        
    }

    class pdbdata
        lang C { ignore; }
        lang python { attributes={ }; // override default object
                      dealloc, print, str, getattribute, as_sequence, as_buffer;}
    {
    }

    class hashtab
        lang C {type_name=HASHTAB, prefix=SC_; }
        lang python { attributes={ }; // override default object
                      dealloc, repr, as_mapping;}
        {
        void install(in string key,
                     in string obj,
                     in string type);
        void def_lookup(in string key);

        // mapping behavior
        void clear();
        void has_key(in string key);
        void items();
        void keys();
        void update(in sequence<void> dict);
        void values();
        void get();
    }

    // association list
    class assoc
//        lang C {ignore; }
        lang C {typedef_name=pcons; }
        lang python { member_name=alist,
                      getter='PP_assoc_from_ptr(%s)',
                      extractor=PP_assoc_extractor,
                      dealloc, repr, as_mapping;}
        {
        // mapping behavior
        void clear();
        void has_key(in string key);
        void items();
        void keys();
        void update(in sequence<void> dict);
        void values();
        void get();
    }

    class memdes
        lang C { typedef_name=memdes, ignore; }
        lang python { member_name=desc,
            dealloc; }
        {
        readonly attribute string member;
//        readonly attribute off_t member_offs;
        readonly attribute string cast_memb;
        readonly attribute long cast_offs;
        readonly attribute int is_indirect;
        readonly attribute string type;
        readonly attribute string base_type;
        readonly attribute string name;
//        readonly attribute dimdes *dimensions;
        readonly attribute long number;
   }

    class PDBfile
        lang C { typedef_name=PDBfile, object_index=0; }
        lang python { member_name=object; }
        {
        readonly attribute string name;
        readonly attribute string type;
        readonly attribute sequence<hashtab> symtab;
        readonly attribute sequence<hashtab> chart;
        readonly attribute sequence<hashtab> host_chart;
        readonly attribute sequence<hashtab> chart_hashed;
        readonly attribute sequence<hashtab> host_chart_hashed;
        readonly attribute sequence<hashtab> attrtab;
        readonly attribute string previous_file;
        readonly attribute string date;
        readonly attribute int mode;
        readonly attribute int default_offset;
        readonly attribute int virtual_internal;
        readonly attribute int system_version;
        readonly attribute int major_order;


        void open(
            in string name,
            in string mode
            )
            lang C { ctor, object_name=''; };

        void flush();
        
        void close();

        void write(
            in string  name,
            in address var,
            in string  outtype
            );

        void write_raw(
            in string  name,
            in string  type,
            in address var,
            in sequence<int> ind
            );

        void read(
            in string  name,
            in address vr
            );

        void defent(
            in string name,
            in string type
            );

        void defstr(
            in string name
            );

        void cd(
            in string dirname
            );

        void mkdir(
            in string dirname
            );

        void ln(
            in string var,
            in string link
            );

        void ls(
            in string path,
            in string type
            );

        void pwd(
            );

        // Return best guess at C type of object
        void get_obj_descr(in voidptr obj);

        // treat class 'cls' as defstr 'type'
        void register_class(in voidptr cls, in string type);

        // clear all structure info from vif
        void reset_vif();

    }

    // open a virtual open file.
    PDBfile open_vif(
        in string name
        )
        lang C { name=PP_open_vif; }
    ;
        
    // access members of pdbdata

    defstr getdefstr(in pdbdata obj);
    void gettype(in pdbdata obj);
    void getfile(in pdbdata obj);
    void getdata(in pdbdata obj);
    void getmember(in pdbdata obj, in string name);
    void unpack(in pdbdata obj);
    
}

