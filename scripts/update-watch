#!/bin/csh -f
#
# UPDATE-WATCH - manage semaphore driven code updates (slave side)
#
# Source Version: 3.0
# Software Release #: LLNL-CODE-422942
#
# include "cpyright.h"
#

unalias *

set Exe = `dirname $0`

# look for PACT and use it if available
# if you have PACT you get certain defaults and otherwise
# you have to specify everything in the command line
set PACT = `pwhere -n 1 pact`
if (-x "$PACT") then
   set Exe  = `rpath $0`
   set Root = $Exe:h
   set Root = $Root:h
   if (!(-d $Root/include)) then
      set Exe  = `pwhere -n 1 pact`
      set Root = $Exe:h
      set Root = $Root:h
   endif
   source $Root/etc/functions-pact.csh

   foreach i (PSY_SITE PSY_TYPE PSY_ASRoot PSY_AIRoot)
      setenv $i `$PACT -info $i`
   end

# PACT must be on your path - end of story
#   set lsys = `pwhere -n 1 sys-site`
#   eval `$lsys`

else
   setenv PSY_SITE unknown
   alias flog      'echo "Command: \!\!:2-$" >>& \!\!:^ ; \!\!:2-$ >>& \!\!:^'
   alias Note      'echo \!\!:2-$ >>& \!\!:^'
   alias InitLog   'set t = \!\!:2 ; rm -f $t ; echo $USER >&! $t ; date >> $t ; pwd >> $t ; echo "" >> $t ; setenv \!\!:1 $t ; unset t'
endif

set SSH       = `pwhere -n 1 ssh`
set UpF       = ""
set Tags      = ""
set AllSites  = FALSE
set Watch     = update-watch
set STime     = 60
set LSite     = $PSY_SITE
set LogAction = FALSE

while ($#argv > 0)
   switch ($1)
      case -a:
           set AllSites = TRUE
           breaksw
      case -f:
           shift
           set UpF = $1
           breaksw
      case -h:
           echo ""
           echo "Usage: update-watch [-a] [-h] [-f <update-file>] [-l] [-s <site>] [<tags>]"
           echo ""
           echo "   a  - do <tags> for all sites"
           echo "   f  - use the specified <update-file>"
           echo "   h  - this help message"
           echo "   l  - log activity for debugging"
           echo "   s  - specify the <site> to monitor"
           echo "   <tags> are of the form <project>.<tag>"
           echo ""
           exit(1)
           breaksw
      case -l:
           set LogAction = TRUE
           breaksw
      case -s:
           shift
           set LSite = $1
           breaksw
      default:
           set Tags = ( $Tags $1 )
           breaksw
   endsw
   shift
end

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# SETUP - get ready to go to work

if ("$UpF" == "") then

# GOTHA: OLD_DB_VARS look for old variable
   if ($?UPDATE_PSY_DB == 1) then
      set UpF = $UPDATE_PSY_DB
   else if ($?DB_UPDATE_SYS == 1) then
      set UpF = $DB_UPDATE_SYS
   else if ($?PSY_AIRoot == 1) then
      if (-f $PSY_AIRoot/pact/db/update-sys-db) then
         set UpF = "$PSY_AIRoot/pact/db/update-sys-db"
      endif
   endif
   if ("$UpF" == "") then
      echo "No update file specified - exiting"
      exit(1)
   endif
endif

if ("$UpF" !~ /*) then
   set UpF = $HOME/$UpF
endif

set Loc = `awk '$1 ~ /Loc/  {print $3}' $UpF`

cd $Loc >& /dev/null

set Ret = 0

if ($LogAction == TRUE) then
   InitLog Log $cwd/.log.$LSite.$USER
endif

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# check for other update-watch sessions running with the same database

set pids = ( `ls-jobs update-watch | grep $UpF | awk '{ print $2 }'` )
set npids = ""
foreach p ($pids)
   if ($p != $$) then
      set npids = ( $npids $p )
   endif
end

if ("$npids" != "") then
   Note $Log "Orphaned/competing update-watch sessions: $npids"
   Note $Log "Should do:   kill -9 $npids"
endif

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

# WORK - do the main business

while (1)
   touch $LSite.+
   set SemFL = ( `ls -t -1 $LSite.* |& grep -v $LSite.+ | grep -v $UpF:t` )
   rm -f $LSite.+
   if ("$SemFL" != "") then
      set SemF = ( `echo "$SemFL[1]" | sed 's/\./ /g'` )
      set Site = $SemF[1]
      set Proj = $SemF[2]
      set Tag  = $SemF[3]

      if ($LSite == $Site) then
         @ Ret = `awk '$1 == "entry" && $2 == "'$Site'" && $3 == "'$Proj'" && $4 == "'$Tag'" {print NR}' $UpF`
         rm -f $SemFL[1] >& /dev/null
         if ($LogAction == TRUE) then
            Note $Log "UpF   = |$UpF|"
            Note $Log "SemFL = |$SemFL|"
            Note $Log "Site  = |$Site|"
            Note $Log "Proj  = |$Proj|"
            Note $Log "Tag   = |$Tag|"
            Note $Log "Ret   = |$Ret|"
            Note $Log "Line  = |`head -n $Ret $UpF | tail -n 1`|"
         endif
         break
      endif
   endif
   sleep $STime
end

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

if ($LogAction == TRUE) then
   Note $Log "Tag matches line $Ret in $UpF"
endif

exit($Ret)

