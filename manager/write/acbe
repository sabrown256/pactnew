#
# ACBE - coding common to all abstract compiler drivers
#
# include "cpyright.h"
#

set memlg = FALSE

# check abstract options

set adsp = ""
if ($dbg == TRUE) then
   set adsp = ( $adsp -ag )
   set args = ( $fdbg $args )
else if ($opt == TRUE) then
   set adsp = ( $adsp -ao )
   set args = ( $fopt $args )
endif

if ($prf == TRUE) then
   set adsp = ( $adsp -aprf )
   set args = ( $fprf $args )
endif

set CI = ( $CI[1] $args )
if ($exe =~ *pgcc*) then
   set mangle = TRUE
else
   set mangle = FALSE
endif

if ($vrb > 2) then
   echo "inf  = |$inf|"
   echo "outf = |$outf|"
   echo "co   = |$co|"
   echo "arc  = |$arc|"
   echo "args = |$args|"
   echo "lib  = |$lib|"
endif

unsetenv PACT_CC_FAMILY
unsetenv PACT_CC_VERSION
unsetenv PACT_CC_PATH

unsetenv PACT_FC_FAMILY
unsetenv PACT_FC_VERSION
unsetenv PACT_FC_PATH

unsetenv PACT_CX_FAMILY
unsetenv PACT_CX_VERSION
unsetenv PACT_CX_PATH

set stl = ( `file-time -m sec $inf` )
@ nstl = $#stl

if ("$arc" != "") then
   set atl = ( `file-time -m sec $arc` )
   @ natl = $#atl
   set tmpdir = $cwd/$tmpr
   if (!(-d $tmpdir)) then
      mkdir -p $tmpdir >& /dev/null
   endif
else
   set tmpdir = .
endif

@ nc = $#inf
set lfo = ""

@ lf = 1
while ($lf < $nstl)
   set fi = $stl[$lf]
   @ lf  = $lf + 1
   @ sts = ( `echo $stl[$lf] | sed 's|-||g' | sed 's|^0*||'` )
   @ lf  = $lf + 1
 
   set ft = $fi:t
   set fo = $ft:r.o

   if (($nstl > 2) || ("$arc" != "")) then
      set co = TRUE

      @ i = 1
      @ ats = 00000000000000
      while ($i < $natl)
         if ($atl[$i] == $fo) then
            @ i   = $i + 1
            @ ats = ( `echo $atl[$i] | sed 's|-||g' | sed 's|^0*||'` )
            break
         else
            @ i = $i + 2
         endif
      end
      if ("$sts" < "$ats") then
         if ($vrb > 1) then
            echo "   $fo up to date: $sts < $ats"
         endif
         continue
      endif

      if ($memlg == TRUE) then
         set lfo = ( $lfo $fo )
      endif
      set fo = $tmpdir/$fo
   else if ("$outf" != "") then
      set fo = $outf
   endif

   rm -f $fo

   if ($fi =~ *.l) then
      set fl = $fi
      set fb = $fi:r
      set fi = $tmpdir/$fb.c
      set ft = $tmpdir/lex.yy.c

      set cmd = "${LEX} -t $fl"
      if ($vrb > 0) then
         echo "   $cmd >&! $ft"
      endif

      $cmd >&! $ft
      @ err = $err + $status
      sed "s|lex.yy.c|$fi:t|" $ft | sed "s|yy|${fb}_|g" >&! $fi
      rm -f $ft
   else if ($fi =~ *.y) then
      set fy = $fi
      set fb = $fi:r
      set fi = $tmpdir/$fb.c
      set ft = $tmpdir/y.tab.c
      rm -f $ft

      set cmd = "${YACC} $fy"
      if ($vrb > 0) then
         echo "   $cmd"
      endif

      $cmd
      @ err = $err + $status
      sed "s|y.tab.c|$fi:t|" $ft | sed "s|yy|${fb}_|g" >&! $fi
      rm -f $ft
   endif

   set lfi = $fi:t
   set lfo = $fo:t
   if ($mangle == TRUE) then
      set lfi = $lfi:r:r.c
      set lfo = $lfo:r:r.c
   endif

   if ($co == TRUE) then
      set cmd = ( `echo "$CI -o $fo -c $fi $lib" | sed 's|+++|\"|g'` )
      if ($vrb > 1) then
         echo "   $cmd"
      else if ($vrb > 0) then
         echo "   $exe:t $adsp -o $lfo -c $lfi $lib"
      endif
   else
      set cmd = ( `echo "$CI -o $fo $fi $lib" | sed 's|+++|\"|g'` )
      if ($vrb > 1) then
         echo "   $cmd"
      else if ($vrb > 0) then
         echo "   $exe:t $adsp -o $lfo $lfi $lib"
      endif
   endif

   $cmd
   @ err = $err + $status
   $action

   if (($memlg == FALSE) && ("$arc" != "")) then
      pushd $tmpdir >& /dev/null
      set cmd = ( ar rsc $arc $fo:t )
      if ($vrb > 2) then
         echo "   $cmd"
      endif
      $cmd
      @ xstatus = $status
      if ($xstatus == 0) then
         rm -f $fo:t
      else
         @ err = $err + $xstatus
      endif
      popd >& /dev/null
   endif
end

if ($err == 0) then
   if (($memlg == TRUE) && ("$arc" != "")) then
      if ("$lfo" != "") then
         pushd $tmpdir >& /dev/null
         set cmd = ( ar rsc $arc $lfo )
         if ($vrb > 0) then
            echo "   ar rsc $arc"
         endif
         $cmd
         @ xstatus = $status
         if ($xstatus == 0) then
            rm -f $lfo
         else
            @ err = $err + $xstatus
         endif
         popd >& /dev/null
      else
         if ($vrb > 1) then
            echo "   nothing to be done for $arc"
         endif
      endif
   else if (("$outf" != "") && ("$lfo" != "") && ($co == TRUE) && ($nc > 1)) then
      set cmd = ( $LD $args -o $outf $lfo $lib)
      if ($vrb > 1) then
         echo "   $cmd"
      else if ($vrb > 0) then
         echo "   ld $adsp -o $outf $lib"
      endif
      $cmd
      @ xstatus = $status
      if ($xstatus == 0) then
         rm -f $lfo
      else
         @ err = $err + $xstatus
      endif
   endif
endif

