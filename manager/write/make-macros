#!/bin/csh -f
#
# MAKE-MACROS - write the MAKE-MACROS file
#
# Source Version: 3.0
# Software Release #: LLNL-CODE-422942
#
# include "cpyright.h"
#

set Me = $0
source $Me:h/pre-common

Note $WLog "----- write/make-macros -----"
Note $WLog "Write: make-macros"
Note $WLog ""

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

Separator $WLog

NoteD $WLog "   System Dependent MAKE Macros - make-macros"
Note $WLog ""

dbmget $WLog Bits^              \
             CROSS_COMPILE^     \
             FPE_Exe^           \
             HSY_FPU^           \
             HAVE_GNU_FENV^     \
             MAKE_Shared_Libs^  \
             MAKE_Strategy^     \
             Ranlib_Exe^        \
             PSY_Cfg^           \
             PSY_Root^          \
             PSY_TYPE^          \
             PSY_NoExe

setenv EtcDir  $PSY_Root/etc
setenv IncDir  $PSY_Root/include

set LibVers = 1
set psy_cfg = $PSY_Cfg:t

# GOTCHA: several of the lock tests come too late to prevent certain
# kinds of damage to public installs
# the structure of the targets would have to be changed to prevent
# any damage

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

    set STDOUT = $EtcDir/make-macros

    flog $WLog $RM $STDOUT
    flog $WLog touch $STDOUT

    Note $STDOUT "#"
    Note $STDOUT "# MAKE-MACROS - PACT Makefile macros for $psy_cfg"
    Note $STDOUT "#"
    Note $STDOUT ""

    Note $STDOUT 'compilers :'
    Note $STDOUT '	@echo "Principal C compiler is $PACT_CC_EXE"'
    Note $STDOUT '	@which ${CCompiler}'
    Note $STDOUT '	@echo "Std C compiler is ${Std_CC_Exe}"'
    Note $STDOUT '	@echo "Cfg C compiler is ${Cfg_CC_Exe}"'
    Note $STDOUT '	@echo "Cfe C compiler is ${Cfe_CC_Exe}"'
    Note $STDOUT '	@echo "Principal Fortran compiler is $PACT_FC_EXE"'
    Note $STDOUT '	@which ${FCompiler}'
    Note $STDOUT '	@echo "Std Fortran compiler is ${Std_FC_Exe}"'
    Note $STDOUT '	@echo "Cfg Fortran compiler is ${Cfg_FC_Exe}"'
    Note $STDOUT '	@echo "Cfe Fortran compiler is ${Cfe_FC_Exe}"'
    Note $STDOUT ''

    if ($MAKE_Shared_Libs == TRUE) then
       Note $STDOUT '#'
       Note $STDOUT '# make shared library'
       Note $STDOUT '#'

       Note $STDOUT 'TGTSLib  = ${LibDir}/lib${LibName}.so'
       Note $STDOUT 'TGTShLib = ${TGTSLib}.'$LibVers
       Note $STDOUT ''

       Note $STDOUT '${TGTShLib} : ${TGTLib}'
       Note $STDOUT '	@[ ! -f ${LibDir}/.lock ] || { echo "${LibDir} is locked" ; exit 1 ; }'
       Note $STDOUT '	@(cd ${PACTTmpDir} ; \'
       Note $STDOUT '	  ${RM} ${TGTSLib} $@ ; \'
       Note $STDOUT '	  ${AR} ${ARXOpt} ${TGTLib} ; \'
       Note $STDOUT '	  echo "${Shared_LD_Exe} ${Shared_LD_Flags} -o $@ *.o -L${LibDir} ${Libs}" ; \'
       Note $STDOUT '	  ${Shared_LD_Exe} ${Shared_LD_Flags} -o $@ *.o -L${LibDir} ${Libs} ; \'
       Note $STDOUT '	  ln -s ${TGTShLib} ${TGTSLib} ; \'
       Note $STDOUT '	  ${RM} *.o _____* )'
       Note $STDOUT ''

       Note $STDOUT 'shared :'
       Note $STDOUT '	@[ ! -f ${LibDir}/.lock ] || { echo "${LibDir} is locked" ; exit 1 ; }'
       Note $STDOUT '	pact install'
       Note $STDOUT '	@[ "${LibName}" != "noname" ] && { pact ${TGTShLib} ; } || { exit 0 ; }'
       Note $STDOUT ''
    else
       Note $STDOUT 'shared :'
       Note $STDOUT '	@echo "No shared libaries requested"'
       Note $STDOUT ''
    endif

    Note $STDOUT '#'
    Note $STDOUT '# make new library'
    Note $STDOUT '#'
    Note $STDOUT '${TGTLib} : ${LibDep}'
    Note $STDOUT '	@[ ! -f ${LibDir}/.lock ] || { echo "${LibDir} is locked" ; exit 1 ; }'
    Note $STDOUT '	${LibAction}'
    if ("$MAKE_Strategy" != "SpaceSaving") then
       Note $STDOUT '	${AR} ${AROpt} ${TGTLib} ${Objs}'
    endif
    if ("$Ranlib_Exe" != "touch") then
       Note $STDOUT '	aranlib ${TGTLib}'
    endif
    Note $STDOUT ''

    Note $STDOUT 'devlib : ${TGTLib}'
    Note $STDOUT ''

    if ($PSY_NoExe == TRUE) then
       Note $STDOUT '#'
       Note $STDOUT '# make place-holder for executable'
       Note $STDOUT '#'
       Note $STDOUT '${TGTBin} : ${BinDep}'
       Note $STDOUT '	echo "${TGTBin}" > ${TGTBin}'
    else
       Note $STDOUT '#'
       Note $STDOUT '# make new executable'
       Note $STDOUT '#'

       if ($MAKE_Shared_Libs == TRUE) then
          Note $STDOUT '${TGTBin} : ${BinDep} ${TGTShLib}'
       else
          Note $STDOUT '${TGTBin} : ${BinDep}'
       endif
       Note $STDOUT '	@[ ! -f ${BinDir}/.lock ] || { echo "${BinDir} is locked" ; exit 1 ; }'
       Note $STDOUT '	${BinAction}'
       Note $STDOUT '	@[ "${TGTBin}" != "nobin" ] && { echo "${Load} ${BinObj} -o ${TGTBin} ${Libs}" ; ${Load} ${BinObj} -o ${TGTBin} ${Libs} ; } || { exit 0 ; }'
    endif
    Note $STDOUT ''

    Note $STDOUT '#'
    Note $STDOUT '# install library'
    Note $STDOUT '#'
    if ($MAKE_Shared_Libs == TRUE) then
       Note $STDOUT 'libinstall : ${TGTLib} ${TGTShLib}'
    else
       Note $STDOUT 'libinstall : ${TGTLib}'
    endif
    Note $STDOUT '	@[ ! -f ${LibDir}/.lock ] || { echo "${LibDir} is locked" ; exit 1 ; }'
    Note $STDOUT '	${INSTALL} ${TGTLib} ${TGTLib}'

    if ("$Ranlib_Exe" != "touch") then
       Note $STDOUT '	aranlib ${LibDir}/${TGTLib}'
    endif
    Note $STDOUT ''

    Note $STDOUT '#'
    Note $STDOUT '# install library archive'
    Note $STDOUT '#'
    Note $STDOUT 'arcinstall : ${TGTLib}'
    Note $STDOUT '	@[ ! -f ${LibDir}/.lock ] || { echo "${LibDir} is locked" ; exit 1 ; }'
    Note $STDOUT '	${AR} ${ARXOpt} ${TGTLib}'
    Note $STDOUT '	${AR} ${AROpt} ${LibDir}/${TGTArc} *.o'
    Note $STDOUT '	@${RM} *.o'

# NOTE: this usage should reflect the libinstall target usage
#       some SUN systems insist on it!
    if ("$Ranlib_Exe" != "touch") then
       Note $STDOUT '	aranlib ${LibDir}/${TGTArc}'
    endif
    Note $STDOUT ''

    Note $STDOUT '#'
    Note $STDOUT '# install includes'
    Note $STDOUT '#'
    Note $STDOUT 'incinstall : ${TGTInc}'
    Note $STDOUT '	@[ ! -f ${IncDir}/.lock ] || { echo "${IncDir} is locked" ; exit 1 ; }'
    Note $STDOUT '	${IncAction}'
    Note $STDOUT '	@[ "${TGTInc}" != "noinc" ] && { echo "sinstall ${TGTInc} ${IncDir}" ; sinstall ${TGTInc} ${IncDir} ; } || { exit 0 ; }'
#    Note $STDOUT '	sinstall ${TGTInc} ${IncDir}'
    Note $STDOUT ""

    Note $STDOUT '#'
    Note $STDOUT '# install binaries'
    Note $STDOUT '#'
    Note $STDOUT 'bininstall : ${TGTBin}'
    Note $STDOUT '	@[ ! -f ${BinDir}/.lock ] || { echo "${BinDir} is locked" ; exit 1 ; }'
    Note $STDOUT '	@[ "${TGTBin}" != "nobin" ] && { echo "sinstall ${TGTBin} ${BinDir}" ; sinstall ${TGTBin} ${BinDir} ; } || { exit 0 ; }'
#    Note $STDOUT '	sinstall ${TGTBin} ${BinDir}'
    Note $STDOUT ""

    Note $STDOUT '#'
    Note $STDOUT '# install scheme files'
    Note $STDOUT '#'
    Note $STDOUT 'scminstall : ${TGTScm}'
    Note $STDOUT '	@[ ! -f ${ScmDir}/.lock ] || { echo "${ScmDir} is locked" ; exit 1 ; }'
    Note $STDOUT '	@[ "${TGTScm}" != "noscm" ] && { echo "sinstall ${TGTScm} ${ScmDir}" ; sinstall ${TGTScm} ${ScmDir} ; } || { exit 0 ; }'
#    Note $STDOUT '	sinstall ${TGTScm} ${ScmDir}'
    Note $STDOUT ""

    Note $STDOUT '#'
    Note $STDOUT '# install (scheme) extensions files'
    Note $STDOUT '#'
    Note $STDOUT 'extinstall :'
    Note $STDOUT '	@[ ! -f ${ExtDir}/.lock ] || { echo "${ExtDir} is locked" ; exit 1 ; }'
    Note $STDOUT '	@[ "${TGTScmX}" != "noscmx" ] && { echo "sinstall ${TGTScmX} ${ExtDir}" ; sinstall ${TGTScmX} ${ExtDir} ; } || { exit 0 ; }'
    Note $STDOUT '	@[ "${TGTScrX}" != "noscrx" ] && { echo "sinstall ${TGTScrX} ${BinDir}" ; sinstall ${TGTScrX} ${BinDir} ; } || { exit 0 ; }'
    Note $STDOUT ""

    Note $STDOUT '#'
    Note $STDOUT '# install scripts'
    Note $STDOUT '#'
    Note $STDOUT 'scrinstall : ${TGTScr}'
    Note $STDOUT '	@[ ! -f ${BinDir}/.lock ] || { echo "${BinDir} is locked" ; exit 1 ; }'
    Note $STDOUT '	@[ "${TGTScr}" != "noscr" ] && { echo "sinstall ${TGTScr} ${BinDir}" ; sinstall ${TGTScr} ${BinDir} ; } || { exit 0 ; }'
#    Note $STDOUT '	sinstall ${TGTScr} ${BinDir}'
    Note $STDOUT ""

    Note $STDOUT '#'
    Note $STDOUT '# install man pages'
    Note $STDOUT '#'
    Note $STDOUT 'man1install :'
    Note $STDOUT '	@[ ! -f ${Man1Dir}/.lock ] || { echo "${Man1Dir} is locked" ; exit 1 ; }'
    Note $STDOUT '	${PSY_ScrDir}/maninstall -s 1'
#    Note $STDOUT '	@(echo "sinstall ${tmpobj}/*.1 ${Man1Dir}" ; sinstall ${tmpobj}/*.1 ${Man1Dir})'
    Note $STDOUT ""
    Note $STDOUT 'man3install :'
    Note $STDOUT '	@[ ! -f ${Man3Dir}/.lock ] || { echo "${Man3Dir} is locked" ; exit 1 ; }'
    Note $STDOUT '	${PSY_ScrDir}/maninstall -s 3'
#    Note $STDOUT '	@(echo "sinstall ${tmpobj}/*.3 ${Man3Dir}" ; sinstall ${tmpobj}/*.3 ${Man3Dir})'
    Note $STDOUT ""

    Note $STDOUT '#'
    Note $STDOUT '# clean up the directory'
    Note $STDOUT '#'
    Note $STDOUT 'clean :'
    Note $STDOUT '	@[ ! -f ${IncDir}/.lock ] || { echo "${IncDir} is locked" ; exit 1 ; }'
    Note $STDOUT '	${CleanAction}'
    Note $STDOUT '	@touch tarfu~ core'
    Note $STDOUT '	@${RM} *~ core ${CleanFiles} > /dev/null 2>&1'
    Note $STDOUT '	@${RM} ${gsrc} ${hdrf} > /dev/null 2>&1'

    Note $STDOUT '#'
    Note $STDOUT '# remove binaries and libraries'
    Note $STDOUT '#'
    Note $STDOUT 'remove :'
    Note $STDOUT '	@pact -na 1 clean'
    Note $STDOUT '	${RemoveAction}'
    Note $STDOUT '	@touch tarfu.o'
    Note $STDOUT '	@${RM} ${PACTTmpDir}/*.[cfo] ${PACTTmpDir}/*.mod > /dev/null'
    Note $STDOUT '	@${RM} *.o *.a *.so *.so.* ${RemoveFiles} > /dev/null'
    Note $STDOUT '	@${RM} ${TGTLib} ${TGTBin}'
    Note $STDOUT ""

    Note $STDOUT '#'
    Note $STDOUT '# patch FPE handling'
    Note $STDOUT '#'
    Note $STDOUT 'patch-fpe :'

    if ("$HSY_FPU" == "x87") then
       set lcc = ( $FPE_Exe $FPE_Flags )

       Note $STDOUT '	@(cd ${PACTTmpDir} ; \'
       Note $STDOUT '          echo "'$lcc' -c mlfpex86.c -o mlfpex86.o" ; \'
       Note $STDOUT '          '$lcc' -I${IncDir} -c ${PACTSrcDir}/mlfpex86.c -o mlfpex86.o ; \'
       Note $STDOUT '          ${AR} ${AROpt} ${TGTLib} mlfpex86.o 2> /dev/null ; \'
       Note $STDOUT '          ${RM} mlfpex86.o 2> /dev/null )'

    else if ("$HSY_FPU" == "ppc") then
       set lcc = ( $FPE_Exe -g -Wall )
       if ($?Bits == 1) then
          set lcc = ( $lcc -m$Bits )
       endif

       Note $STDOUT '	@(cd ${PACTTmpDir} ; \'
       Note $STDOUT '          echo "'$lcc' -c mlfpeppc.c -o mlfpeppc.o" ; \'
       Note $STDOUT '          '$lcc' -I${IncDir} -c ${PACTSrcDir}/mlfpeppc.c -o mlfpeppc.o ; \'
       Note $STDOUT '          ${AR} ${AROpt} ${TGTLib} mlfpeppc.o 2> /dev/null ; \'
       Note $STDOUT '          ${RM} mlfpeppc.o 2> /dev/null )'
    endif

    if ($HAVE_GNU_FENV == TRUE) then
       set lcc = ( $FPE_Exe -g -Wall )
       if ($MAKE_Shared_Libs == TRUE) then
          set lcc = ( $lcc -fPIC )
       endif
       Note $STDOUT '	@(cd ${PACTTmpDir} ; \'
       Note $STDOUT '          '$lcc' -I${IncDir} -c ${PACTSrcDir}/mlfpegnu.c -o mlfpegnu.o ; \'
       Note $STDOUT '          ${AR} ${AROpt} ${TGTLib} mlfpegnu.o 2> /dev/null ; \'
       Note $STDOUT '          ${RM} mlfpegnu.o 2> /dev/null )'
    endif
    Note $STDOUT ""

    unset lcc

    Note $STDOUT '#'
    Note $STDOUT '# Record the interface changes as defined in the headers'
    Note $STDOUT '#'
    Note $STDOUT 'diff-hdr :'
    Note $STDOUT '	${Manager}/manager/pact-changes ${IncDir} ${Hdrs}'
    Note $STDOUT ""

    Note $STDOUT '#'
    Note $STDOUT '# dummy rule for noinc pseudo target'
    Note $STDOUT '#'
    Note $STDOUT 'noinc :'
    Note $STDOUT '	@cd .'
    Note $STDOUT ""

    Note $STDOUT '#'
    Note $STDOUT '# Generated code rules'
    Note $STDOUT '#'
    Note $STDOUT ''

    Note $STDOUT '# language bindings'
    Note $STDOUT ''

    Note $STDOUT 'gcb = ${tmpobj}/gc-${LibName}.c'
    Note $STDOUT 'gfb = ../fortran/${tmpobj}/gf-${LibName}.c'
    Note $STDOUT 'gmb = ../fortran/${tmpobj}/gm-${LibName}.f'
    Note $STDOUT 'gsb = ../sx/${tmpobj}/gs-${LibName}.c'
    Note $STDOUT 'gpb = ../python/${tmpobj}/gp-${LibName}.c'
    Note $STDOUT ''

# NOTE: technically this should be all of them but that results in
# bproto being run many times - at least by dmake
    Note $STDOUT '${gcb} :'
    Note $STDOUT '	@[ "${LibName}" != "noname" ] && { ${BinDir}/bproto ${ExcludeType} ; } || { exit 0 ; }'
    Note $STDOUT ''

    Note $STDOUT 'generate : ${gcb} ${hdrf}'
    Note $STDOUT ''

    Note $STDOUT 'devgen :'
    Note $STDOUT '	@(cd ${PACTTmpDir} ; \'
    Note $STDOUT '          echo "bindings" ; \'
    Note $STDOUT '          pact -f ${PACTSrcDir}/pre-Make IncGen=\"-I../..\" PACTSrcDir=\".\" PACTTmpDir=\".\" LibAction="@/bin/true" devlib)'
    Note $STDOUT ''

#--------------------------------------------------------------------------
#--------------------------------------------------------------------------

source $Me:h/post-common

exit(0)

