#
# XLC - define IBM XLC compiler
#
# include "cpyright.h"
#

Tool CC {
   Exe       = ${OCV_CC}
   Flags     = -D_ALL_SOURCE
   Flags    += ${OCV_XArch}
   Flags    += [ _env_ = STD_C ;             # C standard flags
                 C89   = -qlanglvl=stdc89 ;
                 C99   = -qlanglvl=stdc99 ;
                 X89   = -qlanglvl=extc89 ;
                 X99   = -qlanglvl=extc99 ;
                 X11   = -qlanglvl=extc1x ]
   Flags    =+ ${OCV_Long16}
   Flags    =+ ${OCV_CC_Warn}
   Flags    += [ _env_ = Bits ;              # address bit size
                 *     = -q* ]
   Flags    += [ _cmd_ = -p ;                # profiling
	         on    = -qpdf1 ]
#   Debug     = -g -O0
   Debug     = -g -O0 -qmaxmem=-1
   Optimize  = -g -O -qmaxmem=32768
   Version   = -qversion
}

Tool FC {
   Exe     = ${OCV_FC}
   Flags   = -qrecur -qnullterm -qinitauto=ff -qalias=intptr -qundef
   Flags  += ${OCV_XArch}
   Flags  += [ _env_ = Bits ;                # address bit size
               *     = -q* ]
   Flags  += [ _cmd_ = -p ;                  # profiling
	       on    = -qpdf1 ]
   Mod     = -qmoddir=                       # module directory
   Version = -qversion
}

Tool CXX {
   Exe       = ${OCV_CXX}
   Flags     = 
   Debug     = -g -O0
   Optimize  = -g -O
   Version   = -qversion
}

Tool LD {
   RPath  = ${OCV_RPath}
   Lib    = ${OCV_LD_Lib}
   Flags  = ${OCV_LD_Bits}
   Flags += ${OCV_LD_Ext}
}

Tool Lex {
   Flags  = -D_ALL_SOURCE -D_LARGE_FILES
   Flags += ${OCV_XArch}
   Flags += ${OCV_LX_Warn}
   Flags += [ _env_ = STD_C ;             # C standard flags
              C89   = -qlanglvl=stdc89 ;
              C99   = -qlanglvl=stdc99 ;
              X89   = -qlanglvl=extc89 ;
              X99   = -qlanglvl=extc99 ;
              X11   = -qlanglvl=extc1x ]
   Flags += [ _env_ = Bits ;                 # address bit size
              *     = -q* ]
}

Group AF {
   PATTERN_WARN = "WARNING: (E) (W) (I)"
   PATTERN_ERR  = "Error: (S)"
}

Group Cfg {
   Use      = CC
   Use      = FC
   LD_Flags = ${LD_Flags}
}

Group Shared {
   LD_Exe    = ${OCV_CC}
   CC_Flags  = -qpic
   CC_Flags += [ _env_ = Bits ;              # address bit size
                 *     = -q* ]
   LD_Flags  = -qmkshrobj
#   LD_Exe    = cc
#   LD_Flags  = -G
}

Group PThread {
   CC_Exe   = ${OCV_CC_SMP}
   FC_Exe   = ${OCV_FC_SMP}
   LD_Flags = -qsmp -qthreaded
   LD_Lib   = -lpthread 
}

Group OpenMP {
   CC_Exe    = ${OCV_CC_SMP}
   FC_Exe    = ${OCV_FC_SMP}
   CC_Flags  = ${OCV_OMP}
   FC_Flags  = ${OCV_OMP}
   Lex_Flags = ${OCV_OMP}
   LD_Flags  = ${OCV_OMP}
   LD_Lib    =
}

.c.i:
	${CC} -P $<

.f.o:
	${FC} ${FFLAGS} ${LDFLAGS} -c $<

include serial

